14280 CVE-2015-2739/Firefox_38.8.0esr_CVE_2015_2739_dom_base_nsXMLHttpRequest.cpp Buffer_Overflow_boundedcpy 4047
bool ArrayBufferBuilder::append(const uint8_t *aNewData, uint32_t aDataLen,
uint32_t aMaxGrowth)
if (mLength + aDataLen > mCapacity)
uint32_t newcap;
if (!aMaxGrowth || mCapacity < aMaxGrowth)
newcap = mCapacity * 2;
else
newcap = mCapacity + aMaxGrowth;
if (newcap < mLength + aDataLen)
newcap = mLength + aDataLen;
if (newcap < mCapacity)
return false;
if (!setCapacity(newcap)) {
return false;
MOZ_ASSERT(!areOverlappingRegions(aNewData, aDataLen, mDataPtr + mLength,
aDataLen));
uint32_t aLength2)
memcpy(mDataPtr + mLength, aNewData, aDataLen);
1

14281 CVE-2015-2739/Firefox_38.8.0esr_CVE_2015_2739_dom_base_nsXMLHttpRequest.cpp Buffer_Overflow_boundedcpy 4047
bool ArrayBufferBuilder::append(const uint8_t *aNewData, uint32_t aDataLen,
uint32_t aMaxGrowth)
CheckedUint32 neededCapacity = mLength;
neededCapacity += aDataLen;
if (!neededCapacity.isValid())
return false;
if (mLength + aDataLen > mCapacity)
CheckedUint32 newcap = mCapacity;
if (!aMaxGrowth || mCapacity < aMaxGrowth)
newcap *= 2;
else
newcap += aMaxGrowth;
if (!newcap.isValid())
return false;
if (newcap.value() < neededCapacity.value())
newcap = neededCapacity;
if (!setCapacity(newcap.value()))
return false;
MOZ_ASSERT(!areOverlappingRegions(aNewData, aDataLen, mDataPtr + mLength,
aDataLen));
uint32_t aLength2)
memcpy(mDataPtr + mLength, aNewData, aDataLen);
0

