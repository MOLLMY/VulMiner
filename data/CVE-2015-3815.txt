499 CVE-2015-3815/Wireshark_1.12.4_CVE_2015_3815_wiretap_logcat.c cfunc 195
&wth->phdr, wth->frame_buffer, err, err_info);
struct wtap_pkthdr *phdr, Buffer *buf,
phdr, buf, err, err_info)) {
struct wtap_pkthdr *phdr, Buffer *buf, int *err, gchar **err_info)
guint                tmp[2];
bytes_read = file_read(&tmp, 2, fh);
payload_length = pletoh16(tmp);
buffer_assure_space(buf, packet_size);
pd = buffer_start_ptr(buf);
memcpy(pd, tmp, 2);
0

594 CVE-2015-3815/Wireshark_1.12.4_CVE_2015_3815_wiretap_logcat.c cfunc 374
const guint8 *pd, int *err)
tag = (const char *) (pd + 6 * 4 + 1);
log = tag + strlen(tag) + 1;
1

622 CVE-2015-3815/Wireshark_1.12.4_CVE_2015_3815_wiretap_logcat.c cfunc 394
return '?';
const guint8 *pd, int *err)
pid = (const gint *) (pd + 4);
tid = (const gint *) (pd + 2 * 4);
nanoseconds = (const guint32 *) (pd + 4 * 4);
priority = get_priority((const guint8 *) (pd + 5 * 4));
tag = (const gchar *) (pd + 5 * 4 + 1);
log = tag + strlen(tag) + 1;
pid = (const gint *) (pd + 4);
tid = (const gint *) (pd + 2 * 4);
nanoseconds = (const guint32 *) (pd + 4 * 4);
priority = get_priority((const guint8 *) (pd + 6 * 4));
tag = (const char *) (pd + 6 * 4 + 1);
log = tag + strlen(tag) + 1;
buf = logcat_log(dumper, *datetime, *nanoseconds / 1000000, *pid, *tid,
priority, tag, log_part);
gint microseconds, gint pid, gint tid, gchar priority, const gchar *tag,
log_part[str_end - str_begin] = '\0';
priority, tag, log_part);
const gchar *log)
gchar  time_buffer[15];
priority, tag, pid, log);
r
priority, pid, log, tag);
r
priority, tag, log);
r
priority, pid, tid, log);
r
strftime(time_buffer, sizeof(time_buffer), "%m-%d %H:%M:%S",
time_buffer, microseconds, priority, tag, pid, log);
r
strftime(time_buffer, sizeof(time_buffer), "%m-%d %H:%M:%S",
time_buffer, microseconds, pid, tid, priority, tag, log);
r
strftime(time_buffer, sizeof(time_buffer), "%m-%d %H:%M:%S",
time_buffer, microseconds, pid, tid, priority, tag, log);
r
return NULL;
buf = logcat_log(dumper, *datetime, *nanoseconds / 1000000, *pid, *tid,
length = (guint32)strlen(buf);
if (!wtap_dump_file_write(wdh, buf, length, err)) {
length = (guint32)strlen(buf);
1

624 CVE-2015-3815/Wireshark_1.12.4_CVE_2015_3815_wiretap_logcat.c cfunc 79
const guint8 *pd, int *err)
datetime = (const guint32 *) (pd + 3 * 4);
datetime = (const guint32 *) (pd + 3 * 4);
buf = logcat_log(dumper, *datetime, *nanoseconds / 1000000, *pid, *tid,
buf = logcat_log(dumper, *datetime, *nanoseconds / 1000000, *pid, *tid,
static gchar *logcat_log(const struct dumper_t *dumper, guint32 seconds,
datetime = (time_t) seconds;
gmtime(&datetime));
1

625 CVE-2015-3815/Wireshark_1.12.4_CVE_2015_3815_wiretap_logcat.c cppfunc 79
const guint8 *pd, int *err)
datetime = (const guint32 *) (pd + 3 * 4);
datetime = (const guint32 *) (pd + 3 * 4);
buf = logcat_log(dumper, *datetime, *nanoseconds / 1000000, *pid, *tid,
buf = logcat_log(dumper, *datetime, *nanoseconds / 1000000, *pid, *tid,
static gchar *logcat_log(const struct dumper_t *dumper, guint32 seconds,
datetime = (time_t) seconds;
gmtime(&datetime));
1

629 CVE-2015-3815/Wireshark_1.12.4_CVE_2015_3815_wiretap_logcat.c cfunc 418
return '?';
buf = logcat_log(dumper, *datetime, *nanoseconds / 1000000, *pid, *tid,
priority, tag, log_part);
gint microseconds, gint pid, gint tid, gchar priority, const gchar *tag,
const guint8 *pd, int *err)
pid = (const gint *) (pd + 4);
buf = logcat_log(dumper, *datetime, *nanoseconds / 1000000, *pid, *tid,
tid = (const gint *) (pd + 2 * 4);
nanoseconds = (const guint32 *) (pd + 4 * 4);
priority = get_priority((const guint8 *) (pd + 5 * 4));
tag = (const gchar *) (pd + 5 * 4 + 1);
log = tag + strlen(tag) + 1;
pid = (const gint *) (pd + 4);
tid = (const gint *) (pd + 2 * 4);
nanoseconds = (const guint32 *) (pd + 4 * 4);
priority = get_priority((const guint8 *) (pd + 6 * 4));
tag = (const char *) (pd + 6 * 4 + 1);
log = tag + strlen(tag) + 1;
buf = logcat_log(dumper, *datetime, *nanoseconds / 1000000, *pid, *tid,
buf = logcat_log(dumper, *datetime, *nanoseconds / 1000000, *pid, *tid,
priority, tag, log_part);
gint microseconds, gint pid, gint tid, gchar priority, const gchar *tag,
log_part[strlen(str_begin)] = '\0';
priority, tag, log_part);
const gchar *log)
gchar  time_buffer[15];
priority, tag, pid, log);
r
priority, pid, log, tag);
r
priority, tag, log);
r
priority, pid, tid, log);
r
strftime(time_buffer, sizeof(time_buffer), "%m-%d %H:%M:%S",
time_buffer, microseconds, priority, tag, pid, log);
r
strftime(time_buffer, sizeof(time_buffer), "%m-%d %H:%M:%S",
time_buffer, microseconds, pid, tid, priority, tag, log);
r
strftime(time_buffer, sizeof(time_buffer), "%m-%d %H:%M:%S",
time_buffer, microseconds, pid, tid, priority, tag, log);
r
return NULL;
buf = logcat_log(dumper, *datetime, *nanoseconds / 1000000, *pid, *tid,
length = (guint32)strlen(buf);
if (!wtap_dump_file_write(wdh, buf, length, err)) {
length = (guint32)strlen(buf);
1

633 CVE-2015-3815/Wireshark_1.12.4_CVE_2015_3815_wiretap_logcat.c cfunc 89
const guint8 *pd, int *err)
datetime = (const guint32 *) (pd + 3 * 4);
datetime = (const guint32 *) (pd + 3 * 4);
buf = logcat_log(dumper, *datetime, *nanoseconds / 1000000, *pid, *tid,
buf = logcat_log(dumper, *datetime, *nanoseconds / 1000000, *pid, *tid,
static gchar *logcat_log(const struct dumper_t *dumper, guint32 seconds,
datetime = (time_t) seconds;
gmtime(&datetime));
1

634 CVE-2015-3815/Wireshark_1.12.4_CVE_2015_3815_wiretap_logcat.c cppfunc 89
const guint8 *pd, int *err)
datetime = (const guint32 *) (pd + 3 * 4);
datetime = (const guint32 *) (pd + 3 * 4);
buf = logcat_log(dumper, *datetime, *nanoseconds / 1000000, *pid, *tid,
buf = logcat_log(dumper, *datetime, *nanoseconds / 1000000, *pid, *tid,
static gchar *logcat_log(const struct dumper_t *dumper, guint32 seconds,
datetime = (time_t) seconds;
gmtime(&datetime));
1

645 CVE-2015-3815/Wireshark_1.12.4_CVE_2015_3815_wiretap_logcat.c cfunc 408
g_strlcpy(log_part, str_begin, strlen(str_begin));
log_part[strlen(str_begin)] = '\0';
log_part = (gchar *) g_malloc(strlen(str_begin) + 1);
g_strlcpy(log_part, str_begin, strlen(str_begin));
1

647 CVE-2015-3815/Wireshark_1.12.4_CVE_2015_3815_wiretap_logcat.c cfunc 143
guint16  tmp;
bytes_read = file_read(&tmp, 2, wth->fh);
payload_length = pletoh16(&tmp);
buffer = (guint8 *) g_malloc(5 * 4 + payload_length);
bytes_read = file_read(buffer, 5 * 4 + payload_length, wth->fh);
tag_length = (guint32)strlen(buffer + 5 * 4 + 1) + 1;
log_length = (guint32)strlen(buffer + 5 * 4 + 1 + tag_length) + 1;
1

672 CVE-2015-3815/Wireshark_1.12.4_CVE_2015_3815_wiretap_logcat.c cfunc 84
const guint8 *pd, int *err)
datetime = (const guint32 *) (pd + 3 * 4);
datetime = (const guint32 *) (pd + 3 * 4);
buf = logcat_log(dumper, *datetime, *nanoseconds / 1000000, *pid, *tid,
buf = logcat_log(dumper, *datetime, *nanoseconds / 1000000, *pid, *tid,
static gchar *logcat_log(const struct dumper_t *dumper, guint32 seconds,
datetime = (time_t) seconds;
gmtime(&datetime));
1

673 CVE-2015-3815/Wireshark_1.12.4_CVE_2015_3815_wiretap_logcat.c cppfunc 84
const guint8 *pd, int *err)
datetime = (const guint32 *) (pd + 3 * 4);
datetime = (const guint32 *) (pd + 3 * 4);
buf = logcat_log(dumper, *datetime, *nanoseconds / 1000000, *pid, *tid,
buf = logcat_log(dumper, *datetime, *nanoseconds / 1000000, *pid, *tid,
static gchar *logcat_log(const struct dumper_t *dumper, guint32 seconds,
datetime = (time_t) seconds;
gmtime(&datetime));
1

14284 CVE-2015-3815/Wireshark_1.12.4_CVE_2015_3815_wiretap_logcat.c String_Termination_Error 409
static gboolean logcat_dump_text(wtap_dumper *wdh,
const struct wtap_pkthdr *phdr,
const guint8 *pd, int *err)
gchar                          *buf;
gint                            length;
gchar                           priority;
const gchar                    *tag;
const gint                     *pid;
const gint                     *tid;
const gchar                    *log;
gchar                          *log_part;
const gchar                    *str_begin;
const gchar                    *str_end;
const guint32                  *datetime;
const guint32                  *nanoseconds;
const union wtap_pseudo_header *pseudo_header = &phdr->pseudo_header;
const struct dumper_t          *dumper        = (const struct dumper_t *) wdh->priv;
if (pseudo_header->logcat.version == 1)
pid = (const gint *) (pd + 4);
tid = (const gint *) (pd + 2 * 4);
datetime = (const guint32 *) (pd + 3 * 4);
nanoseconds = (const guint32 *) (pd + 4 * 4);
priority = get_priority((const guint8 *) (pd + 5 * 4));
tag = (const gchar *) (pd + 5 * 4 + 1);
log = tag + strlen(tag) + 1;
else if (pseudo_header->logcat.version == 2)
pid = (const gint *) (pd + 4);
tid = (const gint *) (pd + 2 * 4);
datetime = (const guint32 *) (pd + 3 * 4);
nanoseconds = (const guint32 *) (pd + 4 * 4);
priority = get_priority((const guint8 *) (pd + 6 * 4));
tag = (const char *) (pd + 6 * 4 + 1);
log = tag + strlen(tag) + 1;
else
*err = WTAP_ERR_UNSUPPORTED_ENCAP;
return FALSE;
str_begin = str_end = log;
while (dumper->type != DUMP_LONG && (str_end = strchr(str_begin, '\n'))) {
log_part = (gchar *) g_malloc(str_end - str_begin + 1);
g_strlcpy(log_part, str_begin, str_end - str_begin);
log_part[str_end - str_begin] = '\0';
str_begin = str_end + 1;
buf = logcat_log(dumper, *datetime, *nanoseconds / 1000000, *pid, *tid,
priority, tag, log_part);
if (!buf)
g_free(log_part);
return FALSE;
g_free(log_part);
length = (guint32)strlen(buf);
if (!wtap_dump_file_write(wdh, buf, length, err))
g_free(buf);
return FALSE;
wdh->bytes_dumped += length;
g_free(buf);
if (*str_begin != '\0')
log_part = (gchar *) g_malloc(strlen(str_begin) + 1);
g_strlcpy(log_part, str_begin, strlen(str_begin));
log_part[strlen(str_begin)] = '\0';
buf = logcat_log(dumper, *datetime, *nanoseconds / 1000000, *pid, *tid,
priority, tag, log_part);
if (!buf)
g_free(log_part);
return FALSE;
g_free(log_part);
length = (guint32)strlen(buf);
if (!wtap_dump_file_write(wdh, buf, length, err))
g_free(buf);
return FALSE;
wdh->bytes_dumped += length;
g_free(buf);
return TRUE;
1

14285 CVE-2015-3815/Wireshark_1.12.4_CVE_2015_3815_wiretap_logcat.c String_Termination_Error 409
static gboolean logcat_dump_text(wtap_dumper *wdh,
const struct wtap_pkthdr *phdr,
const guint8 *pd, int *err)
gchar                          *buf;
gint                            length;
gchar                           priority;
const struct logger_entry      *log_entry = (struct logger_entry *) pd;
const struct logger_entry_v2   *log_entry_v2 = (struct logger_entry_v2 *) pd;
gint                            payload_length;
const gchar                    *tag;
gint32                          pid;
gint32                          tid;
gint32                          seconds;
gint32                          milliseconds;
const gchar                    *msg_begin;
gint                            msg_pre_skip;
gchar                          *log;
gchar                          *log_part;
const union wtap_pseudo_header *pseudo_header = &phdr->pseudo_header;
const struct dumper_t          *dumper        = (const struct dumper_t *) wdh->priv;
payload_length = GINT32_FROM_LE(log_entry->len);
pid = GINT32_FROM_LE(log_entry->pid);
tid = GINT32_FROM_LE(log_entry->tid);
seconds = GINT32_FROM_LE(log_entry->sec);
milliseconds = GINT32_FROM_LE(log_entry->nsec) / 1000000;
if (pseudo_header->logcat.version == 1)
priority = get_priority(log_entry->msg[0]);
tag = log_entry->msg + 1;
msg_pre_skip = 1 + strlen(tag) + 1;
msg_begin = log_entry->msg + msg_pre_skip;
else if (pseudo_header->logcat.version == 2)
priority = get_priority(log_entry_v2->msg[0]);
tag = log_entry_v2->msg + 1;
msg_pre_skip = 1 + strlen(tag) + 1;
msg_begin = log_entry_v2->msg + msg_pre_skip;
else
*err = WTAP_ERR_UNSUPPORTED_ENCAP;
return FALSE;
log = g_strndup(msg_begin, payload_length - msg_pre_skip);
log_next = log;
do
log_part = log_next;
if (dumper->type == DUMP_LONG)
log_next = NULL;
else
log_next = strchr(log_part, '\n');
if (log_next != NULL)
*log_next = '\0';
++log_next;
if (*log_next == '\0')
log_next = NULL;
buf = logcat_log(dumper, seconds, milliseconds, pid, tid,
priority, tag, log_part);
if (!buf)
g_free(log);
return FALSE;
length = (guint32)strlen(buf);
if (!wtap_dump_file_write(wdh, buf, length, err))
g_free(log);
return FALSE;
wdh->bytes_dumped += length;
while (log_next != NULL);
g_free(log);
return TRUE;
0

14286 CVE-2015-3815/Wireshark_1.12.4_CVE_2015_3815_wiretap_logcat.c String_Termination_Error 151
guint16  tmp;
bytes_read = file_read(&tmp, 2, wth->fh);
payload_length = pletoh16(&tmp);
try_header_size = pletoh16(&tmp);
buffer = (guint8 *) g_malloc(5 * 4 + payload_length);
bytes_read = file_read(buffer, 5 * 4 + payload_length, wth->fh);
if (bytes_read != 5 * 4 + payload_length)
if (bytes_read != 4 * 4 + payload_length)
*err = file_error(wth->fh, err_info);
if (*err == 0 && bytes_read != 0)
*err = WTAP_ERR_SHORT_READ;
g_free(buffer);
return -1;
if (try_header_size == 24)
tag_length = (guint32)strlen(buffer + 5 * 4 + 1) + 1;
log_length = (guint32)strlen(buffer + 5 * 4 + 1 + tag_length) + 1;
if (payload_length == 1 + tag_length + log_length)
g_free(buffer);
return 2;
tag_length = (guint32)strlen(buffer + 4 * 4 + 1) + 1;
log_length = (guint32)strlen(buffer + 4 * 4 + 1 + tag_length) + 1;
if (payload_length == 1 + tag_length + log_length)
if (file_seek(wth->fh, file_offset + 4 * 4 + 1 + tag_length + log_length, SEEK_SET, err) == -1)
g_free(buffer);
return -1;
g_free(buffer);
return 1;
g_free(buffer);
return 0;
1

14287 CVE-2015-3815/Wireshark_1.12.4_CVE_2015_3815_wiretap_logcat.c String_Termination_Error 151
guint16  tmp;
bytes_read = file_read(&tmp, 2, wth->fh);
payload_length = pletoh16(&tmp);
hdr_size = pletoh16(&tmp);
read_sofar = 4;
if (payload_length < 3)
return -1;
if (payload_length > LOGGER_ENTRY_MAX_PAYLOAD)
return -1;
buffer = (guint8 *) g_malloc(sizeof(*log_entry_v2) + payload_length);
log_entry_v2 = (struct logger_entry_v2 *) buffer;
log_entry = (struct logger_entry *) buffer;
for (version = 1; version <= 2; ++version)
if (version == 1)
msg_payload = log_entry->msg;
entry_len = sizeof(*log_entry) + payload_length;
else if (version == 2)
msg_payload = log_entry_v2->msg;
entry_len = sizeof(*log_entry_v2) + payload_length;
if (hdr_size != sizeof(*log_entry_v2))
continue;
bytes_read = file_read(buffer + read_sofar, entry_len - read_sofar,wth->fh);
if (bytes_read != entry_len - read_sofar)
*err = file_error(wth->fh, err_info);
if (*err == 0 && bytes_read != 0)
*err = WTAP_ERR_SHORT_READ;
version = -1;
break;
read_sofar += bytes_read;
if (get_priority(msg_payload[0]) == '?')
continue;
msg_part = (guint8 *) memchr(msg_payload, '\0', payload_length - 1);
if (msg_part == NULL)
continue;
++msg_part;
msg_len = payload_length - (msg_part - msg_payload);
msg_end = (guint8 *) memchr(msg_part, '\0', msg_len);
if (msg_end && (msg_payload + payload_length - 1 != msg_end))
continue;
g_free(buffer);
return version;
g_free(buffer);
return -1;
0

