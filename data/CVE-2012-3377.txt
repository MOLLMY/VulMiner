29 CVE-2012-3377/vlc_media_player_2.0.0_CVE-2012-3377_ogg.c cfunc 981
! memcmp( &oggpacket.packet[1], "tarkin", 6 ) )
! memcmp( oggpacket.packet, "Annodex", 7 ) )
! memcmp( oggpacket.packet, "\x01vorbis", 7 ) )
! memcmp( oggpacket.packet, "Speex", 5 ) )
! memcmp( oggpacket.packet, "fLaC", 4 ) )
! memcmp( oggpacket.packet, "\x80theora", 7 ) )
! memcmp( oggpacket.packet, "KW-DIRAC\x00", 9 ) ) )
! memcmp( oggpacket.packet, "BBCD\x00", 5 ) ) ||
0

130 CVE-2012-3377/vlc_media_player_2.0.0_CVE-2012-3377_ogg.c cfunc 1416
Ogg_LogicalStreamDelete( p_demux, p_ogg->pp_stream[i_stream] );
static void Ogg_LogicalStreamDelete( demux_t *p_demux, logical_stream_t *p_stream );
free( p_ogg->pp_stream );
0

131 CVE-2012-3377/vlc_media_player_2.0.0_CVE-2012-3377_ogg.c cppfunc 1416
Ogg_LogicalStreamDelete( p_demux, p_ogg->pp_stream[i_stream] );
static void Ogg_LogicalStreamDelete( demux_t *p_demux, logical_stream_t *p_stream );
free( p_ogg->pp_stream );
0

137 CVE-2012-3377/vlc_media_player_2.0.0_CVE-2012-3377_ogg.c cfunc 1026
! memcmp( &oggpacket.packet[1], "kate\0\0\0", 7 ) )
! memcmp( oggpacket.packet, "\x01vorbis", 7 ) )
! memcmp( oggpacket.packet, "Speex", 5 ) )
! memcmp( oggpacket.packet, "fLaC", 4 ) )
! memcmp( oggpacket.packet, "\x80theora", 7 ) )
! memcmp( oggpacket.packet, "KW-DIRAC\x00", 9 ) ) )
! memcmp( oggpacket.packet, "BBCD\x00", 5 ) ) ||
! memcmp( oggpacket.packet, "Annodex", 7 ) )
! memcmp( oggpacket.packet, "AnxData", 7 ) )
0

190 CVE-2012-3377/vlc_media_player_2.0.0_CVE-2012-3377_ogg.c cfunc 159
const uint8_t  *p_peek;
if( stream_Peek( p_demux->s, &p_peek, 4 ) < 4 ) return VLC_EGENERIC;
if( !p_demux->b_force && memcmp( p_peek, "OggS", 4 ) )
0

283 CVE-2012-3377/vlc_media_player_2.0.0_CVE-2012-3377_ogg.c cfunc 1255
stream_header_t tmp;
stream_header_t *st = &tmp;
memcpy( st->streamtype, &oggpacket.packet[1+0], 8 );
if( !strncmp( st->streamtype, "video", 5 ) &&
else if( !strncmp( st->streamtype, "audio", 5 ) &&
else if( !strncmp(st->streamtype, "text", 4) )
0

372 CVE-2012-3377/vlc_media_player_2.0.0_CVE-2012-3377_ogg.c cfunc 938
! memcmp( &oggpacket.packet[1], "FLAC", 4 ) &&
! memcmp( &oggpacket.packet[9], "fLaC", 4 ) )
! memcmp( oggpacket.packet, "\x80theora", 7 ) )
! memcmp( oggpacket.packet, "\x01vorbis", 7 ) )
! memcmp( oggpacket.packet, "Speex", 5 ) )
! memcmp( oggpacket.packet, "fLaC", 4 ) )
0

409 CVE-2012-3377/vlc_media_player_2.0.0_CVE-2012-3377_ogg.c cfunc 1867
!memcmp( p_oggpacket->packet, "Annodex", 7 ) )
!memcmp( p_oggpacket->packet, "AnxData", 7 ) )
granule_rate_numerator = GetQWLE( &p_oggpacket->packet[8] );
granule_rate_denominator = GetQWLE( &p_oggpacket->packet[16] );
GetDWLE( &p_oggpacket->packet[24] );
content_type_string[0] = '\0';
uint8_t *p = memchr( &p_oggpacket->packet[42], '\r',
sscanf( (char*)(&p_oggpacket->packet[42]), "%1023s\r\n",
content_type_string );
if( !strncmp(content_type_string, "audio/x-wav", 11) )
else if( !strncmp(content_type_string, "audio/x-vorbis", 14) )
else if( !strncmp(content_type_string, "audio/x-speex", 13) )
else if( !strncmp(content_type_string, "video/x-theora", 14) )
else if( !strncmp(content_type_string, "video/x-xvid", 12) )
else if( !strncmp(content_type_string, "video/mpeg", 10) )
else if( !strncmp(content_type_string, "text/x-cmml", 11) )
0

462 CVE-2012-3377/vlc_media_player_2.0.0_CVE-2012-3377_ogg.c cfunc 1448
static void Ogg_LogicalStreamDelete( demux_t *p_demux, logical_stream_t *p_stream )
es_out_Del( p_demux->out, p_stream->p_es );
ogg_stream_clear( &p_stream->os );
free( p_stream->p_headers );
es_format_Clean( &p_stream->fmt_old );
es_format_Clean( &p_stream->fmt );
oggseek_index_entries_free( p_stream->idx );
free( p_stream );
0

463 CVE-2012-3377/vlc_media_player_2.0.0_CVE-2012-3377_ogg.c cppfunc 1448
static void Ogg_LogicalStreamDelete( demux_t *p_demux, logical_stream_t *p_stream )
es_out_Del( p_demux->out, p_stream->p_es );
ogg_stream_clear( &p_stream->os );
free( p_stream->p_headers );
es_format_Clean( &p_stream->fmt_old );
es_format_Clean( &p_stream->fmt );
oggseek_index_entries_free( p_stream->idx );
free( p_stream );
0

472 CVE-2012-3377/vlc_media_player_2.0.0_CVE-2012-3377_ogg.c cfunc 313
ogg_packet  oggpacket;
while( ogg_stream_packetout( &p_stream->os, &oggpacket ) > 0 )
! memcmp( oggpacket.packet, "\x80theora", 7 ) )
! memcmp( oggpacket.packet, "\x01vorbis", 7 ) )
Ogg_DecodePacket( p_demux, p_stream, &oggpacket );
Ogg_DecodePacket( p_demux, p_stream, &oggpacket );
static void Ogg_DecodePacket ( demux_t *, logical_stream_t *, ogg_packet * );
Ogg_DecodePacket( p_demux, p_stream, &oggpacket );
! memcmp( oggpacket.packet, "\x80theora", 7 ) )
! memcmp( oggpacket.packet, "\x01vorbis", 7 ) )
if( ogg_stream_packetout( &p_stream->os, &oggpacket ) > 0 )
Ogg_UpdatePCR( p_stream, &oggpacket );
Ogg_DecodePacket( p_demux, p_stream, &oggpacket );
! memcmp( oggpacket.packet, "\x80theora", 7 ) )
! memcmp( oggpacket.packet, "\x01vorbis", 7 ) )
static void Ogg_UpdatePCR    ( logical_stream_t *, ogg_packet * );
Ogg_UpdatePCR( p_stream, &oggpacket );
Ogg_ReadVorbisHeader( p_stream, &oggpacket );
static void Ogg_ReadVorbisHeader( logical_stream_t *, ogg_packet * );
Ogg_ReadVorbisHeader( p_stream, &oggpacket );
Ogg_ReadTheoraHeader( p_stream, &oggpacket );
static void Ogg_ReadTheoraHeader( logical_stream_t *, ogg_packet * );
Ogg_ReadTheoraHeader( p_stream, &oggpacket );
! memcmp( oggpacket.packet, "\x80theora", 7 ) )
! memcmp( oggpacket.packet, "\x01vorbis", 7 ) )
0

475 CVE-2012-3377/vlc_media_player_2.0.0_CVE-2012-3377_ogg.c cfunc 1758
p_stream->fmt.psz_description[15] = 0;
psz_desc = strdup(FindKateCategoryName(p_stream->fmt.psz_description));
free( p_stream->fmt.psz_description );
0

476 CVE-2012-3377/vlc_media_player_2.0.0_CVE-2012-3377_ogg.c cppfunc 1758
p_stream->fmt.psz_description[15] = 0;
psz_desc = strdup(FindKateCategoryName(p_stream->fmt.psz_description));
free( p_stream->fmt.psz_description );
0

590 CVE-2012-3377/vlc_media_player_2.0.0_CVE-2012-3377_ogg.c cfunc 627
! memcmp ( p_oggpacket->packet, "Annodex", 7 ) )
! memcmp ( p_oggpacket->packet, "AnxData", 7 ) )
p_oggpacket->packet += 9;
p_oggpacket->packet, p_stream->i_headers );
1

611 CVE-2012-3377/vlc_media_player_2.0.0_CVE-2012-3377_ogg.c cfunc 653
p_oggpacket->bytes -= 9;
p_stream->i_headers += p_oggpacket->bytes;
p_stream->p_headers = realloc( p_stream->p_headers, p_stream->i_headers );
p_oggpacket->packet, p_stream->i_headers );
p_stream->i_headers = 0;
p_stream->p_headers = NULL;
else if( xiph_AppendHeaders( &p_stream->i_headers, &p_stream->p_headers,
p_stream->i_headers = 0;
p_stream->p_headers = NULL;
p_stream->fmt.p_extra = malloc( p_stream->i_headers );
memcpy( p_stream->fmt.p_extra, p_stream->p_headers,
1

612 CVE-2012-3377/vlc_media_player_2.0.0_CVE-2012-3377_ogg.c cfunc 654
p_oggpacket->bytes -= 9;
p_stream->i_headers += p_oggpacket->bytes;
p_stream->p_headers = realloc( p_stream->p_headers, p_stream->i_headers );
p_oggpacket->packet, p_stream->i_headers );
p_stream->i_headers = 0;
else if( xiph_AppendHeaders( &p_stream->i_headers, &p_stream->p_headers,
p_stream->i_headers = 0;
p_stream->fmt.p_extra = malloc( p_stream->i_headers );
p_stream->i_headers );
1

617 CVE-2012-3377/vlc_media_player_2.0.0_CVE-2012-3377_ogg.c cfunc 846
static bool Ogg_LogicalStreamResetEsFormat( demux_t *p_demux, logical_stream_t *p_stream );
if( Ogg_LogicalStreamResetEsFormat( p_demux, p_stream ) )
if( !( p_block = block_New( p_demux, p_oggpacket->bytes ) ) ) return;
memcpy( p_block->p_buffer, p_oggpacket->packet + i_header_len,
static void Ogg_UpdatePCR    ( logical_stream_t *, ogg_packet * );
Ogg_UpdatePCR( p_stream, p_oggpacket );
if( !( p_block = block_New( p_demux, p_oggpacket->bytes ) ) ) return;
memcpy( p_block->p_buffer, p_oggpacket->packet + i_header_len,
p_oggpacket->bytes - i_header_len );
memcpy( p_block->p_buffer, p_oggpacket->packet + i_header_len,
static void Ogg_ReadFlacHeader( demux_t *, logical_stream_t *, ogg_packet * );
Ogg_ReadFlacHeader( p_demux, p_stream, p_oggpacket );
if( !( p_block = block_New( p_demux, p_oggpacket->bytes ) ) ) return;
memcpy( p_block->p_buffer, p_oggpacket->packet + i_header_len,
static void Ogg_ExtractMeta( demux_t *p_demux, vlc_fourcc_t i_codec, const uint8_t *p_headers, int i_headers );
Ogg_ExtractMeta( p_demux, p_stream->fmt.i_codec,
if( !( p_block = block_New( p_demux, p_oggpacket->bytes ) ) ) return;
memcpy( p_block->p_buffer, p_oggpacket->packet + i_header_len,
static void Ogg_DecodePacket( demux_t *p_demux,
int i_header_len = 0;
! memcmp ( p_oggpacket->packet, "Annodex", 7 ) )
! memcmp ( p_oggpacket->packet, "AnxData", 7 ) )
es_out_Control( p_demux->out, ES_OUT_GET_ES_STATE,
Ogg_ReadFlacHeader( p_demux, p_stream, p_oggpacket );
p_oggpacket->packet += 9;
p_oggpacket->bytes -= 9;
p_stream->i_headers += p_oggpacket->bytes;
p_stream->p_headers = realloc( p_stream->p_headers, p_stream->i_headers );
memcpy( (unsigned char *)p_stream->p_headers + p_stream->i_headers - p_oggpacket->bytes,
p_oggpacket->packet, p_stream->i_headers );
p_oggpacket->bytes, p_oggpacket->packet ) )
if( Ogg_LogicalStreamResetEsFormat( p_demux, p_stream ) )
es_out_Control( p_demux->out, ES_OUT_SET_ES_FMT,
Ogg_ExtractMeta( p_demux, p_stream->fmt.i_codec,
es_out_Control( p_demux->out, ES_OUT_RESET_PCR );
es_out_Control( p_demux->out, ES_OUT_SET_PCR,
Ogg_UpdatePCR( p_stream, p_oggpacket );
es_out_Control( p_demux->out, ES_OUT_RESET_PCR );
es_out_Control( p_demux->out, ES_OUT_SET_PCR, VLC_TS_0 + p_stream->i_pcr );
if( !( p_block = block_New( p_demux, p_oggpacket->bytes ) ) ) return;
i_header_len = (*p_oggpacket->packet & PACKET_LEN_BITS01) >> 6;
i_header_len |= (*p_oggpacket->packet & PACKET_LEN_BITS2) << 1;
i_header_len++;
memcpy( p_block->p_buffer, p_oggpacket->packet + i_header_len,
1

618 CVE-2012-3377/vlc_media_player_2.0.0_CVE-2012-3377_ogg.c cfunc 847
int i_header_len = 0;
! memcmp ( p_oggpacket->packet, "Annodex", 7 ) )
! memcmp ( p_oggpacket->packet, "AnxData", 7 ) )
p_oggpacket->packet += 9;
p_oggpacket->packet, p_stream->i_headers );
p_oggpacket->bytes, p_oggpacket->packet ) )
Ogg_UpdatePCR( p_stream, p_oggpacket );
i_header_len = (*p_oggpacket->packet & PACKET_LEN_BITS01) >> 6;
i_header_len++;
p_oggpacket->bytes - i_header_len );
static void Ogg_UpdatePCR    ( logical_stream_t *, ogg_packet * );
Ogg_UpdatePCR( p_stream, p_oggpacket );
i_header_len |= (*p_oggpacket->packet & PACKET_LEN_BITS2) << 1;
p_oggpacket->bytes - i_header_len );
1

669 CVE-2012-3377/vlc_media_player_2.0.0_CVE-2012-3377_ogg.c cppfunc 651
p_oggpacket->bytes -= 9;
p_stream->i_headers += p_oggpacket->bytes;
p_stream->p_headers = realloc( p_stream->p_headers, p_stream->i_headers );
p_oggpacket->packet, p_stream->i_headers );
p_stream->i_headers = 0;
else if( xiph_AppendHeaders( &p_stream->i_headers, &p_stream->p_headers,
p_stream->i_headers = 0;
p_stream->fmt.p_extra = malloc( p_stream->i_headers );
1

13066 CVE-2012-3377/vlc_media_player_2.0.0_CVE-2012-3377_ogg.c Buffer_Overflow_boundedcpy 601
void *p_org = p_stream->p_headers;
p_stream->i_headers += p_oggpacket->bytes;
p_stream->p_headers = realloc( p_stream->p_headers, p_stream->i_headers );
if( p_stream->p_headers )
memcpy( (unsigned char *)p_stream->p_headers + p_stream->i_headers - p_oggpacket->bytes, p_oggpacket->packet, p_stream->i_headers );
1

13067 CVE-2012-3377/vlc_media_player_2.0.0_CVE-2012-3377_ogg.c Buffer_Overflow_boundedcpy 601
void *p_org = p_stream->p_headers;
p_stream->i_headers += p_oggpacket->bytes;
p_stream->p_headers = realloc( p_stream->p_headers, p_stream->i_headers );
if( p_stream->p_headers )
memcpy( (unsigned char *)p_stream->p_headers + p_stream->i_headers - p_oggpacket->bytes, p_oggpacket->packet, p_oggpacket->bytes );
0

13896 CVE-2012-3377/vlc_media_player_2.0.0_CVE-2012-3377_ogg.c Buffer_Overflow_boundedcpy 601
void *p_org = p_stream->p_headers;
p_stream->i_headers = func(p_stream->i_headers)
static int func(const int p_stream->i_headers)
p_stream->i_headers += p_oggpacket->bytes;
return p_stream->i_headers;
p_stream->i_headers = func(p_stream->i_headers);
p_stream->p_headers = realloc( p_stream->p_headers, p_stream->i_headers );
if( p_stream->p_headers )
memcpy( (unsigned char *)p_stream->p_headers + p_stream->i_headers - p_oggpacket->bytes, p_oggpacket->packet, p_stream->i_headers );
1

13897 CVE-2012-3377/vlc_media_player_2.0.0_CVE-2012-3377_ogg.c Buffer_Overflow_boundedcpy 601
void *p_org = p_stream->p_headers;
p_stream->i_headers = func(p_stream->i_headers)
static int func(const int p_stream->i_headers)
p_stream->i_headers += p_oggpacket->bytes;
return p_stream->i_headers;
p_stream->i_headers = func(p_stream->i_headers);
p_stream->p_headers = realloc( p_stream->p_headers, p_stream->i_headers );
if( p_stream->p_headers )
memcpy( (unsigned char *)p_stream->p_headers + p_stream->i_headers - p_oggpacket->bytes, p_oggpacket->packet, p_oggpacket->bytes );
0

13898 CVE-2012-3377/vlc_media_player_2.0.0_CVE-2012-3377_ogg.c Buffer_Overflow_boundedcpy 601
void *p_org = p_stream->p_headers;
p_stream->i_headers = func(&p_stream->i_headers);
static int func(int * ptr)
int p_stream->i_headers = *ptr;
p_stream->i_headers += p_oggpacket->bytes;
return p_stream->i_headers;
p_stream->i_headers = func(&p_stream->i_headers);
p_stream->p_headers = realloc( p_stream->p_headers, p_stream->i_headers );
if( p_stream->p_headers )
memcpy( (unsigned char *)p_stream->p_headers + p_stream->i_headers - p_oggpacket->bytes, p_oggpacket->packet, p_stream->i_headers );
1

13899 CVE-2012-3377/vlc_media_player_2.0.0_CVE-2012-3377_ogg.c Buffer_Overflow_boundedcpy 601
void *p_org = p_stream->p_headers;
p_stream->i_headers = func(&p_stream->i_headers);
static int func(int * ptr)
int p_stream->i_headers = *ptr;
p_stream->i_headers += p_oggpacket->bytes;
return p_stream->i_headers;
p_stream->i_headers = func(&p_stream->i_headers);
p_stream->p_headers = realloc( p_stream->p_headers, p_stream->i_headers );
if( p_stream->p_headers )
memcpy( (unsigned char *)p_stream->p_headers + p_stream->i_headers - p_oggpacket->bytes, p_oggpacket->packet, p_oggpacket->bytes );
0

13900 CVE-2012-3377/vlc_media_player_2.0.0_CVE-2012-3377_ogg.c Buffer_Overflow_boundedcpy 601
void *p_org = p_stream->p_headers;
void (funcptr) (int) = badSource;
funcPtr(p_stream->i_headers)
void badSource(int p_stream->i_headers)
p_stream->i_headers += p_oggpacket->bytes;
p_stream->p_headers = realloc( p_stream->p_headers, p_stream->i_headers );
if( p_stream->p_headers )
memcpy( (unsigned char *)p_stream->p_headers + p_stream->i_headers - p_oggpacket->bytes, p_oggpacket->packet, p_stream->i_headers );
1

13901 CVE-2012-3377/vlc_media_player_2.0.0_CVE-2012-3377_ogg.c Buffer_Overflow_boundedcpy 601
void *p_org = p_stream->p_headers;
void (funcptr) (int) = badSource;
funcPtr(p_stream->i_headers)
void badSource(int p_stream->i_headers)
p_stream->i_headers += p_oggpacket->bytes;
p_stream->p_headers = realloc( p_stream->p_headers, p_stream->i_headers );
if( p_stream->p_headers )
memcpy( (unsigned char *)p_stream->p_headers + p_stream->i_headers - p_oggpacket->bytes, p_oggpacket->packet, p_oggpacket->bytes );
0

13902 CVE-2012-3377/vlc_media_player_2.0.0_CVE-2012-3377_ogg.c Buffer_Overflow_boundedcpy 601
void *p_org = p_stream->p_headers;
p_stream->i_headers += p_oggpacket->bytes;
int  datacopy = p_stream->i_headers;
int  p_stream->i_headers = datacopy;
p_stream->p_headers = realloc( p_stream->p_headers, p_stream->i_headers );
if( p_stream->p_headers )
memcpy( (unsigned char *)p_stream->p_headers + p_stream->i_headers - p_oggpacket->bytes, p_oggpacket->packet, p_stream->i_headers );
1

13903 CVE-2012-3377/vlc_media_player_2.0.0_CVE-2012-3377_ogg.c Buffer_Overflow_boundedcpy 601
void *p_org = p_stream->p_headers;
p_stream->i_headers += p_oggpacket->bytes;
int  datacopy = p_stream->i_headers;
int  p_stream->i_headers = datacopy;
p_stream->p_headers = realloc( p_stream->p_headers, p_stream->i_headers );
if( p_stream->p_headers )
memcpy( (unsigned char *)p_stream->p_headers + p_stream->i_headers - p_oggpacket->bytes, p_oggpacket->packet, p_oggpacket->bytes );
0

13904 CVE-2012-3377/vlc_media_player_2.0.0_CVE-2012-3377_ogg.c Buffer_Overflow_boundedcpy 601
void *p_org = p_stream->p_headers;
p_stream->i_headers += p_oggpacket->bytes;
n = p_stream->i_headers +5
p_stream->p_headers = realloc( p_stream->p_headers, n-5 );
if( p_stream->p_headers )
memcpy( (unsigned char *)p_stream->p_headers +n-5 - p_oggpacket->bytes, p_oggpacket->packet, n-5 );
1

13905 CVE-2012-3377/vlc_media_player_2.0.0_CVE-2012-3377_ogg.c Buffer_Overflow_boundedcpy 601
void *p_org = p_stream->p_headers;
p_stream->i_headers += p_oggpacket->bytes;
n = p_stream->i_headers +5
p_stream->p_headers = realloc( p_stream->p_headers, n-5 );
if( p_stream->p_headers )
memcpy( (unsigned char *)p_stream->p_headers + n-5 - p_oggpacket->bytes, p_oggpacket->packet, p_oggpacket->bytes );
0

13906 CVE-2012-3377/vlc_media_player_2.0.0_CVE-2012-3377_ogg.c Buffer_Overflow_boundedcpy 601
void *p_org = p_stream->p_headers;
p_stream->i_headers += p_oggpacket->bytes;
p_stream->p_headers = realloc( p_stream->p_headers, p_stream->i_headers );
if( p_stream->p_headers )
memcpy( (unsigned char *)p_stream->p_headers + p_stream->i_headers - p_oggpacket->bytes, p_oggpacket->packet, p_stream->i_headers );
1

13907 CVE-2012-3377/vlc_media_player_2.0.0_CVE-2012-3377_ogg.c Buffer_Overflow_boundedcpy 601
void *p_org = p_stream->p_headers;
p_stream->i_headers += p_oggpacket->bytes;
p_stream->p_headers = realloc( p_stream->p_headers, p_stream->i_headers );
if( p_stream->p_headers )
memcpy( (unsigned char *)p_stream->p_headers + p_stream->i_headers - p_oggpacket->bytes, p_oggpacket->packet, p_oggpacket->bytes );
0

13908 CVE-2012-3377/vlc_media_player_2.0.0_CVE-2012-3377_ogg.c Buffer_Overflow_boundedcpy 601
void *p_org = p_stream->p_headers;
int dataarray[5]
dataarray[2] = p_stream->i_headers;
p_stream->i_headers = badSource(dataarray);
void badsource(int dataarray[])
int p_stream->i_headers = dataarray[2]
p_stream->i_headers += p_oggpacket->bytes;
return p_stream->i_headers;
p_stream->p_headers = realloc( p_stream->p_headers, p_stream->i_headers );
if( p_stream->p_headers )
memcpy( (unsigned char *)p_stream->p_headers + p_stream->i_headers - p_oggpacket->bytes, p_oggpacket->packet, p_stream->i_headers );
1

13909 CVE-2012-3377/vlc_media_player_2.0.0_CVE-2012-3377_ogg.c Buffer_Overflow_boundedcpy 601
void *p_org = p_stream->p_headers;
int dataarray[5]
dataarray[2] = p_stream->i_headers;
p_stream->i_headers = badSource(dataarray);
void badsource(int dataarray[])
int p_stream->i_headers = dataarray[2]
p_stream->i_headers += p_oggpacket->bytes;
return p_stream->i_headers;
p_stream->p_headers = realloc( p_stream->p_headers, p_stream->i_headers );
if( p_stream->p_headers )
memcpy( (unsigned char *)p_stream->p_headers + p_stream->i_headers - p_oggpacket->bytes, p_oggpacket->packet, p_oggpacket->bytes );
0

13910 CVE-2012-3377/vlc_media_player_2.0.0_CVE-2012-3377_ogg.c Buffer_Overflow_boundedcpy 601
void *p_org = p_stream->p_headers;
unionType myUnion;
myUnion.unionFirst = p_stream->i_headers;
int p_stream->i_headers = myUnion.unionSecond;
p_stream->i_headers += p_oggpacket->bytes;
p_stream->p_headers = realloc( p_stream->p_headers, p_stream->i_headers );
if( p_stream->p_headers )
memcpy( (unsigned char *)p_stream->p_headers + p_stream->i_headers - p_oggpacket->bytes, p_oggpacket->packet, p_stream->i_headers );
1

13911 CVE-2012-3377/vlc_media_player_2.0.0_CVE-2012-3377_ogg.c Buffer_Overflow_boundedcpy 601
void *p_org = p_stream->p_headers;
unionType myUnion;
myUnion.unionFirst = p_stream->i_headers;
int p_stream->i_headers = myUnion.unionSecond;
p_stream->i_headers += p_oggpacket->bytes;
p_stream->p_headers = realloc( p_stream->p_headers, p_stream->i_headers );
if( p_stream->p_headers )
memcpy( (unsigned char *)p_stream->p_headers + p_stream->i_headers - p_oggpacket->bytes, p_oggpacket->packet, p_oggpacket->bytes );
0

13912 CVE-2012-3377/vlc_media_player_2.0.0_CVE-2012-3377_ogg.c Buffer_Overflow_boundedcpy 601
void *p_org = p_stream->p_headers;
structType myStruct;
myStruct.structFirst = p_stream->i_headers;
p_stream->i_headers = badSource(myStruct);
void badSource(structType myStruct)
int p_stream->i_headers = myStruct.structFirst;
p_stream->i_headers += p_oggpacket->bytes;
p_stream->p_headers = realloc( p_stream->p_headers, p_stream->i_headers );
if( p_stream->p_headers )
memcpy( (unsigned char *)p_stream->p_headers + p_stream->i_headers - p_oggpacket->bytes, p_oggpacket->packet, p_stream->i_headers );
1

13913 CVE-2012-3377/vlc_media_player_2.0.0_CVE-2012-3377_ogg.c Buffer_Overflow_boundedcpy 601
void *p_org = p_stream->p_headers;
structType myStruct;
myStruct.structFirst = p_stream->i_headers;
p_stream->i_headers = badSource(myStruct);
void badSource(structType myStruct)
int p_stream->i_headers = myStruct.structFirst;
p_stream->i_headers += p_oggpacket->bytes;
p_stream->p_headers = realloc( p_stream->p_headers, p_stream->i_headers );
if( p_stream->p_headers )
memcpy( (unsigned char *)p_stream->p_headers + p_stream->i_headers - p_oggpacket->bytes, p_oggpacket->packet, p_oggpacket->bytes );
0

