19 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp cppfunc 401
if (gCommandChainQueue.IsEmpty()) {
CommandChain* nextChain = gCommandChainQueue[0];
NetworkResultOptions newResult;
next(nextChain, false, newResult);
0

27 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_wifi_WifiUtils.cpp cfunc 44
char propP2pSupported[PROPERTY_VALUE_MAX];
property_get("ro.moz.wifi.p2p_supported", propP2pSupported, "0");
return (0 == strcmp(propP2pSupported, "1"));
0

48 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp cfunc 333
strcat(result, array[i].get());
for (uint32_t i = 1; i < array.Length(); i++) {
CHECK_LENGTH(len, strlen(array[i].get()), maxlen)
0

49 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp cfunc 331
static void join(nsTArray<nsCString>& array,
if (array.Length() > 0) {
CHECK_LENGTH(len, strlen(array[0].get()), maxlen)
strcpy(result, array[0].get());
for (uint32_t i = 1; i < array.Length(); i++) {
strcat(result, sep);
CHECK_LENGTH(len, strlen(array[i].get()), maxlen)
strcat(result, array[i].get());
strcat(result, sep);
0

50 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp cfunc 334
static void join(nsTArray<nsCString>& array,
const char* sep,
char* result)
uint32_t seplen = strlen(sep);
if (array.Length() > 0) {
CHECK_LENGTH(len, strlen(array[0].get()), maxlen)
strcpy(result, array[0].get());
for (uint32_t i = 1; i < array.Length(); i++) {
strcat(result, sep);
CHECK_LENGTH(len, strlen(array[i].get()), maxlen)
strcat(result, array[i].get());
0

56 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_wifi_WifiUtils.cpp cfunc 386
char propVersion[PROPERTY_VALUE_MAX];
property_get("ro.build.version.sdk", propVersion, "0");
mSdkVersion = strtol(propVersion, nullptr, 10);
0

57 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_wifi_WifiUtils.cpp cppfunc 386
char propVersion[PROPERTY_VALUE_MAX];
property_get("ro.build.version.sdk", propVersion, "0");
mSdkVersion = strtol(propVersion, nullptr, 10);
0

120 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp cfunc 970
void NetworkUtils::disableNat(CommandChain* aChain,
if (!GET_FIELD(mIp).IsEmpty() && !GET_FIELD(mPrefix).IsEmpty()) {
uint32_t prefix = atoi(GET_CHAR(mPrefix));
uint32_t ip = inet_addr(GET_CHAR(mIp));
char* networkAddr = getNetworkAddr(ip, prefix);
GET_CHAR(mInternalIfname), GET_CHAR(mExternalIfname), networkAddr,
0

121 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp cfunc 971
void NetworkUtils::disableNat(CommandChain* aChain,
if (!GET_FIELD(mIp).IsEmpty() && !GET_FIELD(mPrefix).IsEmpty()) {
uint32_t prefix = atoi(GET_CHAR(mPrefix));
uint32_t ip = inet_addr(GET_CHAR(mIp));
GET_CHAR(mInternalIfname), GET_CHAR(mExternalIfname), networkAddr,
GET_CHAR(mPrefix));
0

210 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp cfunc 603
void NetworkUtils::setAccessPoint(CommandChain* aChain,
nsCString ssid(GET_CHAR(mSsid));
nsCString key(GET_CHAR(mKey));
escapeQuote(key);
aString.ReplaceSubstring("\\", "\\\\");
}
key.get());
0

228 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp cfunc 609
void NetworkUtils::setAccessPoint(CommandChain* aChain,
nsCString ssid(GET_CHAR(mSsid));
nsCString key(GET_CHAR(mKey));
escapeQuote(key);
aString.ReplaceSubstring("\\", "\\\\");
}
key.get());
0

242 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp cfunc 351
static void getIFProperties(const char* ifname, IFProperties& prop)
char key[PROPERTY_KEY_MAX];
snprintf(key, PROPERTY_KEY_MAX - 1, "net.%s.gw", ifname);
property_get(key, prop.gateway, "");
snprintf(key, PROPERTY_KEY_MAX - 1, "net.%s.dns1", ifname);
property_get(key, prop.dns1, "");
snprintf(key, PROPERTY_KEY_MAX - 1, "net.%s.dns2", ifname);
0

243 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp cfunc 601
void NetworkUtils::setAccessPoint(CommandChain* aChain,
nsCString ssid(GET_CHAR(mSsid));
escapeQuote(ssid);
aString.ReplaceSubstring("\\", "\\\\");
}
ssid.get(),
0

245 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp cfunc 607
void NetworkUtils::setAccessPoint(CommandChain* aChain,
nsCString ssid(GET_CHAR(mSsid));
escapeQuote(ssid);
aString.ReplaceSubstring("\\", "\\\\");
}
ssid.get(),
0

254 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp cppfunc 965
void NetworkUtils::disableNat(CommandChain* aChain,
if (!GET_FIELD(mIp).IsEmpty() && !GET_FIELD(mPrefix).IsEmpty()) {
uint32_t prefix = atoi(GET_CHAR(mPrefix));
0

263 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp cfunc 616
void NetworkUtils::setAccessPoint(CommandChain* aChain,
nsCString ssid(GET_CHAR(mSsid));
nsCString key(GET_CHAR(mKey));
escapeQuote(key);
aString.ReplaceSubstring("\\", "\\\\");
}
key.get());
0

288 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp cfunc 2449
nsTArray<nsCString> configFuncs;
char persistConfig[PROPERTY_VALUE_MAX];
join(configFuncs, USB_CONFIG_DELIMIT, PROPERTY_VALUE_MAX, newConfig);
if (strcmp(currentConfig, newConfig)) {
property_set(SYS_USB_CONFIG_PROPERTY, newConfig);
}
0

295 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp cfunc 1699
char dnschange[PROPERTY_VALUE_MAX];
property_get("net.dnschange", dnschange, "0");
char num[PROPERTY_VALUE_MAX];
snprintf(num, PROPERTY_VALUE_MAX - 1, "%d", atoi(dnschange) + 1);
0

296 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp cppfunc 1699
char dnschange[PROPERTY_VALUE_MAX];
property_get("net.dnschange", dnschange, "0");
snprintf(num, PROPERTY_VALUE_MAX - 1, "%d", atoi(dnschange) + 1);
0

341 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp cfunc 1892
NS_ConvertUTF16toUTF8 autoIfname(aOptions.mIfname);
char key[PROPERTY_KEY_MAX];
snprintf(key, sizeof key - 1, "net.%s.gw", autoIfname.get());
0

342 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp cfunc 1483
char value[PROPERTY_VALUE_MAX];
property_get("ro.build.version.sdk", value, nullptr);
SDK_VERSION = atoi(value);
0

343 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp cppfunc 1483
char value[PROPERTY_VALUE_MAX];
property_get("ro.build.version.sdk", value, nullptr);
SDK_VERSION = atoi(value);
0

357 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp cfunc 2623
if (SDK_VERSION >= 20) {
if (SDK_VERSION >= 20) {
#ifdef _DEBUG
NU_DBG("     ssid: %s", GET_CHAR(mSsid));
0

370 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp cfunc 297
static void split(char* str, const char* sep, nsTArray<nsCString>& result)
char *s = strtok(str, sep);
s = strtok(nullptr, sep);
0

433 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp cppfunc 664
void NetworkUtils::clearWifiTetherParms(CommandChain* aChain,
NetworkResultOptions& aResult)
next(aChain, false, aResult);
0

440 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp cfunc 614
void NetworkUtils::setAccessPoint(CommandChain* aChain,
nsCString ssid(GET_CHAR(mSsid));
escapeQuote(ssid);
aString.ReplaceSubstring("\\", "\\\\");
}
ssid.get(),
0

444 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp cfunc 349
static void getIFProperties(const char* ifname, IFProperties& prop)
snprintf(key, PROPERTY_KEY_MAX - 1, "net.%s.gw", ifname);
property_get(key, prop.gateway, "");
snprintf(key, PROPERTY_KEY_MAX - 1, "net.%s.dns1", ifname);
0

452 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp cfunc 810
char buf[BUF_SIZE];
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
memcpy(buf, reason.get(), reason.Length() + 1);
0

507 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp cfunc 306
static void split(char* str, const char* sep, nsTArray<nsString>& result)
char *s = strtok(str, sep);
s = strtok(nullptr, sep);
0

527 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp cppfunc 1337
void NetworkUtils::finalizeSuccess(CommandChain* aChain,
next(aChain, false, aResult);
NetworkResultOptions& aResult)
gWifiTetheringParms = new NetworkParams(aChain->getParams());
postMessage(aChain->getParams(), aResult);
finalizeSuccess(aChain, aResult);
NetworkResultOptions& aResult)
next(aChain, false, aResult);
NetworkResultOptions& aResult)
postMessage(aChain->getParams(), aResult);
finalizeSuccess(aChain, aResult);
NetworkResultOptions& aResult)
next(aChain, false, aResult);
NetworkResultOptions& aResult)
postMessage(aChain->getParams(), aResult);
finalizeSuccess(aChain, aResult);
NetworkResultOptions& aResult)
next(aChain, false, aResult);
NetworkResultOptions& aResult)
ASSIGN_FIELD(mCurInternalIfname)
postMessage(aChain->getParams(), aResult);
finalizeSuccess(aChain, aResult);
NetworkResultOptions& aResult)
next(aChain, false, aResult);
aResult.mSuccess = true;
finalizeSuccess(aChain, aResult);
NetworkResultOptions& aResult)
next(aChain, false, aResult);
NetworkResultOptions& aResult)
postMessage(aChain->getParams(), aResult);
finalizeSuccess(aChain, aResult);
NetworkResultOptions& aResult)
aResult.mRet = true;
postMessage(aChain->getParams(), aResult);
finalizeSuccess(aChain, aResult);
NetworkResultOptions& aResult)
next(aChain, false, aResult);
void NetworkUtils::wifiOperationModeSuccess(CommandChain* aChain,
postMessage(aChain->getParams(), aResult);
finalizeSuccess(aChain, aResult);
void NetworkUtils::updateUpStreamSuccess(CommandChain* aChain,
ASSIGN_FIELD(mCurExternalIfname)
ASSIGN_FIELD(mCurInternalIfname)
postMessage(aChain->getParams(), aResult);
finalizeSuccess(aChain, aResult);
NetworkResultOptions& aResult)
next(aChain, false, aResult);
void NetworkUtils::setDhcpServerSuccess(CommandChain* aChain, CommandCallback aCallback, NetworkResultOptions& aResult)
postMessage(aChain->getParams(), aResult);
finalizeSuccess(aChain, aResult);
NetworkResultOptions& aResult)
next(aChain, false, aResult);
void NetworkUtils::wifiTetheringSuccess(CommandChain* aChain,
ASSIGN_FIELD(mEnable)
if (aChain->getParams().mEnable) {
postMessage(aChain->getParams(), aResult);
finalizeSuccess(aChain, aResult);
NetworkResultOptions& aResult)
next(aChain, false, aResult);
void NetworkUtils::networkInterfaceAlarmSuccess(CommandChain* aChain,
postMessage(aChain->getParams(), aResult);
finalizeSuccess(aChain, aResult);
void NetworkUtils::usbTetheringSuccess(CommandChain* aChain,
ASSIGN_FIELD(mEnable)
postMessage(aChain->getParams(), aResult);
finalizeSuccess(aChain, aResult);
NetworkResultOptions& aResult)
next(aChain, false, aResult);
void NetworkUtils::defaultAsyncSuccessHandler(CommandChain* aChain,
postMessage(aChain->getParams(), aResult);
finalizeSuccess(aChain, aResult);
0

555 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp cfunc 949
void NetworkUtils::enableNat(CommandChain* aChain,
if (!GET_FIELD(mIp).IsEmpty() && !GET_FIELD(mPrefix).IsEmpty()) {
uint32_t prefix = atoi(GET_CHAR(mPrefix));
uint32_t ip = inet_addr(GET_CHAR(mIp));
GET_CHAR(mInternalIfname), GET_CHAR(mExternalIfname), networkAddr,
GET_CHAR(mPrefix));
0

556 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp cfunc 948
void NetworkUtils::enableNat(CommandChain* aChain,
if (!GET_FIELD(mIp).IsEmpty() && !GET_FIELD(mPrefix).IsEmpty()) {
uint32_t prefix = atoi(GET_CHAR(mPrefix));
uint32_t ip = inet_addr(GET_CHAR(mIp));
char* networkAddr = getNetworkAddr(ip, prefix);
GET_CHAR(mInternalIfname), GET_CHAR(mExternalIfname), networkAddr,
0

562 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp cppfunc 942
void NetworkUtils::enableNat(CommandChain* aChain,
if (!GET_FIELD(mIp).IsEmpty() && !GET_FIELD(mPrefix).IsEmpty()) {
uint32_t prefix = atoi(GET_CHAR(mPrefix));
0

591 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp cfunc 1163
const char* legacyOrEmpty = "legacy 0 ";
legacyOrEmpty = "";
const char* action = aDoAdd ? "add" : "remove";
legacyOrEmpty, action,
1

597 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp cfunc 1186
CommandChain* aChain,
return addDefaultRouteToNetwork(aChain, aOriginalCallback, aResult);
void NetworkUtils::addDefaultRouteToNetwork(CommandChain* aChain,
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
1

13054 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 499
void NetworkUtils::doCommand(const char* aCommand, CommandChain* aChain, CommandCallback aCallback)
NU_DBG("Preparing to send \'%s\' command...", aCommand);
NetdCommand* netdCommand = new NetdCommand();
if (SDK_VERSION >= 16)
snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "0 %s", aCommand);
else
snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "%s", aCommand);
netdCommand->mSize = strlen((char*)netdCommand->mData) + 1;
gCommandQueue.AppendElement(QueueData(netdCommand, aChain, aCallback));
nextNetdCommand();
1

13055 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 499
NetdCommand* netdCommand = new NetdCommand();
void NetworkUtils::doCommand(const char* aCommand, CommandChain* aChain, CommandCallback aCallback)
NU_DBG("Preparing to send \'%s\' command...", aCommand);
if (SDK_VERSION >= 16)
PR_snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "0 %s", aCommand);
else
PR_snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "%s", aCommand);
netdCommand->mSize = strlen((char*)netdCommand->mData) + 1;
gCommandQueue.AppendElement(QueueData(netdCommand, aChain, aCallback));
nextNetdCommand();
0

13056 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1040
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION >= 20)
written = snprintf(command, sizeof command, "resolver setnetdns %d %s",GET_FIELD(mNetId), GET_CHAR(mDomain));
else
written = snprintf(command, sizeof command, "resolver setifdns %s %s",GET_CHAR(mIfname), GET_CHAR(mDomain));
nsTArray<nsString>& dnses = GET_FIELD(mDnses);
uint32_t length = dnses.Length();
for (uint32_t i = 0; i < length; i++)
NS_ConvertUTF16toUTF8 autoDns(dnses[i]);
int ret = snprintf(command + written, sizeof(command) - written, " %s", autoDns.get());
1

13057 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1040
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION >= 20)
written = PR_snprintf(command, sizeof command, "resolver setnetdns %d %s",GET_FIELD(mNetId), GET_CHAR(mDomain));
else
written = PR_snprintf(command, sizeof command, "resolver setifdns %s %s",GET_CHAR(mIfname), GET_CHAR(mDomain));
nsTArray<nsString>& dnses = GET_FIELD(mDnses);
uint32_t length = dnses.Length();
for (uint32_t i = 0; i < length; i++)
NS_ConvertUTF16toUTF8 autoDns(dnses[i]);
int ret = PR_snprintf(command + written, sizeof(command) - written, " %s", autoDns.get());
0

13058 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1165
void NetworkUtils::removeRouteFromInterface(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult)
modifyRouteOnInterface(aChain, aCallback, aResult, false);
void NetworkUtils::modifyRouteOnInterface(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult,bool aDoAdd)
char command[MAX_COMMAND_SIZE];
nsCString ipOrSubnetIp = NS_ConvertUTF16toUTF8(GET_FIELD(mIp));
nsCString gatewayOrEmpty;
const char* legacyOrEmpty = "legacy 0 ";
if (GET_FIELD(mGateway).IsEmpty()) {
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
legacyOrEmpty = "";
else
gatewayOrEmpty = nsCString(" ") + NS_ConvertUTF16toUTF8(GET_FIELD(mGateway));
const char* action = aDoAdd ? "add" : "remove";
snprintf(command, MAX_COMMAND_SIZE - 1, "network route %s%s %d %s %s/%d%s",
legacyOrEmpty, action,
GET_FIELD(mNetId), GET_CHAR(mIfname), ipOrSubnetIp.get(),
GET_FIELD(mPrefixLength), gatewayOrEmpty.get());
1

13059 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1165
void NetworkUtils::removeRouteFromInterface(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult)
modifyRouteOnInterface(aChain, aCallback, aResult, false);
void NetworkUtils::modifyRouteOnInterface(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult,bool aDoAdd)
char command[MAX_COMMAND_SIZE];
nsCString ipOrSubnetIp = NS_ConvertUTF16toUTF8(GET_FIELD(mIp));
nsCString gatewayOrEmpty;
const char* legacyOrEmpty = "legacy 0 ";
if (GET_FIELD(mGateway).IsEmpty()) {
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
legacyOrEmpty = "";
else
gatewayOrEmpty = nsCString(" ") + NS_ConvertUTF16toUTF8(GET_FIELD(mGateway));
const char* action = aDoAdd ? "add" : "remove";
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route %s%s %d %s %s/%d%s",
legacyOrEmpty, action,
GET_FIELD(mNetId), GET_CHAR(mIfname), ipOrSubnetIp.get(),
GET_FIELD(mPrefixLength), gatewayOrEmpty.get());
0

13060 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1005
void NetworkUtils::removeDefaultRoute(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
struct MyCallback
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
NU_DBG("removeDefaultRoute's reason: %s", reason.get());
if (aError && !reason.EqualsASCII("removeRoute() failed (No such process)")) {
return aOriginalCallback(aChain, aError, aResult);
GET_FIELD(mLoopIndex)++;
return removeDefaultRoute(aChain, aOriginalCallback, aResult);
1

13061 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1005
void NetworkUtils::removeDefaultRoute(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
struct MyCallback
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
NU_DBG("removeDefaultRoute's reason: %s", reason.get());
if (aError && !reason.EqualsASCII("removeRoute() failed (No such process)")) {
return aOriginalCallback(aChain, aError, aResult);
GET_FIELD(mLoopIndex)++;
return removeDefaultRoute(aChain, aOriginalCallback, aResult);
0

13072 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 729
void NetworkUtils::setInterfaceUp(CommandChain* aChain, CommandCallback aCallback, NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION >= 16) {
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "interface setcfg %s %s %s %s",
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mLink));
0

13073 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 926
void NetworkUtils::setDnsForwarders(CommandChain* aChain,CommandCallback aCallback, NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION >= 20) {
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "tether dns set %d %s %s",
GET_FIELD(mNetId), GET_CHAR(mDns1), GET_CHAR(mDns2));
0

13074 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1050
void NetworkUtils::setInterfaceDns(CommandChain* aChain, ommandCallback aCallback,NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
int written;
if (SDK_VERSION >= 20) {
written = PR_snprintf(command, sizeof command, "resolver setnetdns %d %s",
GET_FIELD(mNetId), GET_CHAR(mDomain));
nsTArray<nsString>& dnses = GET_FIELD(mDnses);
uint32_t length = dnses.Length();
for (uint32_t i = 0; i < length; i++) {
NS_ConvertUTF16toUTF8 autoDns(dnses[i]);
int ret = PR_snprintf(command + written, sizeof(command) - written, " %s", autoDns.get());
0

13075 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1185
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
return addDefaultRouteToNetwork(aChain, aOriginalCallback, aResult);
void NetworkUtils::addDefaultRouteToNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;  }
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route add %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
0

13076 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1006
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
return removeDefaultRoute(aChain, aOriginalCallback, aResult);
void NetworkUtils::removeDefaultRoute(CommandChain* aChain, CommandCallback aCallback,NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;}
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
0

13077 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1239
void NetworkUtils::addRouteToSecondaryTable(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult) {
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION < 20) {
PR_snprintf(command, MAX_COMMAND_SIZE - 1,
"interface route add %s secondary %s %s %s",
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mGateway));
0

13078 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 497
void NetworkUtils::doCommand(const char* aCommand, CommandChain* aChain, CommandCallback aCallback)
NU_DBG("Preparing to send \'%s\' command...", aCommand);
NetdCommand* netdCommand = new NetdCommand();
if (SDK_VERSION >= 16) {
PR_snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "0 %s", aCommand);
0

13079 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 879
void NetworkUtils::startTethering(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
if (!GET_FIELD(mUsbStartIp).IsEmpty() && !GET_FIELD(mUsbEndIp).IsEmpty()) {
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "tether start %s %s %s %s",
GET_CHAR(mWifiStartIp), GET_CHAR(mWifiEndIp),
GET_CHAR(mUsbStartIp),  GET_CHAR(mUsbEndIp));
0

13080 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1164
void NetworkUtils::modifyRouteOnInterface(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult,
bool aDoAdd)
char command[MAX_COMMAND_SIZE];
nsCString ipOrSubnetIp = NS_ConvertUTF16toUTF8(GET_FIELD(mIp));
nsCString gatewayOrEmpty;
const char* legacyOrEmpty = "legacy 0 ";
if (GET_FIELD(mGateway).IsEmpty()) {
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
nsCString NetworkUtils::getSubnetIp(const nsCString& aIp, int aPrefixLength)
return nsCString();
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
const char* action = aDoAdd ? "add" : "remove";
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route %s%s %d %s %s/%d%s",
legacyOrEmpty, action,
GET_FIELD(mNetId), GET_CHAR(mIfname), ipOrSubnetIp.get(),
GET_FIELD(mPrefixLength), gatewayOrEmpty.get());
0

13081 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1682
CommandResult NetworkUtils::setDNS(NetworkParams& aOptions)
uint32_t length = aOptions.mDnses.Length();
if (length > 0) {
for (uint32_t i = 0; i < length; i++) {
NS_ConvertUTF16toUTF8 autoDns(aOptions.mDnses[i]);
char dns_prop_key[PROPERTY_VALUE_MAX];
PR_snprintf(dns_prop_key, sizeof dns_prop_key, "net.dns%d", i+1);
0

13082 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 781
void NetworkUtils::addRouteToLocalNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
uint32_t prefix = atoi(GET_CHAR(mPrefix));
uint32_t ip = inet_addr(GET_CHAR(mIp));
char* networkAddr = getNetworkAddr(ip, prefix);
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route add local %s %s/%s",
GET_CHAR(mInternalIfname), networkAddr, GET_CHAR(mPrefix));
0

13083 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 602
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsCString ssid(GET_CHAR(mSsid));
nsCString key(GET_CHAR(mKey));
escapeQuote(ssid);
escapeQuote(key);
if (SDK_VERSION >= 19) {
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s \"%s\" broadcast 6 %s \"%s\"",
GET_CHAR(mIfname),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
0

13084 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1264
void NetworkUtils::removeRouteFromSecondaryTable(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult) {
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION < 20) {
PR_snprintf(command, MAX_COMMAND_SIZE - 1,
"interface route remove %s secondary %s %s %s",
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mGateway));
0

13085 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp String_Termination_Error 1607
void NetworkUtils::onNetdMessage(NetdCommand* aCommand)
char* reason = strtok(nullptr, "\0");
sendBroadcastMessage(code, reason);
if (code == NETD_COMMAND_INTERFACE_CHANGE) {
if (gWifiTetheringParms) {
char linkdownReason[MAX_COMMAND_SIZE];
PR_snprintf(linkdownReason, MAX_COMMAND_SIZE - 1,
"Iface linkstate %s down",
NS_ConvertUTF16toUTF8(gWifiTetheringParms->mIfname).get());
if (!strcmp(reason, linkdownReason)) {
0

13086 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1040
void NetworkUtils::setInterfaceDns(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
int written;
if (SDK_VERSION <= 20) {
written = PR_snprintf(command, sizeof command, "resolver setifdns %s %s", GET_CHAR(mIfname), GET_CHAR(mDomain));
0

13087 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1257
void NetworkUtils::removeRouteFromSecondaryTable(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult) {
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION >= 20) {
PR_snprintf(command, MAX_COMMAND_SIZE - 1,
"network route remove %d %s %s/%s %s",
GET_FIELD(mNetId),
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mGateway));
0

13088 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 723
void NetworkUtils::setInterfaceUp(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION >= 16) {
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "interface setcfg %s %s %s %s",
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mLink));
0

13089 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1005
void NetworkUtils::removeDefaultRoute(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
0

13090 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 615
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsCString ssid(GET_CHAR(mSsid));
nsCString key(GET_CHAR(mKey));
if (SDK_VERSION < 16) {
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s %s \"%s\" %s \"%s\" 6 0 8",
GET_CHAR(mIfname),
GET_CHAR(mWifictrlinterfacename),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
0

13091 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 608
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsCString ssid(GET_CHAR(mSsid));
nsCString key(GET_CHAR(mKey));
if (SDK_VERSION >= 16 && SDK_VERSION < 19) {
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s \"%s\" %s \"%s\"",
GET_CHAR(mIfname),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
0

13092 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1232
void NetworkUtils::addRouteToSecondaryTable(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult) {
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION >= 20) {
PR_snprintf(command, MAX_COMMAND_SIZE - 1,
"network route add %d %s %s/%s %s",
GET_FIELD(mNetId),
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mGateway));
0

13093 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1605
void NetworkUtils::onNetdMessage(NetdCommand* aCommand)
char* data = (char*)aCommand->mData;
char* result = strtok(data, NETD_MESSAGE_DELIMIT);
uint32_t code = atoi(result);
char* reason = strtok(nullptr, "\0");
if (isBroadcastMessage(code)) {
if (code == NETD_COMMAND_INTERFACE_CHANGE) {
if (gWifiTetheringParms) {
char linkdownReason[MAX_COMMAND_SIZE];
PR_snprintf(linkdownReason, MAX_COMMAND_SIZE - 1,
"Iface linkstate %s down",
NS_ConvertUTF16toUTF8(gWifiTetheringParms->mIfname).get());
0

13094 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1185
void NetworkUtils::addDefaultRouteToNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route add %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
0

13095 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 602
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsCString ssid(GET_CHAR(mSsid));
nsCString key(GET_CHAR(mKey));
escapeQuote(ssid);
escapeQuote(key);
if (SDK_VERSION >= 19) {
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s \"%s\" broadcast 6 %s \"%s\"",
GET_CHAR(mIfname),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
0

13096 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_wifi_WifiUtils.cpp Format_String_Attack 371
int32_t do_wifi_command(const char* iface, const char* cmd, char* buf, size_t* len) {
char command[COMMAND_SIZE];
if (!strcmp(iface, "p2p0")) {
PR_snprintf(command, COMMAND_SIZE, "%s", cmd);
0

13097 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_wifi_WifiUtils.cpp Format_String_Attack 374
int32_t do_wifi_command(const char* iface, const char* cmd, char* buf, size_t* len) {
char command[COMMAND_SIZE];
if (!strcmp(iface, "p2p0")) {
PR_snprintf(command, COMMAND_SIZE, "IFNAME=%s %s", iface, cmd);
0

13110 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 729
void NetworkUtils::setInterfaceUp(CommandChain* aChain, CommandCallback aCallback, NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION >= 16) {
snprintf(command, MAX_COMMAND_SIZE - 1, "interface setcfg %s %s %s [%s]",
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mLink));
1

13111 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 926
void NetworkUtils::setDnsForwarders(CommandChain* aChain,CommandCallback aCallback, NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION >= 20) {
snprintf(command, MAX_COMMAND_SIZE - 1, "tether dns set %d %s %s",
GET_FIELD(mNetId), GET_CHAR(mDns1), GET_CHAR(mDns2));
1

13112 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1050
void NetworkUtils::setInterfaceDns(CommandChain* aChain, ommandCallback aCallback,NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
int written;
if (SDK_VERSION >= 20) {
written = snprintf(command, sizeof command, "resolver setnetdns %d %s",
GET_FIELD(mNetId), GET_CHAR(mDomain));
nsTArray<nsString>& dnses = GET_FIELD(mDnses);
uint32_t length = dnses.Length();
for (uint32_t i = 0; i < length; i++) {
NS_ConvertUTF16toUTF8 autoDns(dnses[i]);
int ret = snprintf(command + written, sizeof(command) - written, " %s", autoDns.get());
1

13113 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1185
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
return addDefaultRouteToNetwork(aChain, aOriginalCallback, aResult);
void NetworkUtils::addDefaultRouteToNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;  }
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
snprintf(command, MAX_COMMAND_SIZE - 1, "network route add %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
1

13114 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1006
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
return removeDefaultRoute(aChain, aOriginalCallback, aResult);
void NetworkUtils::removeDefaultRoute(CommandChain* aChain, CommandCallback aCallback,NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;}
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
1

13115 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1239
void NetworkUtils::addRouteToSecondaryTable(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult) {
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION < 20) {
snprintf(command, MAX_COMMAND_SIZE - 1,
"interface route add %s secondary %s %s %s",
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mGateway));
1

13116 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 497
void NetworkUtils::doCommand(const char* aCommand, CommandChain* aChain, CommandCallback aCallback)
NU_DBG("Preparing to send \'%s\' command...", aCommand);
NetdCommand* netdCommand = new NetdCommand();
if (SDK_VERSION >= 16) {
snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "0 %s", aCommand);
1

13117 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 879
void NetworkUtils::startTethering(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
if (!GET_FIELD(mUsbStartIp).IsEmpty() && !GET_FIELD(mUsbEndIp).IsEmpty()) {
snprintf(command, MAX_COMMAND_SIZE - 1, "tether start %s %s %s %s",
GET_CHAR(mWifiStartIp), GET_CHAR(mWifiEndIp),
GET_CHAR(mUsbStartIp),  GET_CHAR(mUsbEndIp));
1

13118 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1164
void NetworkUtils::modifyRouteOnInterface(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult,
bool aDoAdd)
char command[MAX_COMMAND_SIZE];
nsCString ipOrSubnetIp = NS_ConvertUTF16toUTF8(GET_FIELD(mIp));
nsCString gatewayOrEmpty;
const char* legacyOrEmpty = "legacy 0 ";
if (GET_FIELD(mGateway).IsEmpty()) {
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
nsCString NetworkUtils::getSubnetIp(const nsCString& aIp, int aPrefixLength)
return nsCString();
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
const char* action = aDoAdd ? "add" : "remove";
snprintf(command, MAX_COMMAND_SIZE - 1, "network route %s%s %d %s %s/%d%s",
legacyOrEmpty, action,
GET_FIELD(mNetId), GET_CHAR(mIfname), ipOrSubnetIp.get(),
GET_FIELD(mPrefixLength), gatewayOrEmpty.get());
1

13119 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1682
CommandResult NetworkUtils::setDNS(NetworkParams& aOptions)
uint32_t length = aOptions.mDnses.Length();
if (length > 0) {
for (uint32_t i = 0; i < length; i++) {
NS_ConvertUTF16toUTF8 autoDns(aOptions.mDnses[i]);
char dns_prop_key[PROPERTY_VALUE_MAX];
snprintf(dns_prop_key, sizeof dns_prop_key, "net.dns%d", i+1);
1

13120 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 781
void NetworkUtils::addRouteToLocalNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
uint32_t prefix = atoi(GET_CHAR(mPrefix));
uint32_t ip = inet_addr(GET_CHAR(mIp));
char* networkAddr = getNetworkAddr(ip, prefix);
snprintf(command, MAX_COMMAND_SIZE - 1, "network route add local %s %s/%s",
GET_CHAR(mInternalIfname), networkAddr, GET_CHAR(mPrefix));
1

13121 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 602
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsCString ssid(GET_CHAR(mSsid));
nsCString key(GET_CHAR(mKey));
escapeQuote(ssid);
escapeQuote(key);
if (SDK_VERSION >= 19) {
snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s \"%s\" broadcast 6 %s \"%s\"",
GET_CHAR(mIfname),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
1

13122 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1264
void NetworkUtils::removeRouteFromSecondaryTable(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult) {
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION < 20) {
snprintf(command, MAX_COMMAND_SIZE - 1,
"interface route remove %s secondary %s %s %s",
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mGateway));
1

13123 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp String_Termination_Error 1607
void NetworkUtils::onNetdMessage(NetdCommand* aCommand)
char* reason = strtok(nullptr, "\0");
sendBroadcastMessage(code, reason);
if (code == NETD_COMMAND_INTERFACE_CHANGE) {
if (gWifiTetheringParms) {
char linkdownReason[MAX_COMMAND_SIZE];
snprintf(linkdownReason, MAX_COMMAND_SIZE - 1,
"Iface linkstate %s down",
NS_ConvertUTF16toUTF8(gWifiTetheringParms->mIfname).get());
if (!strcmp(reason, linkdownReason)) {
1

13124 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1040
void NetworkUtils::setInterfaceDns(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
int written;
if (SDK_VERSION <= 20) {
written = snprintf(command, sizeof command, "resolver setifdns %s %s", GET_CHAR(mIfname), GET_CHAR(mDomain));
1

13125 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1257
void NetworkUtils::removeRouteFromSecondaryTable(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult) {
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION >= 20) {
snprintf(command, MAX_COMMAND_SIZE - 1,
"network route remove %d %s %s/%s %s",
GET_FIELD(mNetId),
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mGateway));
1

13126 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 723
void NetworkUtils::setInterfaceUp(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION >= 16) {
snprintf(command, MAX_COMMAND_SIZE - 1, "interface setcfg %s %s %s %s",
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mLink));
1

13127 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1005
void NetworkUtils::removeDefaultRoute(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
1

13128 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 615
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsCString ssid(GET_CHAR(mSsid));
nsCString key(GET_CHAR(mKey));
if (SDK_VERSION < 16) {
snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s %s \"%s\" %s \"%s\" 6 0 8",
GET_CHAR(mIfname),
GET_CHAR(mWifictrlinterfacename),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
1

13129 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 608
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsCString ssid(GET_CHAR(mSsid));
nsCString key(GET_CHAR(mKey));
if (SDK_VERSION >= 16 && SDK_VERSION < 19) {
snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s \"%s\" %s \"%s\"",
GET_CHAR(mIfname),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
1

13130 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1232
void NetworkUtils::addRouteToSecondaryTable(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult) {
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION >= 20) {
snprintf(command, MAX_COMMAND_SIZE - 1,
"network route add %d %s %s/%s %s",
GET_FIELD(mNetId),
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mGateway));
1

13131 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1605
void NetworkUtils::onNetdMessage(NetdCommand* aCommand)
char* data = (char*)aCommand->mData;
char* result = strtok(data, NETD_MESSAGE_DELIMIT);
uint32_t code = atoi(result);
char* reason = strtok(nullptr, "\0");
if (isBroadcastMessage(code)) {
if (code == NETD_COMMAND_INTERFACE_CHANGE) {
if (gWifiTetheringParms) {
char linkdownReason[MAX_COMMAND_SIZE];
snprintf(linkdownReason, MAX_COMMAND_SIZE - 1,
"Iface linkstate %s down",
NS_ConvertUTF16toUTF8(gWifiTetheringParms->mIfname).get());
1

13132 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1185
void NetworkUtils::addDefaultRouteToNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
snprintf(command, MAX_COMMAND_SIZE - 1, "network route add %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
1

13133 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 602
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsCString ssid(GET_CHAR(mSsid));
nsCString key(GET_CHAR(mKey));
escapeQuote(ssid);
escapeQuote(key);
if (SDK_VERSION >= 19) {
snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s \"%s\" broadcast 6 %s \"%s\"",
GET_CHAR(mIfname),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
1

13134 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_wifi_WifiUtils.cpp Format_String_Attack 371
int32_t do_wifi_command(const char* iface, const char* cmd, char* buf, size_t* len) {
char command[COMMAND_SIZE];
if (!strcmp(iface, "p2p0")) {
snprintf(command, COMMAND_SIZE, "%s", cmd);
1

13135 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_wifi_WifiUtils.cpp Format_String_Attack 374
int32_t do_wifi_command(const char* iface, const char* cmd, char* buf, size_t* len) {
char command[COMMAND_SIZE];
if (strcmp(iface, "p2p0")) {
snprintf(command, COMMAND_SIZE, "IFNAME=%s %s", iface, cmd);
1

13148 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 729
void NetworkUtils::setInterfaceUp(CommandChain* aChain, CommandCallback aCallback, NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION >= 16) {
component_data = MAX_COMMAND_SIZE - 1;
PR_snprintf(command, component_data, "interface setcfg %s %s %s %s",
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mLink));
0

13149 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 926
void NetworkUtils::setDnsForwarders(CommandChain* aChain,CommandCallback aCallback, NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION >= 20) {
component_data = MAX_COMMAND_SIZE - 1;
PR_snprintf(command, component_data, "tether dns set %d %s %s",
GET_FIELD(mNetId), GET_CHAR(mDns1), GET_CHAR(mDns2));
0

13150 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1050
void NetworkUtils::setInterfaceDns(CommandChain* aChain, ommandCallback aCallback,NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
int written;
if (SDK_VERSION >= 20) {
written = PR_snprintf(command, sizeof command, "resolver setnetdns %d %s",
GET_FIELD(mNetId), GET_CHAR(mDomain));
nsTArray<nsString>& dnses = GET_FIELD(mDnses);
uint32_t length = dnses.Length();
for (uint32_t i = 0; i < length; i++) {
NS_ConvertUTF16toUTF8 autoDns(dnses[i]);
component_data = sizeof(command);
int ret = PR_snprintf(command + written, component_data - written, " %s", autoDns.get());
0

13151 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1185
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
return addDefaultRouteToNetwork(aChain, aOriginalCallback, aResult);
void NetworkUtils::addDefaultRouteToNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;  }
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
component_data = MAX_COMMAND_SIZE - 1;
PR_snprintf(command, component_data, "network route add %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
0

13152 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1006
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
return removeDefaultRoute(aChain, aOriginalCallback, aResult);
void NetworkUtils::removeDefaultRoute(CommandChain* aChain, CommandCallback aCallback,NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;}
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
component_data = MAX_COMMAND_SIZE - 1;
PR_snprintf(command, component_data, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
0

13153 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1239
void NetworkUtils::addRouteToSecondaryTable(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult) {
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION < 20) {
component_data = MAX_COMMAND_SIZE - 1;
PR_snprintf(command, component_data,
"interface route add %s secondary %s %s %s",
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mGateway));
0

13154 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 497
void NetworkUtils::doCommand(const char* aCommand, CommandChain* aChain, CommandCallback aCallback)
NU_DBG("Preparing to send \'%s\' command...", aCommand);
NetdCommand* netdCommand = new NetdCommand();
if (SDK_VERSION >= 16) {
NetdCommand* netdCommand = new NetdCommand();
component_data = MAX_COMMAND_SIZE - 1;
PR_snprintf((char*)netdCommand->mData, component_data, "0 %s", aCommand);
0

13155 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 879
void NetworkUtils::startTethering(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
if (!GET_FIELD(mUsbStartIp).IsEmpty() && !GET_FIELD(mUsbEndIp).IsEmpty()) {
component_data = MAX_COMMAND_SIZE - 1;
PR_snprintf(command, component_data, "tether start %s %s %s %s",
GET_CHAR(mWifiStartIp), GET_CHAR(mWifiEndIp),
GET_CHAR(mUsbStartIp),  GET_CHAR(mUsbEndIp));
0

13156 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1164
void NetworkUtils::modifyRouteOnInterface(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult,
bool aDoAdd)
char command[MAX_COMMAND_SIZE];
nsCString ipOrSubnetIp = NS_ConvertUTF16toUTF8(GET_FIELD(mIp));
nsCString gatewayOrEmpty;
const char* legacyOrEmpty = "legacy 0 ";
if (GET_FIELD(mGateway).IsEmpty()) {
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
nsCString NetworkUtils::getSubnetIp(const nsCString& aIp, int aPrefixLength)
return nsCString();
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
const char* action = aDoAdd ? "add" : "remove";
component_data = MAX_COMMAND_SIZE - 1;
PR_snprintf(command, component_data, "network route %s%s %d %s %s/%d%s",
legacyOrEmpty, action,
GET_FIELD(mNetId), GET_CHAR(mIfname), ipOrSubnetIp.get(),
GET_FIELD(mPrefixLength), gatewayOrEmpty.get());
0

13157 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1682
CommandResult NetworkUtils::setDNS(NetworkParams& aOptions)
uint32_t length = aOptions.mDnses.Length();
if (length > 0) {
for (uint32_t i = 0; i < length; i++) {
NS_ConvertUTF16toUTF8 autoDns(aOptions.mDnses[i]);
char dns_prop_key[PROPERTY_VALUE_MAX];
component_data = sizeof(dns_prop_key);
PR_snprintf(dns_prop_key, component_data, "net.dns%d", i+1);
0

13158 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 781
void NetworkUtils::addRouteToLocalNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
uint32_t prefix = atoi(GET_CHAR(mPrefix));
uint32_t ip = inet_addr(GET_CHAR(mIp));
char* networkAddr = getNetworkAddr(ip, prefix);
component_data = MAX_COMMAND_SIZE - 1;
PR_snprintf(command, component_data, "network route add local %s %s/%s",
GET_CHAR(mInternalIfname), networkAddr, GET_CHAR(mPrefix));
0

13159 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 602
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsCString ssid(GET_CHAR(mSsid));
nsCString key(GET_CHAR(mKey));
escapeQuote(ssid);
escapeQuote(key);
if (SDK_VERSION >= 19) {
component_data = MAX_COMMAND_SIZE - 1;
PR_snprintf(command, component_data, "softap set %s \"%s\" broadcast 6 %s \"%s\"",
GET_CHAR(mIfname),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
0

13160 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1264
void NetworkUtils::removeRouteFromSecondaryTable(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult) {
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION < 20) {
component_data = MAX_COMMAND_SIZE - 1;
PR_snprintf(command, component_data,
"interface route remove %s secondary %s %s %s",
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mGateway));
0

13161 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp String_Termination_Error 1607
void NetworkUtils::onNetdMessage(NetdCommand* aCommand)
char* reason = strtok(nullptr, "\0");
sendBroadcastMessage(code, reason);
if (code == NETD_COMMAND_INTERFACE_CHANGE) {
if (gWifiTetheringParms) {
char linkdownReason[MAX_COMMAND_SIZE];
component_data = MAX_COMMAND_SIZE - 1;
PR_snprintf(linkdownReason, component_data,
"Iface linkstate %s down",
NS_ConvertUTF16toUTF8(gWifiTetheringParms->mIfname).get());
if (!strcmp(reason, linkdownReason)) {
0

13162 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1040
void NetworkUtils::setInterfaceDns(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
int written;
if (SDK_VERSION <= 20) {
component_data = sizeof(command);
written = PR_snprintf(command, component_data, "resolver setifdns %s %s", GET_CHAR(mIfname), GET_CHAR(mDomain));
0

13163 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1257
void NetworkUtils::removeRouteFromSecondaryTable(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult) {
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION >= 20) {
component_data = MAX_COMMAND_SIZE - 1;
PR_snprintf(command, component_data,
"network route remove %d %s %s/%s %s",
GET_FIELD(mNetId),
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mGateway));
0

13164 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 723
void NetworkUtils::setInterfaceUp(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION >= 16) {
component_data = MAX_COMMAND_SIZE - 1;
PR_snprintf(command, component_data, "interface setcfg %s %s %s %s",
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mLink));
0

13165 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1005
void NetworkUtils::removeDefaultRoute(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
component_data = MAX_COMMAND_SIZE - 1;
PR_snprintf(command, component_data, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
0

13166 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 615
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsCString ssid(GET_CHAR(mSsid));
nsCString key(GET_CHAR(mKey));
if (SDK_VERSION < 16) {
component_data = MAX_COMMAND_SIZE - 1;
PR_snprintf(command, component_data, "softap set %s %s \"%s\" %s \"%s\" 6 0 8",
GET_CHAR(mIfname),
GET_CHAR(mWifictrlinterfacename),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
0

13167 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 608
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsCString ssid(GET_CHAR(mSsid));
nsCString key(GET_CHAR(mKey));
if (SDK_VERSION >= 16 && SDK_VERSION < 19) {
component_data = MAX_COMMAND_SIZE - 1;
PR_snprintf(command, component_data, "softap set %s \"%s\" %s \"%s\"",
GET_CHAR(mIfname),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
0

13168 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1232
void NetworkUtils::addRouteToSecondaryTable(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult) {
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION >= 20) {
component_data = MAX_COMMAND_SIZE - 1;
PR_snprintf(command, component_data,
"network route add %d %s %s/%s %s",
GET_FIELD(mNetId),
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mGateway));
0

13169 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1605
void NetworkUtils::onNetdMessage(NetdCommand* aCommand)
char* data = (char*)aCommand->mData;
char* result = strtok(data, NETD_MESSAGE_DELIMIT);
uint32_t code = atoi(result);
char* reason = strtok(nullptr, "\0");
if (isBroadcastMessage(code)) {
if (code == NETD_COMMAND_INTERFACE_CHANGE) {
if (gWifiTetheringParms) {
char linkdownReason[MAX_COMMAND_SIZE];
component_data = MAX_COMMAND_SIZE - 1;
PR_snprintf(linkdownReason, component_data,
"Iface linkstate %s down",
NS_ConvertUTF16toUTF8(gWifiTetheringParms->mIfname).get());
0

13170 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1185
void NetworkUtils::addDefaultRouteToNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
component_data = MAX_COMMAND_SIZE - 1;
PR_snprintf(command, component_data, "network route add %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
0

13171 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 602
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsCString ssid(GET_CHAR(mSsid));
nsCString key(GET_CHAR(mKey));
escapeQuote(ssid);
escapeQuote(key);
if (SDK_VERSION >= 19) {
component_data = MAX_COMMAND_SIZE - 1;
PR_snprintf(command, component_data, "softap set %s \"%s\" broadcast 6 %s \"%s\"",
GET_CHAR(mIfname),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
0

13172 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_wifi_WifiUtils.cpp Format_String_Attack 371
int32_t do_wifi_command(const char* iface, const char* cmd, char* buf, size_t* len) {
char command[COMMAND_SIZE];
if (!strcmp(iface, "p2p0")) {
component_data = COMMAND_SIZE;
PR_snprintf(command, component_data, "%s", cmd);
0

13173 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_wifi_WifiUtils.cpp Format_String_Attack 374
int32_t do_wifi_command(const char* iface, const char* cmd, char* buf, size_t* len) {
char command[COMMAND_SIZE];
if (!strcmp(iface, "p2p0")) {
component_data = COMMAND_SIZE;
PR_snprintf(command, component_data, "IFNAME=%s %s", iface, cmd);
0

13185 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 729
void NetworkUtils::setInterfaceUp(CommandChain* aChain, CommandCallback aCallback, NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION >= 16) {
component_data = MAX_COMMAND_SIZE - 1;
snprintf(command, component_data, "interface setcfg %s %s %s [%s]",
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mLink));
1

13186 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 926
void NetworkUtils::setDnsForwarders(CommandChain* aChain,CommandCallback aCallback, NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
component_data = MAX_COMMAND_SIZE - 1;
if (SDK_VERSION >= 20) {
snprintf(command, component_data, "tether dns set %d %s %s",
GET_FIELD(mNetId), GET_CHAR(mDns1), GET_CHAR(mDns2));
1

13187 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1050
void NetworkUtils::setInterfaceDns(CommandChain* aChain, ommandCallback aCallback,NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
int written;
if (SDK_VERSION >= 20) {
written = snprintf(command, sizeof command, "resolver setnetdns %d %s",
GET_FIELD(mNetId), GET_CHAR(mDomain));
nsTArray<nsString>& dnses = GET_FIELD(mDnses);
uint32_t length = dnses.Length();
for (uint32_t i = 0; i < length; i++) {
NS_ConvertUTF16toUTF8 autoDns(dnses[i]);
component_data = command + written;
int ret = snprintf(component_data, sizeof(command) - written, " %s", autoDns.get());
1

13188 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1185
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
return addDefaultRouteToNetwork(aChain, aOriginalCallback, aResult);
void NetworkUtils::addDefaultRouteToNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;  }
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
component_data = MAX_COMMAND_SIZE - 1;
snprintf(command, component_data, "network route add %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
1

13189 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1006
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
return removeDefaultRoute(aChain, aOriginalCallback, aResult);
void NetworkUtils::removeDefaultRoute(CommandChain* aChain, CommandCallback aCallback,NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;}
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
component_data = MAX_COMMAND_SIZE - 1;
snprintf(command, component_data, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
1

13190 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1239
void NetworkUtils::addRouteToSecondaryTable(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult) {
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION < 20) {
component_data = MAX_COMMAND_SIZE - 1;
snprintf(command, component_data,
"interface route add %s secondary %s %s %s",
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mGateway));
1

13191 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 497
void NetworkUtils::doCommand(const char* aCommand, CommandChain* aChain, CommandCallback aCallback)
NU_DBG("Preparing to send \'%s\' command...", aCommand);
NetdCommand* netdCommand = new NetdCommand();
if (SDK_VERSION >= 16) {
NetdCommand* netdCommand = new NetdCommand();
component_data = MAX_COMMAND_SIZE - 1;
snprintf((char*)netdCommand->mData, component_data, "0 %s", aCommand);
1

13192 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 879
void NetworkUtils::startTethering(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
if (!GET_FIELD(mUsbStartIp).IsEmpty() && !GET_FIELD(mUsbEndIp).IsEmpty()) {
component_data = MAX_COMMAND_SIZE - 1;
snprintf(command, component_data, "tether start %s %s %s %s",
GET_CHAR(mWifiStartIp), GET_CHAR(mWifiEndIp),
GET_CHAR(mUsbStartIp),  GET_CHAR(mUsbEndIp));
1

13193 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1164
void NetworkUtils::modifyRouteOnInterface(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult,
bool aDoAdd)
char command[MAX_COMMAND_SIZE];
nsCString ipOrSubnetIp = NS_ConvertUTF16toUTF8(GET_FIELD(mIp));
nsCString gatewayOrEmpty;
const char* legacyOrEmpty = "legacy 0 ";
if (GET_FIELD(mGateway).IsEmpty()) {
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
nsCString NetworkUtils::getSubnetIp(const nsCString& aIp, int aPrefixLength)
return nsCString();
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
const char* action = aDoAdd ? "add" : "remove";
component_data = MAX_COMMAND_SIZE - 1;
snprintf(command, component_data, "network route %s%s %d %s %s/%d%s",
legacyOrEmpty, action,
GET_FIELD(mNetId), GET_CHAR(mIfname), ipOrSubnetIp.get(),
GET_FIELD(mPrefixLength), gatewayOrEmpty.get());
1

13194 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1682
CommandResult NetworkUtils::setDNS(NetworkParams& aOptions)
uint32_t length = aOptions.mDnses.Length();
if (length > 0) {
for (uint32_t i = 0; i < length; i++) {
NS_ConvertUTF16toUTF8 autoDns(aOptions.mDnses[i]);
char dns_prop_key[PROPERTY_VALUE_MAX];
component_data = sizeof(dns_prop_key);
snprintf(dns_prop_key, component_data, "net.dns%d", i+1);
1

13195 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 781
void NetworkUtils::addRouteToLocalNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
uint32_t prefix = atoi(GET_CHAR(mPrefix));
uint32_t ip = inet_addr(GET_CHAR(mIp));
char* networkAddr = getNetworkAddr(ip, prefix);
component_data = MAX_COMMAND_SIZE - 1;
snprintf(command, component_data, "network route add local %s %s/%s",
GET_CHAR(mInternalIfname), networkAddr, GET_CHAR(mPrefix));
1

13196 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 602
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsCString ssid(GET_CHAR(mSsid));
nsCString key(GET_CHAR(mKey));
escapeQuote(ssid);
escapeQuote(key);
if (SDK_VERSION >= 19) {
component_data = MAX_COMMAND_SIZE - 1;
snprintf(command, component_data, "softap set %s \"%s\" broadcast 6 %s \"%s\"",
GET_CHAR(mIfname),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
1

13197 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1264
void NetworkUtils::removeRouteFromSecondaryTable(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult) {
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION < 20) {
component_data = MAX_COMMAND_SIZE - 1;
snprintf(command, component_data,
"interface route remove %s secondary %s %s %s",
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mGateway));
1

13198 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp String_Termination_Error 1607
void NetworkUtils::onNetdMessage(NetdCommand* aCommand)
char* reason = strtok(nullptr, "\0");
sendBroadcastMessage(code, reason);
if (code == NETD_COMMAND_INTERFACE_CHANGE) {
if (gWifiTetheringParms) {
char linkdownReason[MAX_COMMAND_SIZE];
component_data = MAX_COMMAND_SIZE - 1;
snprintf(linkdownReason, component_data,
"Iface linkstate %s down",
NS_ConvertUTF16toUTF8(gWifiTetheringParms->mIfname).get());
if (!strcmp(reason, linkdownReason)) {
1

13199 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1040
void NetworkUtils::setInterfaceDns(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
int written;
if (SDK_VERSION <= 20) {
component_data = sizeof(command);
written = snprintf(command, component_data, "resolver setifdns %s %s", GET_CHAR(mIfname), GET_CHAR(mDomain));
1

13200 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1257
void NetworkUtils::removeRouteFromSecondaryTable(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult) {
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION >= 20) {
component_data = MAX_COMMAND_SIZE - 1;
snprintf(command, component_data,
"network route remove %d %s %s/%s %s",
GET_FIELD(mNetId),
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mGateway));
1

13201 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 723
void NetworkUtils::setInterfaceUp(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION >= 16) {
component_data = MAX_COMMAND_SIZE - 1;
snprintf(command, component_data, "interface setcfg %s %s %s %s",
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mLink));
1

13202 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1005
void NetworkUtils::removeDefaultRoute(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
component_data = MAX_COMMAND_SIZE - 1;
snprintf(command, component_data, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
1

13203 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 615
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsCString ssid(GET_CHAR(mSsid));
nsCString key(GET_CHAR(mKey));
if (SDK_VERSION < 16) {
component_data = MAX_COMMAND_SIZE - 1;
snprintf(command, component_data, "softap set %s %s \"%s\" %s \"%s\" 6 0 8",
GET_CHAR(mIfname),
GET_CHAR(mWifictrlinterfacename),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
1

13204 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 608
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsCString ssid(GET_CHAR(mSsid));
nsCString key(GET_CHAR(mKey));
if (SDK_VERSION >= 16 && SDK_VERSION < 19) {
component_data = MAX_COMMAND_SIZE - 1;
snprintf(command, component_data, "softap set %s \"%s\" %s \"%s\"",
GET_CHAR(mIfname),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
1

13205 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1232
void NetworkUtils::addRouteToSecondaryTable(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult) {
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION >= 20) {
component_data = MAX_COMMAND_SIZE - 1;
snprintf(command, component_data,
"network route add %d %s %s/%s %s",
GET_FIELD(mNetId),
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mGateway));
1

13206 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1605
void NetworkUtils::onNetdMessage(NetdCommand* aCommand)
char* data = (char*)aCommand->mData;
char* result = strtok(data, NETD_MESSAGE_DELIMIT);
uint32_t code = atoi(result);
char* reason = strtok(nullptr, "\0");
if (isBroadcastMessage(code)) {
if (code == NETD_COMMAND_INTERFACE_CHANGE) {
if (gWifiTetheringParms) {
char linkdownReason[MAX_COMMAND_SIZE];
component_data = MAX_COMMAND_SIZE - 1;
snprintf(linkdownReason, component_data,
"Iface linkstate %s down",
NS_ConvertUTF16toUTF8(gWifiTetheringParms->mIfname).get());
1

13207 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1185
void NetworkUtils::addDefaultRouteToNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
component_data = MAX_COMMAND_SIZE - 1;
snprintf(command, component_data, "network route add %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
1

13208 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 602
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsCString ssid(GET_CHAR(mSsid));
nsCString key(GET_CHAR(mKey));
escapeQuote(ssid);
escapeQuote(key);
if (SDK_VERSION >= 19) {
component_data = MAX_COMMAND_SIZE - 1;
snprintf(command, component_data, "softap set %s \"%s\" broadcast 6 %s \"%s\"",
GET_CHAR(mIfname),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
1

13209 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_wifi_WifiUtils.cpp Format_String_Attack 371
int32_t do_wifi_command(const char* iface, const char* cmd, char* buf, size_t* len) {
char command[COMMAND_SIZE];
if (!strcmp(iface, "p2p0")) {
component_data = COMMAND_SIZE;
snprintf(command, component_data, "%s", cmd);
1

13210 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_wifi_WifiUtils.cpp Format_String_Attack 374
int32_t do_wifi_command(const char* iface, const char* cmd, char* buf, size_t* len) {
char command[COMMAND_SIZE];
if (strcmp(iface, "p2p0")) {
component_data = COMMAND_SIZE;
snprintf(command, component_data, "IFNAME=%s %s", iface, cmd);
1

13222 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1050
void NetworkUtils::setInterfaceDns(CommandChain* aChain, ommandCallback aCallback,NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
int written;
if (SDK_VERSION >= 20) {
written = snprintf(command, sizeof command, "resolver setnetdns %d %s",
GET_FIELD(mNetId), GET_CHAR(mDomain));
nsTArray<nsString>& dnses = GET_FIELD(mDnses);
uint32_t length = dnses.Length;
for (uint32_t i = 0; i < length; i++) {
NS_ConvertUTF16toUTF8 autoDns = func(&dnses, i);
nsTArray func(nsTArray<nsString> *&dnses, uint32_t i)
return (*dnses)[i];
NS_ConvertUTF16toUTF8 autoDns = func(&dnses, i);
int ret = snprintf(command + written, sizeof(command) - written, " %s", autoDns.get());
1

13223 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1006
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
return removeDefaultRoute(aChain, aOriginalCallback, aResult);
void NetworkUtils::removeDefaultRoute(CommandChain* aChain, CommandCallback aCallback,NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;}
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = func(&autoGateway);
int func(NS_ConvertUTF16toUTF8 *autoGateway)
return getIpType(autoGateway->get());
int type = func(&autoGateway);
snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
1

13224 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1164
void NetworkUtils::modifyRouteOnInterface(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult,
bool aDoAdd)
char command[MAX_COMMAND_SIZE];
nsCString ipOrSubnetIp = NS_ConvertUTF16toUTF8(GET_FIELD(mIp));
nsCString gatewayOrEmpty;
const char* legacyOrEmpty = "legacy 0 ";
if (GET_FIELD(mGateway).IsEmpty()) {
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
nsCString NetworkUtils::getSubnetIp(const nsCString& aIp, int aPrefixLength)
return nsCString();
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
const char* action = func(&aDoAdd);
const char* func(bool *aDoAdd)
return (*aDoAdd) ? "add" : "remove";
const char* action = func(&aDoAdd);
snprintf(command, MAX_COMMAND_SIZE - 1, "network route %s%s %d %s %s/%d%s",
legacyOrEmpty, action,
GET_FIELD(mNetId), GET_CHAR(mIfname), ipOrSubnetIp.get(),
GET_FIELD(mPrefixLength), gatewayOrEmpty.get());
1

13225 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1682
CommandResult NetworkUtils::setDNS(NetworkParams& aOptions)
uint32_t length = func(aOptions);
uint32_t func(NetworkParams &aOptions)
return aOptions.mDnses.Length();
uint32_t length = func(aOptions);
if (length > 0) {
for (uint32_t i = 0; i < length; i++) {
NS_ConvertUTF16toUTF8 autoDns(aOptions.mDnses[i]);
char dns_prop_key[PROPERTY_VALUE_MAX];
snprintf(dns_prop_key, sizeof dns_prop_key, "net.dns%d", i+1);
1

13226 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 781
void NetworkUtils::addRouteToLocalNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
uint32_t prefix = atoi(GET_CHAR(mPrefix));
uint32_t ip = inet_addr(GET_CHAR(mIp));
char* networkAddr = func(&ip, prefix);
char* func(uint32_t *ip, uint32_t prefix)
return getNetworkAddr(*ip, prefix);
char* networkAddr = func(&ip, prefix);
snprintf(command, MAX_COMMAND_SIZE - 1, "network route add local %s %s/%s",
GET_CHAR(mInternalIfname), networkAddr, GET_CHAR(mPrefix));
1

13227 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1005
void NetworkUtils::removeDefaultRoute(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = func(&autoGateway);
int func(NS_ConvertUTF16toUTF8 *autoGateway)
return getIpType(autoGateway->get());
int type = func(&autoGateway);
snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
1

13228 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1605
void NetworkUtils::onNetdMessage(NetdCommand* aCommand)
char* data = (char*)aCommand->mData;
char* result = strtok(data, NETD_MESSAGE_DELIMIT);
uint32_t code = func(&result);
uint32_t func(char**result)
return atoi(*result);
uint32_t code = func(&result);
char* reason = strtok(nullptr, "\0");
if (isBroadcastMessage(code)) {
if (code == NETD_COMMAND_INTERFACE_CHANGE) {
if (gWifiTetheringParms) {
char linkdownReason[MAX_COMMAND_SIZE];
snprintf(linkdownReason, MAX_COMMAND_SIZE - 1,
"Iface linkstate %s down",
NS_ConvertUTF16toUTF8(gWifiTetheringParms->mIfname).get());
1

13229 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1185
void NetworkUtils::addDefaultRouteToNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = func(&autoGateway);
int func(NS_ConvertUTF16toUTF8 *autoGateway)
return getIpType(autoGateway->get());
int type = func(&autoGateway);
snprintf(command, MAX_COMMAND_SIZE - 1, "network route add %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
1

13241 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1050
void NetworkUtils::setInterfaceDns(CommandChain* aChain, ommandCallback aCallback,NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
int written;
if (SDK_VERSION >= 20) {
written = PR_snprintf(command, sizeof command, "resolver setnetdns %d %s",
GET_FIELD(mNetId), GET_CHAR(mDomain));
nsTArray<nsString>& dnses = GET_FIELD(mDnses);
uint32_t length = dnses.Length();
for (uint32_t i = 0; i < length; i++) {
NS_ConvertUTF16toUTF8 autoDns = func(&dnses, i);
nsTArray func(nsTArray<nsString> *&dnses, uint32_t i)
return (*dnses)[i];
NS_ConvertUTF16toUTF8 autoDns = func(&dnses, i);
int ret = PR_snprintf(command + written, sizeof(command) - written, " %s", autoDns.get());
0

13242 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1006
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
return removeDefaultRoute(aChain, aOriginalCallback, aResult);
void NetworkUtils::removeDefaultRoute(CommandChain* aChain, CommandCallback aCallback,NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;}
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = func(&autoGateway);
int func(NS_ConvertUTF16toUTF8 *autoGateway)
return getIpType(autoGateway->get());
int type = func(*autoGateway);
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
0

13243 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1164
void NetworkUtils::modifyRouteOnInterface(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult,
bool aDoAdd)
char command[MAX_COMMAND_SIZE];
nsCString ipOrSubnetIp = NS_ConvertUTF16toUTF8(GET_FIELD(mIp));
nsCString gatewayOrEmpty;
const char* legacyOrEmpty = "legacy 0 ";
if (GET_FIELD(mGateway).IsEmpty()) {
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
nsCString NetworkUtils::getSubnetIp(const nsCString& aIp, int aPrefixLength)
return nsCString();
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
const char* action = func(&aDoAdd);
const char* func(bool *aDoAdd)
return (*aDoAdd) ? "add" : "remove";
const char* action = func(&aDoAdd);
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route %s%s %d %s %s/%d%s",
legacyOrEmpty, action,
GET_FIELD(mNetId), GET_CHAR(mIfname), ipOrSubnetIp.get(),
GET_FIELD(mPrefixLength), gatewayOrEmpty.get());
0

13244 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1682
CommandResult NetworkUtils::setDNS(NetworkParams& aOptions)
uint32_t length = func(aOptions);
uint32_t func(NetworkParams &aOptions)
return aOptions.mDnses.Length();
uint32_t length = func(aOptions);
if (length > 0) {
for (uint32_t i = 0; i < length; i++) {
NS_ConvertUTF16toUTF8 autoDns(aOptions.mDnses[i]);
char dns_prop_key[PROPERTY_VALUE_MAX];
PR_snprintf(dns_prop_key, sizeof dns_prop_key, "net.dns%d", i+1);
0

13245 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 781
void NetworkUtils::addRouteToLocalNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
uint32_t prefix = atoi(GET_CHAR(mPrefix));
uint32_t ip = inet_addr(GET_CHAR(mIp));
char* networkAddr = func(&ip, prefix);
char* func(uint32_t *ip, uint32_t prefix)
return getNetworkAddr(*ip, prefix);
char* networkAddr = func(&ip, prefix);
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route add local %s %s/%s",
GET_CHAR(mInternalIfname), networkAddr, GET_CHAR(mPrefix));
0

13246 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1005
void NetworkUtils::removeDefaultRoute(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = func(&autoGateway);
int func(NS_ConvertUTF16toUTF8 *autoGateway)
return getIpType(autoGateway->get());
int type = func(&autoGateway);
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
0

13247 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1605
void NetworkUtils::onNetdMessage(NetdCommand* aCommand)
char* data = (char*)aCommand->mData;
char* result = strtok(data, NETD_MESSAGE_DELIMIT);
uint32_t code = func(&result);
uint32_t func(char**result)
return atoi(*result);
uint32_t code = func(&result);
char* reason = strtok(nullptr, "\0");
if (isBroadcastMessage(code)) {
if (code == NETD_COMMAND_INTERFACE_CHANGE) {
if (gWifiTetheringParms) {
char linkdownReason[MAX_COMMAND_SIZE];
PR_snprintf(linkdownReason, MAX_COMMAND_SIZE - 1,
"Iface linkstate %s down",
NS_ConvertUTF16toUTF8(gWifiTetheringParms->mIfname).get());
0

13248 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1185
void NetworkUtils::addDefaultRouteToNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = func(&autoGateway);
int func(NS_ConvertUTF16toUTF8 *autoGateway)
return getIpType(autoGateway->get());
int type = func(&autoGateway);
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route add %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
0

13260 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1050
void NetworkUtils::setInterfaceDns(CommandChain* aChain, ommandCallback aCallback,NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
int written;
if (SDK_VERSION >= 20) {
written = PR_snprintf(command, sizeof command, "resolver setnetdns %d %s",
GET_FIELD(mNetId), GET_CHAR(mDomain));
nsTArray<nsString>& dnses = GET_FIELD(mDnses);
nsTArray<nsString> dataArray[5];
dataArray[2] = dnses;
uint32_t length = goodSource(dataArray);
uint32_t goodSource(nsTArray<nsString> dataArray[])
nsTArray<nsString>& dnses = dataArray[2];
return dnses.Length();
uint32_t length = goodSource(dataArray);
for (uint32_t i = 0; i < length; i++) {
NS_ConvertUTF16toUTF8 autoDns(dnses[i]);
int ret = PR_snprintf(command + written, sizeof(command) - written, " %s", autoDns.get());
0

13261 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1185
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
return addDefaultRouteToNetwork(aChain, aOriginalCallback, aResult);
void NetworkUtils::addDefaultRouteToNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;  }
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
NS_ConvertUTF16toUTF8 dataArray[5];
dataArray[2] = autoGateway;
int type = goodSource(dataArray);
int goodSource(NS_ConvertUTF16toUTF8 dataArray[])
NS_ConvertUTF16toUTF8 autoGateway = dataArray[2];
return getIpType(autoGateway.get());
int type = goodSource(dataArray);
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route add %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
0

13262 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1006
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
return removeDefaultRoute(aChain, aOriginalCallback, aResult);
void NetworkUtils::removeDefaultRoute(CommandChain* aChain, CommandCallback aCallback,NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;}
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
NS_ConvertUTF16toUTF8 dataArray[5];
dataArray[2] = autoGateway;
int type = goodSource(dataArray);
int goodSource(NS_ConvertUTF16toUTF8 dataArray[])
autoGateway = dataArray[2];
return getIpType(autoGateway.get());
int type = goodSource(dataArray);
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
0

13263 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1164
void NetworkUtils::modifyRouteOnInterface(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult,
bool aDoAdd)
char command[MAX_COMMAND_SIZE];
nsCString ipOrSubnetIp = NS_ConvertUTF16toUTF8(GET_FIELD(mIp));
nsCString gatewayOrEmpty;
const char* legacyOrEmpty = "legacy 0 ";
if (GET_FIELD(mGateway).IsEmpty()) {
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
nsCString NetworkUtils::getSubnetIp(const nsCString& aIp, int aPrefixLength)
return nsCString();
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
ool dataArray[5];
dataArray[2] = aDoAdd;
const char* action = goodSource(dataArray);
const char* goodSource(bool dataArray[])
bool aDoAdd = dataArray[2];
rturn aDoAdd ? "add" : "remove";
const char* action = goodSource(dataArray);
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route %s%s %d %s %s/%d%s",
legacyOrEmpty, action,
GET_FIELD(mNetId), GET_CHAR(mIfname), ipOrSubnetIp.get(),
GET_FIELD(mPrefixLength), gatewayOrEmpty.get());
0

13264 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1682
CommandResult NetworkUtils::setDNS(NetworkParams& aOptions)
uint32_t length = aOptions.mDnses.Length();
if (length > 0) {
for (uint32_t i = 0; i < length; i++) {
NetworkParams dataArray[5];
dataArray[2] = aOptions;
NS_ConvertUTF16toUTF8 autoDns = goodSource(dataArray)
NS_ConvertUTF16toUTF8 goodSource(NetworkParams dataArray[])
aOptions = dataArray[2];
return aOptions.mDnses[i];
NS_ConvertUTF16toUTF8 autoDns = goodSource(dataArray)
char dns_prop_key[PROPERTY_VALUE_MAX];
PR_snprintf(dns_prop_key, sizeof dns_prop_key, "net.dns%d", i+1);
0

13265 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 781
void NetworkUtils::addRouteToLocalNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
uint32_t prefix = atoi(GET_CHAR(mPrefix));
uint32_t ip = inet_addr(GET_CHAR(mIp));
uint32_t dataArray[5];
dataArray[0] = prefix;
dataArray[1] = ip;
char* networkAddr = goodSource(dataArray);
char* goodSource(uint32_t dataArray[])
uint32_t prefix = dataArray[0];
uint32_t ip = dataArray[1];
return getNetworkAddr(ip, prefix);
char* networkAddr = goodSource(dataArray);
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route add local %s %s/%s",
GET_CHAR(mInternalIfname), networkAddr, GET_CHAR(mPrefix));
0

13266 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1005
void NetworkUtils::removeDefaultRoute(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
NS_ConvertUTF16toUTF8 dataArray[5];
dataArray[2] = autoGateway;
int type = goodSource(dataArray);
int goodSource(NS_ConvertUTF16toUTF8 dataArray[])
NS_ConvertUTF16toUTF8 autoGateway = dataArray[2];
return getIpType(autoGateway.get());
int type = goodSource(dataArray);
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
0

13267 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1185
void NetworkUtils::addDefaultRouteToNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
NS_ConvertUTF16toUTF8 dataArray[5];
dataArray[2] = autoGateway;
int type = goodSource(dataArray);
int goodSource(NS_ConvertUTF16toUTF8 dataArray[])
NS_ConvertUTF16toUTF8 autoGateway = dataArray[2];
return getIpType(autoGateway.get());
int type = goodSource(dataArray);
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route add %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
0

13278 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1050
void NetworkUtils::setInterfaceDns(CommandChain* aChain, ommandCallback aCallback,NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
int written;
if (SDK_VERSION >= 20) {
written = snprintf(command, sizeof command, "resolver setnetdns %d %s", GET_FIELD(mNetId), GET_CHAR(mDomain));
nsTArray<nsString>& dnses = GET_FIELD(mDnses);
nsTArray<nsString> dataArray[5];
dataArray[2] = dnses;
uint32_t length = badSource(dataArray);
uint32_t badSource(nsTArray<nsString> dataArray[])
nsTArray<nsString>& dnses = dataArray[2];
return dnses.Length();
uint32_t length = badSource(dataArray);
for (uint32_t i = 0; i < length; i++) {
NS_ConvertUTF16toUTF8 autoDns(dnses[i]);
int ret = snprintf(command + written, sizeof(command) - written, " %s", autoDns.get());
1

13279 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1185
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
return addDefaultRouteToNetwork(aChain, aOriginalCallback, aResult);
void NetworkUtils::addDefaultRouteToNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;  }
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
NS_ConvertUTF16toUTF8 dataArray[5];
dataArray[2] = autoGateway;
int type = badSource(dataArray);
int badSource(NS_ConvertUTF16toUTF8 dataArray[])
NS_ConvertUTF16toUTF8 autoGateway = dataArray[2];
return getIpType(autoGateway.get());
int type = badSource(dataArray);
snprintf(command, MAX_COMMAND_SIZE - 1, "network route add %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
1

13280 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1006
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
return removeDefaultRoute(aChain, aOriginalCallback, aResult);
void NetworkUtils::removeDefaultRoute(CommandChain* aChain, CommandCallback aCallback,NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;}
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
NS_ConvertUTF16toUTF8 dataArray[5];
dataArray[2] = autoGateway;
int type = badSource(dataArray);
int badSource(NS_ConvertUTF16toUTF8 dataArray[])
autoGateway = dataArray[2];
return getIpType(autoGateway.get());
int type = badSource(dataArray);
snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
1

13281 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1164
void NetworkUtils::modifyRouteOnInterface(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult,
bool aDoAdd)
char command[MAX_COMMAND_SIZE];
nsCString ipOrSubnetIp = NS_ConvertUTF16toUTF8(GET_FIELD(mIp));
nsCString gatewayOrEmpty;
const char* legacyOrEmpty = "legacy 0 ";
if (GET_FIELD(mGateway).IsEmpty()) {
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
nsCString NetworkUtils::getSubnetIp(const nsCString& aIp, int aPrefixLength)
return nsCString();
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
bool dataArray[5];
dataArray[2] = aDoAdd;
const char* action = badSource(dataArray);
const char* badSource(bool dataArray[])
bool aDoAdd = dataArray[2];
rturn aDoAdd ? "add" : "remove";
const char* action = badSource(dataArray);
snprintf(command, MAX_COMMAND_SIZE - 1, "network route %s%s %d %s %s/%d%s",
legacyOrEmpty, action,
GET_FIELD(mNetId), GET_CHAR(mIfname), ipOrSubnetIp.get(),
GET_FIELD(mPrefixLength), gatewayOrEmpty.get());
1

13282 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1682
CommandResult NetworkUtils::setDNS(NetworkParams& aOptions)
uint32_t length = aOptions.mDnses.Length();
if (length > 0) {
for (uint32_t i = 0; i < length; i++) {
NetworkParams dataArray[5];
dataArray[2] = aOptions;
NS_ConvertUTF16toUTF8 autoDns = badSource(dataArray)
NS_ConvertUTF16toUTF8 badSource(NetworkParams dataArray[])
aOptions = dataArray[2];
return aOptions.mDnses[i];
NS_ConvertUTF16toUTF8 autoDns = badSource(dataArray)
char dns_prop_key[PROPERTY_VALUE_MAX];
snprintf(dns_prop_key, sizeof dns_prop_key, "net.dns%d", i+1);
1

13283 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 781
void NetworkUtils::addRouteToLocalNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
uint32_t prefix = atoi(GET_CHAR(mPrefix));
uint32_t ip = inet_addr(GET_CHAR(mIp));
uint32_t dataArray[5];
dataArray[0] = prefix;
dataArray[1] = ip;
char* networkAddr = badSource(dataArray);
char* badSource(uint32_t dataArray[])
uint32_t prefix = dataArray[0];
uint32_t ip = dataArray[1];
return getNetworkAddr(ip, prefix);
char* networkAddr = badSource(dataArray);
snprintf(command, MAX_COMMAND_SIZE - 1, "network route add local %s %s/%s",
GET_CHAR(mInternalIfname), networkAddr, GET_CHAR(mPrefix));
1

13284 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1005
void NetworkUtils::removeDefaultRoute(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
NS_ConvertUTF16toUTF8 dataArray[5];
dataArray[2] = autoGateway;
int type = badSource(dataArray);
int badSource(NS_ConvertUTF16toUTF8 dataArray[])
NS_ConvertUTF16toUTF8 autoGateway = dataArray[2];
return getIpType(autoGateway.get());
int type = badSource(dataArray);
snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
1

13285 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1185
void NetworkUtils::addDefaultRouteToNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
NS_ConvertUTF16toUTF8 dataArray[5];
dataArray[2] = autoGateway;
int type = badSource(dataArray);
int badSource(NS_ConvertUTF16toUTF8 dataArray[])
NS_ConvertUTF16toUTF8 autoGateway = dataArray[2];
return getIpType(autoGateway.get());
int type = badSource(dataArray);
snprintf(command, MAX_COMMAND_SIZE - 1, "network route add %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
1

13296 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1050
nsTArray (*funcPtr)(nsTArray<nsString> &, uint32_t) = goodSource;
void NetworkUtils::setInterfaceDns(CommandChain* aChain, ommandCallback aCallback,NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
int written;
if (SDK_VERSION >= 20) {
written = PR_snprintf(command, sizeof command, "resolver setnetdns %d %s",
GET_FIELD(mNetId), GET_CHAR(mDomain));
nsTArray<nsString>& dnses = GET_FIELD(mDnses);
uint32_t length = dnses.Length();
for (uint32_t i = 0; i < length; i++) {
NS_ConvertUTF16toUTF8 autoDns = funcPtr(dnses, i);
nsTArray goodSource(nsTArray<nsString> &dnses, uint32_t i)
return dnses[i];
NS_ConvertUTF16toUTF8 autoDns = funcPtr(dnses, i);
int ret = PR_snprintf(command + written, sizeof(command) - written, " %s", autoDns.get());
0

13297 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1185
nsTArray<nsString>& (*funcPtr)() = goodSource;
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
return addDefaultRouteToNetwork(aChain, aOriginalCallback, aResult);
void NetworkUtils::addDefaultRouteToNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;  }
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = funcPtr();
nsTArray<nsString>& goodSource()
return GET_FIELD(mGateways);
nsTArray<nsString>& gateways = funcPtr();
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route add %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
0

13298 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1006
int (*funcPtr)(NS_ConvertUTF16toUTF8 ) = goodSource;
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
return removeDefaultRoute(aChain, aOriginalCallback, aResult);
void NetworkUtils::removeDefaultRoute(CommandChain* aChain, CommandCallback aCallback,NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;}
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = funcPtr(autoGateway);
int goodSource(NS_ConvertUTF16toUTF8 autoGateway)
return getIpType(autoGateway.get());
int type = funcPtr(autoGateway);
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
0

13299 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 497
NetdCommand* (*funcPtr)() = goodSource;
void NetworkUtils::doCommand(const char* aCommand, CommandChain* aChain, CommandCallback aCallback)
NU_DBG("Preparing to send \'%s\' command...", aCommand);
NetdCommand* netdCommand = funcPtr();
NetdCommand* goodSource()
return NetdCommand();
NetdCommand* netdCommand = funcPtr();
if (SDK_VERSION >= 16) {
PR_snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "0 %s", aCommand);
0

13300 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1164
const char* (*funcPtr)(bool) = goodSource;
void NetworkUtils::modifyRouteOnInterface(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult,
bool aDoAdd)
char command[MAX_COMMAND_SIZE];
nsCString ipOrSubnetIp = NS_ConvertUTF16toUTF8(GET_FIELD(mIp));
nsCString gatewayOrEmpty;
const char* legacyOrEmpty = "legacy 0 ";
if (GET_FIELD(mGateway).IsEmpty()) {
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
nsCString NetworkUtils::getSubnetIp(const nsCString& aIp, int aPrefixLength)
return nsCString();
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
const char* action = funcPtr(aDoAdd);
const char* goodSource(bool aDoAdd)
return aDoAdd ? "add" : "remove";
const char* action = funcPtr(aDoAdd);
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route %s%s %d %s %s/%d%s",
legacyOrEmpty, action,
GET_FIELD(mNetId), GET_CHAR(mIfname), ipOrSubnetIp.get(),
GET_FIELD(mPrefixLength), gatewayOrEmpty.get());
0

13301 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1682
uint32_t (*funcPtr)(NetworkParams) = goodSource;
CommandResult NetworkUtils::setDNS(NetworkParams& aOptions)
uint32_t length = funcPtr(aOptions);
uint32_t goodSource(NetworkParams aOptions)
return aOptions.mDnses.Length();
uint32_t length = funcPtr(aOptions);
if (length > 0) {
for (uint32_t i = 0; i < length; i++) {
NS_ConvertUTF16toUTF8 autoDns(aOptions.mDnses[i]);
char dns_prop_key[PROPERTY_VALUE_MAX];
PR_snprintf(dns_prop_key, sizeof dns_prop_key, "net.dns%d", i+1);
0

13302 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 781
char* (*funcPtr)(uint32_t , uint32_t ) = goodSource;
void NetworkUtils::addRouteToLocalNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
uint32_t prefix = atoi(GET_CHAR(mPrefix));
uint32_t ip = inet_addr(GET_CHAR(mIp));
char* networkAddr = funcPtr(ip, prefix);
char* goodSource(uint32_t ip, uint32_t prefix)
return getNetworkAddr(ip, prefix);
char* networkAddr = funcPtr(ip, prefix);
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route add local %s %s/%s",
GET_CHAR(mInternalIfname), networkAddr, GET_CHAR(mPrefix));
0

13303 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 602
nsCString (*funcPtr)() = goodSource;
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsCString ssid = funcPtr();
nsCString goodSource()
return GET_CHAR(mSsid);
nsCString ssid = funcPtr();
nsCString key(GET_CHAR(mKey));
escapeQuote(ssid);
escapeQuote(key);
if (SDK_VERSION >= 19) {
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s \"%s\" broadcast 6 %s \"%s\"",
GET_CHAR(mIfname),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
0

13304 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp String_Termination_Error 1607
char* (*funcPtr)() = goodSource;
void NetworkUtils::onNetdMessage(NetdCommand* aCommand)
char* reason = funcPtr();
char* goodSource()
return strtok(nullptr, "\0");
char* reason = funcPtr();
sendBroadcastMessage(code, reason);
if (code == NETD_COMMAND_INTERFACE_CHANGE) {
if (gWifiTetheringParms) {
char linkdownReason[MAX_COMMAND_SIZE];
PR_snprintf(linkdownReason, MAX_COMMAND_SIZE - 1,
"Iface linkstate %s down",
NS_ConvertUTF16toUTF8(gWifiTetheringParms->mIfname).get());
if (!strcmp(reason, linkdownReason)) {
0

13305 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1005
int (*funcPtr)(NS_ConvertUTF16toUTF8 ) = goodSource;
void NetworkUtils::removeDefaultRoute(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = funcPtr(autoGateway);
int goodSource(NS_ConvertUTF16toUTF8 autoGateway)
return getIpType(autoGateway.get());
int type = funcPtr(autoGateway);
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
0

13306 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 615
nsCString (*funcPtr)() = goodSource;
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsCString ssid = funcPtr();
nsCString goodSource()
return GET_CHAR(mSsid));
nsCString ssid = funcPtr();
nsCString key(GET_CHAR(mKey));
if (SDK_VERSION < 16) {
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s %s \"%s\" %s \"%s\" 6 0 8",
GET_CHAR(mIfname),
GET_CHAR(mWifictrlinterfacename),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
0

13307 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 608
nsCString (*funcPtr)() = goodSource;
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsCString ssid = funcPtr();
nsCString goodSource()
return GET_CHAR(mSsid);
nsCString ssid = funcPtr();
nsCString key(GET_CHAR(mKey));
if (SDK_VERSION >= 16 && SDK_VERSION < 19) {
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s \"%s\" %s \"%s\"",
GET_CHAR(mIfname),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
0

13308 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1605
uint32_t (*funcPtr)(char*) = goodSource;
void NetworkUtils::onNetdMessage(NetdCommand* aCommand)
char* data = (char*)aCommand->mData;
char* result = strtok(data, NETD_MESSAGE_DELIMIT);
uint32_t code = funcPtr(result);
uint32_t goodSource(char*result)
return atoi(result);
uint32_t code = funcPtr(result);
char* reason = strtok(nullptr, "\0");
if (isBroadcastMessage(code)) {
if (code == NETD_COMMAND_INTERFACE_CHANGE) {
if (gWifiTetheringParms) {
char linkdownReason[MAX_COMMAND_SIZE];
PR_snprintf(linkdownReason, MAX_COMMAND_SIZE - 1,
"Iface linkstate %s down",
NS_ConvertUTF16toUTF8(gWifiTetheringParms->mIfname).get());
0

13309 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1185
int (*funcPtr)(NS_ConvertUTF16toUTF8 ) = goodSource;
void NetworkUtils::addDefaultRouteToNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = funcPtr(autoGateway);
int goodSource(NS_ConvertUTF16toUTF8 autoGateway)
return getIpType(autoGateway.get());
int type = funcPtr(autoGateway);
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route add %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
0

13310 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 602
nsCString (*funcPtr)() = goodSource;
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsCString ssid = funcPtr();
nsCString goodSource()
return  GET_CHAR(mSsid);
nsCString ssid = funcPtr();
nsCString key(GET_CHAR(mKey));
escapeQuote(ssid);
escapeQuote(key);
if (SDK_VERSION >= 19) {
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s \"%s\" broadcast 6 %s \"%s\"",
GET_CHAR(mIfname),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
0

13322 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1050
nsTArray (*funcPtr)(nsTArray<nsString> &, uint32_t) = badSource;
void NetworkUtils::setInterfaceDns(CommandChain* aChain, ommandCallback aCallback,NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
int written;
if (SDK_VERSION >= 20) {
written = snprintf(command, sizeof command, "resolver setnetdns %d %s",
GET_FIELD(mNetId), GET_CHAR(mDomain));
nsTArray<nsString>& dnses = GET_FIELD(mDnses);
for (uint32_t i = 0; i < length; i++) {
NS_ConvertUTF16toUTF8 autoDns = funcPtr(dnses, i);
nsTArray badSource(nsTArray<nsString> &dnses, uint32_t i)
return dnses[i];
NS_ConvertUTF16toUTF8 autoDns = funcPtr(dnses, i);
int ret = snprintf(command + written, sizeof(command) - written, " %s", autoDns.get());
1

13323 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1185
nsTArray<nsString>& (*funcPtr)() = badSource;
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
return addDefaultRouteToNetwork(aChain, aOriginalCallback, aResult);
void NetworkUtils::addDefaultRouteToNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;  }
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = funcPtr();
nsTArray<nsString>& badSource()
return GET_FIELD(mGateways);
nsTArray<nsString>& gateways = funcPtr();
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
snprintf(command, MAX_COMMAND_SIZE - 1, "network route add %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
1

13324 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1006
int (*funcPtr)(NS_ConvertUTF16toUTF8 ) = badSource;
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
return removeDefaultRoute(aChain, aOriginalCallback, aResult);
void NetworkUtils::removeDefaultRoute(CommandChain* aChain, CommandCallback aCallback,NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;}
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = funcPtr(autoGateway);
int badSource(NS_ConvertUTF16toUTF8 autoGateway)
return getIpType(autoGateway.get());
int type = funcPtr(autoGateway);
snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
1

13325 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 497
NetdCommand* (*funcPtr)() = badSource;
void NetworkUtils::doCommand(const char* aCommand, CommandChain* aChain, CommandCallback aCallback)
NU_DBG("Preparing to send \'%s\' command...", aCommand);
NetdCommand* netdCommand = funcPtr();
NetdCommand* badSource()
return NetdCommand();
NetdCommand* netdCommand = funcPtr();
if (SDK_VERSION >= 16) {
snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "0 %s", aCommand);
1

13326 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1164
const char* (*funcPtr)(bool) = badSource;
void NetworkUtils::modifyRouteOnInterface(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult,
bool aDoAdd)
char command[MAX_COMMAND_SIZE];
nsCString ipOrSubnetIp = NS_ConvertUTF16toUTF8(GET_FIELD(mIp));
nsCString gatewayOrEmpty;
const char* legacyOrEmpty = "legacy 0 ";
if (GET_FIELD(mGateway).IsEmpty()) {
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
nsCString NetworkUtils::getSubnetIp(const nsCString& aIp, int aPrefixLength)
return nsCString();
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
const char* action = funcPtr(aDoAdd);
const char* badSource(bool aDoAdd)
return aDoAdd ? "add" : "remove";
const char* action = funcPtr(aDoAdd);
snprintf(command, MAX_COMMAND_SIZE - 1, "network route %s%s %d %s %s/%d%s",
legacyOrEmpty, action,
GET_FIELD(mNetId), GET_CHAR(mIfname), ipOrSubnetIp.get(),
GET_FIELD(mPrefixLength), gatewayOrEmpty.get());
1

13327 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1682
uint32_t (*funcPtr)(NetworkParams) = badSource;
CommandResult NetworkUtils::setDNS(NetworkParams& aOptions)
uint32_t length = funcPtr(aOptions);
uint32_t badSource(NetworkParams aOptions)
return aOptions.mDnses.Length();
uint32_t length = funcPtr(aOptions);
if (length > 0) {
for (uint32_t i = 0; i < length; i++) {
NS_ConvertUTF16toUTF8 autoDns(aOptions.mDnses[i]);
char dns_prop_key[PROPERTY_VALUE_MAX];
snprintf(dns_prop_key, sizeof dns_prop_key, "net.dns%d", i+1);
1

13328 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 781
char* (*funcPtr)(uint32_t , uint32_t ) = badSource;
void NetworkUtils::addRouteToLocalNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
uint32_t prefix = atoi(GET_CHAR(mPrefix));
uint32_t ip = inet_addr(GET_CHAR(mIp));
char* networkAddr = funcPtr(ip, prefix);
char* badSource(uint32_t ip, uint32_t prefix)
return getNetworkAddr(ip, prefix);
char* networkAddr = funcPtr(ip, prefix);
snprintf(command, MAX_COMMAND_SIZE - 1, "network route add local %s %s/%s",
GET_CHAR(mInternalIfname), networkAddr, GET_CHAR(mPrefix));
1

13329 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 602
nsCString (*funcPtr)() = badSource;
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsCString ssid = funcPtr();
nsCString badSource()
return GET_CHAR(mSsid);
nsCString ssid = funcPtr();
nsCString key(GET_CHAR(mKey));
escapeQuote(ssid);
escapeQuote(key);
if (SDK_VERSION >= 19) {
snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s \"%s\" broadcast 6 %s \"%s\"",
GET_CHAR(mIfname),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
1

13330 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp String_Termination_Error 1607
char* (*funcPtr)() = badSource;
void NetworkUtils::onNetdMessage(NetdCommand* aCommand)
char* reason = funcPtr();
char* badSource()
return strtok(nullptr, "\0");
char* reason = funcPtr();
sendBroadcastMessage(code, reason);
if (code == NETD_COMMAND_INTERFACE_CHANGE) {
if (gWifiTetheringParms) {
char linkdownReason[MAX_COMMAND_SIZE];
snprintf(linkdownReason, MAX_COMMAND_SIZE - 1,
"Iface linkstate %s down",
NS_ConvertUTF16toUTF8(gWifiTetheringParms->mIfname).get());
if (!strcmp(reason, linkdownReason)) {
1

13331 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1005
int (*funcPtr)(NS_ConvertUTF16toUTF8 ) = badSource;
void NetworkUtils::removeDefaultRoute(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = funcPtr(autoGateway);
int badSource(NS_ConvertUTF16toUTF8 autoGateway)
return getIpType(autoGateway.get());
int type = funcPtr(autoGateway);
snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
1

13332 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 615
nsCString (*funcPtr)() = badSource;
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsCString ssid = funcPtr();
nsCString badSource()
return GET_CHAR(mSsid));
nsCString ssid = funcPtr();
nsCString key(GET_CHAR(mKey));
if (SDK_VERSION < 16) {
snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s %s \"%s\" %s \"%s\" 6 0 8",
GET_CHAR(mIfname),
GET_CHAR(mWifictrlinterfacename),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
1

13333 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 608
nsCString (*funcPtr)() = badSource;
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsCString ssid = funcPtr();
nsCString badSource()
return GET_CHAR(mSsid);
nsCString ssid = funcPtr();
nsCString key(GET_CHAR(mKey));
if (SDK_VERSION >= 16 && SDK_VERSION < 19) {
snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s \"%s\" %s \"%s\"",
GET_CHAR(mIfname),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
1

13334 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1605
uint32_t (*funcPtr)(char*) = badSource;
void NetworkUtils::onNetdMessage(NetdCommand* aCommand)
char* data = (char*)aCommand->mData;
char* result = strtok(data, NETD_MESSAGE_DELIMIT);
uint32_t code = funcPtr(result);
uint32_t badSource(char*result)
return atoi(result);
uint32_t code = funcPtr(result);
char* reason = strtok(nullptr, "\0");
if (isBroadcastMessage(code)) {
if (code == NETD_COMMAND_INTERFACE_CHANGE) {
if (gWifiTetheringParms) {
char linkdownReason[MAX_COMMAND_SIZE];
snprintf(linkdownReason, MAX_COMMAND_SIZE - 1,
"Iface linkstate %s down",
NS_ConvertUTF16toUTF8(gWifiTetheringParms->mIfname).get());
1

13335 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1185
int (*funcPtr)(NS_ConvertUTF16toUTF8 ) = badSource;
void NetworkUtils::addDefaultRouteToNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = funcPtr(autoGateway);
int badSource(NS_ConvertUTF16toUTF8 autoGateway)
return getIpType(autoGateway.get());
int type = funcPtr(autoGateway);
snprintf(command, MAX_COMMAND_SIZE - 1, "network route add %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
1

13336 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 602
nsCString (*funcPtr)() = badSource;
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsCString ssid = funcPtr();
nsCString badSource()
return  GET_CHAR(mSsid);
nsCString ssid = funcPtr();
nsCString key(GET_CHAR(mKey));
escapeQuote(ssid);
escapeQuote(key);
if (SDK_VERSION >= 19) {
snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s \"%s\" broadcast 6 %s \"%s\"",
GET_CHAR(mIfname),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
1

13348 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1050
void NetworkUtils::setInterfaceDns(CommandChain* aChain, ommandCallback aCallback,NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
int written;
if (SDK_VERSION >= 20) {
written = PR_snprintf(command, sizeof command, "resolver setnetdns %d %s",
GET_FIELD(mNetId), GET_CHAR(mDomain));
nsTArray<nsString>& dnses = GET_FIELD(mDnses);
uint32_t length = dnses.Length();
for (uint32_t i = 0; i < length; i++) {
NS_ConvertUTF16toUTF8 autoDns = func(dnses, i);
nsTArray func(nsTArray<nsString> &dnses, uint32_t i)
return dnses[i];
NS_ConvertUTF16toUTF8 autoDns = func(dnses, i);
int ret = PR_snprintf(command + written, sizeof(command) - written, " %s", autoDns.get());
0

13349 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1185
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
return addDefaultRouteToNetwork(aChain, aOriginalCallback, aResult);
void NetworkUtils::addDefaultRouteToNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;  }
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = func();
nsTArray<nsString>& func()
return GET_FIELD(mGateways);
nsTArray<nsString>& gateways = func();
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route add %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
0

13350 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1006
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
return removeDefaultRoute(aChain, aOriginalCallback, aResult);
void NetworkUtils::removeDefaultRoute(CommandChain* aChain, CommandCallback aCallback,NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;}
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = func(autoGateway);
int func(NS_ConvertUTF16toUTF8 autoGateway)
return getIpType(autoGateway.get());
int type = func(autoGateway);
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
0

13351 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 497
void NetworkUtils::doCommand(const char* aCommand, CommandChain* aChain, CommandCallback aCallback)
NU_DBG("Preparing to send \'%s\' command...", aCommand);
NetdCommand* netdCommand = new NetdCommand();
if (SDK_VERSION >= 16) {
NetdCommand* netdCommand = func();
NetdCommand* func()
return NetdCommand();
NetdCommand* netdCommand = func();
PR_snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "0 %s", aCommand);
0

13352 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1164
void NetworkUtils::modifyRouteOnInterface(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult,
bool aDoAdd)
char command[MAX_COMMAND_SIZE];
nsCString ipOrSubnetIp = NS_ConvertUTF16toUTF8(GET_FIELD(mIp));
nsCString gatewayOrEmpty;
const char* legacyOrEmpty = "legacy 0 ";
if (GET_FIELD(mGateway).IsEmpty()) {
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
nsCString NetworkUtils::getSubnetIp(const nsCString& aIp, int aPrefixLength)
return nsCString();
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
const char* action = func(aDoAdd);
bool func(bool aDoAdd)
const char* aDoAdd ? "add" : "remove";
const char* action = func(aDoAdd);
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route %s%s %d %s %s/%d%s",
legacyOrEmpty, action,
GET_FIELD(mNetId), GET_CHAR(mIfname), ipOrSubnetIp.get(),
GET_FIELD(mPrefixLength), gatewayOrEmpty.get());
0

13353 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1682
CommandResult NetworkUtils::setDNS(NetworkParams& aOptions)
uint32_t length = func(aOptions);
uint32_t func(NetworkParams aOptions)
return aOptions.mDnses.Length();
uint32_t length = func(aOptions);
if (length > 0) {
for (uint32_t i = 0; i < length; i++) {
NS_ConvertUTF16toUTF8 autoDns(aOptions.mDnses[i]);
char dns_prop_key[PROPERTY_VALUE_MAX];
PR_snprintf(dns_prop_key, sizeof dns_prop_key, "net.dns%d", i+1);
0

13354 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 781
void NetworkUtils::addRouteToLocalNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
uint32_t prefix = atoi(GET_CHAR(mPrefix));
uint32_t ip = inet_addr(GET_CHAR(mIp));
char* networkAddr = func(ip, prefix);
char* func(uint32_t ip, uint32_t prefix)
return getNetworkAddr(ip, prefix);
char* networkAddr = func(ip, prefix);
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route add local %s %s/%s",
GET_CHAR(mInternalIfname), networkAddr, GET_CHAR(mPrefix));
0

13355 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 602
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsCString ssid = func();
nsCString func()
return GET_CHAR(mSsid);
nsCString ssid = func();
nsCString key(GET_CHAR(mKey));
escapeQuote(ssid);
escapeQuote(key);
if (SDK_VERSION >= 19) {
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s \"%s\" broadcast 6 %s \"%s\"",
GET_CHAR(mIfname),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
0

13356 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp String_Termination_Error 1607
void NetworkUtils::onNetdMessage(NetdCommand* aCommand)
char* reason = func();
char* func()
return strtok(nullptr, "\0");
char* reason = func();
sendBroadcastMessage(code, reason);
if (code == NETD_COMMAND_INTERFACE_CHANGE) {
if (gWifiTetheringParms) {
char linkdownReason[MAX_COMMAND_SIZE];
PR_snprintf(linkdownReason, MAX_COMMAND_SIZE - 1,
"Iface linkstate %s down",
NS_ConvertUTF16toUTF8(gWifiTetheringParms->mIfname).get());
if (!strcmp(reason, linkdownReason)) {
0

13357 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1005
void NetworkUtils::removeDefaultRoute(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = func(autoGateway);
int func(NS_ConvertUTF16toUTF8 autoGateway)
return getIpType(autoGateway.get());
int type = func(autoGateway);
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
0

13358 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 615
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsCString ssid = func();
nsCString func()
return GET_CHAR(mSsid));
nsCString ssid = func();
nsCString key(GET_CHAR(mKey));
if (SDK_VERSION < 16) {
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s %s \"%s\" %s \"%s\" 6 0 8",
GET_CHAR(mIfname),
GET_CHAR(mWifictrlinterfacename),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
0

13359 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 608
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsCString ssid = func();
nsCString func()
return GET_CHAR(mSsid);
nsCString ssid = func();
nsCString key(GET_CHAR(mKey));
if (SDK_VERSION >= 16 && SDK_VERSION < 19) {
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s \"%s\" %s \"%s\"",
GET_CHAR(mIfname),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
0

13360 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1605
void NetworkUtils::onNetdMessage(NetdCommand* aCommand)
char* data = (char*)aCommand->mData;
char* result = strtok(data, NETD_MESSAGE_DELIMIT);
uint32_t code = func(result);
uint32_t func(char*result)
return atoi(result);
uint32_t code = func(result);
char* reason = strtok(nullptr, "\0");
if (isBroadcastMessage(code)) {
if (code == NETD_COMMAND_INTERFACE_CHANGE) {
if (gWifiTetheringParms) {
char linkdownReason[MAX_COMMAND_SIZE];
PR_snprintf(linkdownReason, MAX_COMMAND_SIZE - 1,
"Iface linkstate %s down",
NS_ConvertUTF16toUTF8(gWifiTetheringParms->mIfname).get());
0

13361 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1185
void NetworkUtils::addDefaultRouteToNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = func(autoGateway);
int func(NS_ConvertUTF16toUTF8 autoGateway)
return getIpType(autoGateway.get());
int type = func(autoGateway);
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route add %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
0

13362 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 602
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsCString ssid = func();
nsCString func()
return  GET_CHAR(mSsid);
nsCString ssid = func();
nsCString key(GET_CHAR(mKey));
escapeQuote(ssid);
escapeQuote(key);
if (SDK_VERSION >= 19) {
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s \"%s\" broadcast 6 %s \"%s\"",
GET_CHAR(mIfname),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
0

13374 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1050
void NetworkUtils::setInterfaceDns(CommandChain* aChain, ommandCallback aCallback,NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
int written;
if (SDK_VERSION >= 20) {
written = snprintf(command, sizeof command, "resolver setnetdns %d %s",
GET_FIELD(mNetId), GET_CHAR(mDomain));
nsTArray<nsString>& dnses = GET_FIELD(mDnses);
uint32_t length = dnses.Length;
for (uint32_t i = 0; i < length; i++) {
NS_ConvertUTF16toUTF8 autoDns = func(dnses, i);
nsTArray func(nsTArray<nsString> &dnses, uint32_t i)
return dnses[i];
NS_ConvertUTF16toUTF8 autoDns = func(dnses, i);
int ret = snprintf(command + written, sizeof(command) - written, " %s", autoDns.get());
1

13375 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1185
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
return addDefaultRouteToNetwork(aChain, aOriginalCallback, aResult);
void NetworkUtils::addDefaultRouteToNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;  }
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = func();
nsTArray<nsString>& func()
return GET_FIELD(mGateways);
nsTArray<nsString>& gateways = func();
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
snprintf(command, MAX_COMMAND_SIZE - 1, "network route add %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
1

13376 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1006
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
return removeDefaultRoute(aChain, aOriginalCallback, aResult);
void NetworkUtils::removeDefaultRoute(CommandChain* aChain, CommandCallback aCallback,NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;}
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = func(autoGateway);
int func(NS_ConvertUTF16toUTF8 autoGateway)
return getIpType(autoGateway.get());
int type = func(autoGateway);
snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
1

13377 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 497
void NetworkUtils::doCommand(const char* aCommand, CommandChain* aChain, CommandCallback aCallback)
NU_DBG("Preparing to send \'%s\' command...", aCommand);
NetdCommand* netdCommand = func();
NetdCommand* func()
return NetdCommand();
NetdCommand* netdCommand = func();
if (SDK_VERSION >= 16) {
snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "0 %s", aCommand);
1

13378 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1164
void NetworkUtils::modifyRouteOnInterface(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult,
bool aDoAdd)
char command[MAX_COMMAND_SIZE];
nsCString ipOrSubnetIp = NS_ConvertUTF16toUTF8(GET_FIELD(mIp));
nsCString gatewayOrEmpty;
const char* legacyOrEmpty = "legacy 0 ";
if (GET_FIELD(mGateway).IsEmpty()) {
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
nsCString NetworkUtils::getSubnetIp(const nsCString& aIp, int aPrefixLength)
return nsCString();
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
const char* action = func(bool aDoAdd);
const char* func(bool aDoAdd)
return aDoAdd ? "add" : "remove";
const char* action = func(bool aDoAdd);
snprintf(command, MAX_COMMAND_SIZE - 1, "network route %s%s %d %s %s/%d%s",
legacyOrEmpty, action,
GET_FIELD(mNetId), GET_CHAR(mIfname), ipOrSubnetIp.get(),
GET_FIELD(mPrefixLength), gatewayOrEmpty.get());
1

13379 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1682
CommandResult NetworkUtils::setDNS(NetworkParams& aOptions)
uint32_t length = func(aOptions);
uint32_t func(NetworkParams aOptions)
return aOptions.mDnses.Length();
uint32_t length = func(aOptions);
if (length > 0) {
for (uint32_t i = 0; i < length; i++) {
NS_ConvertUTF16toUTF8 autoDns(aOptions.mDnses[i]);
char dns_prop_key[PROPERTY_VALUE_MAX];
snprintf(dns_prop_key, sizeof dns_prop_key, "net.dns%d", i+1);
1

13380 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 781
void NetworkUtils::addRouteToLocalNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
uint32_t prefix = atoi(GET_CHAR(mPrefix));
uint32_t ip = inet_addr(GET_CHAR(mIp));
char* networkAddr = func(ip, prefix);
char* func(uint32_t ip, uint32_t prefix)
return getNetworkAddr(ip, prefix);
char* networkAddr = func(ip, prefix);
snprintf(command, MAX_COMMAND_SIZE - 1, "network route add local %s %s/%s",
GET_CHAR(mInternalIfname), networkAddr, GET_CHAR(mPrefix));
1

13381 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 602
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsCString ssid = func();
nsCString func()
return GET_CHAR(mSsid);
nsCString ssid = func();
nsCString key(GET_CHAR(mKey));
escapeQuote(ssid);
escapeQuote(key);
if (SDK_VERSION >= 19) {
snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s \"%s\" broadcast 6 %s \"%s\"",
GET_CHAR(mIfname),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
1

13382 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp String_Termination_Error 1607
void NetworkUtils::onNetdMessage(NetdCommand* aCommand)
char* reason = func();
char* func()
return strtok(nullptr, "\0");
char* reason = func();
sendBroadcastMessage(code, reason);
if (code == NETD_COMMAND_INTERFACE_CHANGE) {
if (gWifiTetheringParms) {
char linkdownReason[MAX_COMMAND_SIZE];
snprintf(linkdownReason, MAX_COMMAND_SIZE - 1,
"Iface linkstate %s down",
NS_ConvertUTF16toUTF8(gWifiTetheringParms->mIfname).get());
if (!strcmp(reason, linkdownReason)) {
1

13383 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1005
void NetworkUtils::removeDefaultRoute(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = func(autoGateway);
int func(NS_ConvertUTF16toUTF8 autoGateway)
return getIpType(autoGateway.get());
int type = func(autoGateway);
snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
1

13384 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 615
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsCString ssid = func();
nsCString func()
return GET_CHAR(mSsid));
nsCString ssid = func();
nsCString key(GET_CHAR(mKey));
if (SDK_VERSION < 16) {
snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s %s \"%s\" %s \"%s\" 6 0 8",
GET_CHAR(mIfname),
GET_CHAR(mWifictrlinterfacename),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
1

13385 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 608
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsCString ssid = func();
nsCString func()
return GET_CHAR(mSsid);
nsCString ssid = func();
nsCString key(GET_CHAR(mKey));
if (SDK_VERSION >= 16 && SDK_VERSION < 19) {
snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s \"%s\" %s \"%s\"",
GET_CHAR(mIfname),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
1

13386 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1605
void NetworkUtils::onNetdMessage(NetdCommand* aCommand)
char* data = (char*)aCommand->mData;
char* result = strtok(data, NETD_MESSAGE_DELIMIT);
uint32_t code = func(result);
uint32_t func(char*result)
return atoi(result);
uint32_t code = func(result);
char* reason = strtok(nullptr, "\0");
if (isBroadcastMessage(code)) {
if (code == NETD_COMMAND_INTERFACE_CHANGE) {
if (gWifiTetheringParms) {
char linkdownReason[MAX_COMMAND_SIZE];
snprintf(linkdownReason, MAX_COMMAND_SIZE - 1,
"Iface linkstate %s down",
NS_ConvertUTF16toUTF8(gWifiTetheringParms->mIfname).get());
1

13387 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1185
void NetworkUtils::addDefaultRouteToNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = func(autoGateway);
int func(NS_ConvertUTF16toUTF8 autoGateway)
return getIpType(autoGateway.get());
int type = func(autoGateway);
snprintf(command, MAX_COMMAND_SIZE - 1, "network route add %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
1

13388 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 602
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsCString ssid = func();
nsCString func()
return  GET_CHAR(mSsid);
nsCString ssid = func();
nsCString key(GET_CHAR(mKey));
escapeQuote(ssid);
escapeQuote(key);
if (SDK_VERSION >= 19) {
snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s \"%s\" broadcast 6 %s \"%s\"",
GET_CHAR(mIfname),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
1

13400 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 729
void NetworkUtils::setInterfaceUp(CommandChain* aChain, CommandCallback aCallback, NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
char *dataType = command;
if (SDK_VERSION >= 16) {
char* command = dataType;
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "interface setcfg %s %s %s %s",
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mLink));
0

13401 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 926
void NetworkUtils::setDnsForwarders(CommandChain* aChain,CommandCallback aCallback, NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
char *dataType = command;
if (SDK_VERSION >= 20) {
char *command = dataType;
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "tether dns set %d %s %s",
GET_FIELD(mNetId), GET_CHAR(mDns1), GET_CHAR(mDns2));
0

13402 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1050
void NetworkUtils::setInterfaceDns(CommandChain* aChain, ommandCallback aCallback,NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
char *dataType = command;
int written;
if (SDK_VERSION >= 20) {
written = PR_snprintf(command, sizeof command, "resolver setnetdns %d %s",
GET_FIELD(mNetId), GET_CHAR(mDomain));
nsTArray<nsString>& dnses = GET_FIELD(mDnses);
uint32_t length = dnses.Length();
for (uint32_t i = 0; i < length; i++) {
NS_ConvertUTF16toUTF8 autoDns(dnses[i]);
char* command = dataType;
int ret = PR_snprintf(command + written, sizeof(command) - written, " %s", autoDns.get());
0

13403 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1185
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
return addDefaultRouteToNetwork(aChain, aOriginalCallback, aResult);
void NetworkUtils::addDefaultRouteToNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;  }
char command[MAX_COMMAND_SIZE];
char* dataType = command;
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
command = dataType;
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route add %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
0

13404 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1006
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
return removeDefaultRoute(aChain, aOriginalCallback, aResult);
void NetworkUtils::removeDefaultRoute(CommandChain* aChain, CommandCallback aCallback,NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;}
char command[MAX_COMMAND_SIZE];
char* dataType = command;
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
command = dataType;
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
0

13405 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1239
void NetworkUtils::addRouteToSecondaryTable(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult) {
char command[MAX_COMMAND_SIZE];
char* dataType = command;
if (SDK_VERSION < 20) {
char* command = dataType;
PR_snprintf(command, MAX_COMMAND_SIZE - 1,
"interface route add %s secondary %s %s %s",
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mGateway));
0

13406 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 497
void NetworkUtils::doCommand(const char* aCommand, CommandChain* aChain, CommandCallback aCallback)
NU_DBG("Preparing to send \'%s\' command...", aCommand);
NetdCommand* netdCommand = new NetdCommand();
netdCommand* dataType = netdCommand;
if (SDK_VERSION >= 16) {
netdCommand* netdCommand = dataType;
PR_snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "0 %s", aCommand);
0

13407 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 879
void NetworkUtils::startTethering(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
char* dataType = command;
if (!GET_FIELD(mUsbStartIp).IsEmpty() && !GET_FIELD(mUsbEndIp).IsEmpty()) {
char* command = dataType;
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "tether start %s %s %s %s",
GET_CHAR(mWifiStartIp), GET_CHAR(mWifiEndIp),
GET_CHAR(mUsbStartIp),  GET_CHAR(mUsbEndIp));
0

13408 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1164
void NetworkUtils::modifyRouteOnInterface(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult,
bool aDoAdd)
char command[MAX_COMMAND_SIZE];
nsCString ipOrSubnetIp = NS_ConvertUTF16toUTF8(GET_FIELD(mIp));
nsCString gatewayOrEmpty;
const char* legacyOrEmpty = "legacy 0 ";
if (GET_FIELD(mGateway).IsEmpty()) {
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
nsCString NetworkUtils::getSubnetIp(const nsCString& aIp, int aPrefixLength)
return nsCString();
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
const char* action = aDoAdd ? "add" : "remove";
action = dataType;
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route %s%s %d %s %s/%d%s",
legacyOrEmpty, action,
GET_FIELD(mNetId), GET_CHAR(mIfname), ipOrSubnetIp.get(),
GET_FIELD(mPrefixLength), gatewayOrEmpty.get());
0

13409 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1682
CommandResult NetworkUtils::setDNS(NetworkParams& aOptions)
uint32_t length = aOptions.mDnses.Length();
if (length > 0) {
for (uint32_t i = 0; i < length; i++) {
NS_ConvertUTF16toUTF8 autoDns(aOptions.mDnses[i]);
char dns_prop_key[PROPERTY_VALUE_MAX];
char* dataType = dns_prop_key;
dns_prop_key = dataType;
PR_snprintf(dns_prop_key, sizeof dns_prop_key, "net.dns%d", i+1);
0

13410 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 781
void NetworkUtils::addRouteToLocalNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
char *dataType = command;
uint32_t prefix = atoi(GET_CHAR(mPrefix));
uint32_t ip = inet_addr(GET_CHAR(mIp));
char* networkAddr = getNetworkAddr(ip, prefix);
command = dataType;
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route add local %s %s/%s",
GET_CHAR(mInternalIfname), networkAddr, GET_CHAR(mPrefix));
0

13411 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 602
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
char* dataType = command;
nsCString ssid(GET_CHAR(mSsid));
nsCString key(GET_CHAR(mKey));
escapeQuote(ssid);
escapeQuote(key);
if (SDK_VERSION >= 19) {
char *command = dataType;
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s \"%s\" broadcast 6 %s \"%s\"",
GET_CHAR(mIfname),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
0

13412 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1264
void NetworkUtils::removeRouteFromSecondaryTable(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult) {
char command[MAX_COMMAND_SIZE];
char* dataType = command;
if (SDK_VERSION < 20) {
char* command = dataType;
PR_snprintf(command, MAX_COMMAND_SIZE - 1,
"interface route remove %s secondary %s %s %s",
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mGateway));
0

13413 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp String_Termination_Error 1607
void NetworkUtils::onNetdMessage(NetdCommand* aCommand)
char* reason = strtok(nullptr, "\0");
char* dataType = reason;
sendBroadcastMessage(code, reason);
if (code == NETD_COMMAND_INTERFACE_CHANGE) {
if (gWifiTetheringParms) {
char linkdownReason[MAX_COMMAND_SIZE];
PR_snprintf(linkdownReason, MAX_COMMAND_SIZE - 1,
"Iface linkstate %s down",
NS_ConvertUTF16toUTF8(gWifiTetheringParms->mIfname).get());
char* reason = dataType;
if (!strcmp(reason, linkdownReason)) {
0

13414 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1040
void NetworkUtils::setInterfaceDns(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
char* dataType = command;
int written;
if (SDK_VERSION <= 20) {
char* command = dataType;
written = PR_snprintf(command, sizeof command, "resolver setifdns %s %s", GET_CHAR(mIfname), GET_CHAR(mDomain));
0

13415 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1257
void NetworkUtils::removeRouteFromSecondaryTable(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult) {
char command[MAX_COMMAND_SIZE];
char *dataType = command;
if (SDK_VERSION >= 20) {
char* command = dataType;
PR_snprintf(command, MAX_COMMAND_SIZE - 1,
"network route remove %d %s %s/%s %s",
GET_FIELD(mNetId),
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mGateway));
0

13416 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 723
void NetworkUtils::setInterfaceUp(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
char *dataType = command;
if (SDK_VERSION >= 16) {
char *command = dataType;
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "interface setcfg %s %s %s %s",
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mLink));
0

13417 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1005
void NetworkUtils::removeDefaultRoute(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
char *dataType = command;
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
char*command = dataType;
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
0

13418 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 615
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
char *dataType = command;
nsCString ssid(GET_CHAR(mSsid));
nsCString key(GET_CHAR(mKey));
if (SDK_VERSION < 16) {
char* command = dataType;
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s %s \"%s\" %s \"%s\" 6 0 8",
GET_CHAR(mIfname),
GET_CHAR(mWifictrlinterfacename),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
0

13419 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 608
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
char* dataType = command;
nsCString ssid(GET_CHAR(mSsid));
nsCString key(GET_CHAR(mKey));
if (SDK_VERSION >= 16 && SDK_VERSION < 19) {
char* command = dataType;
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s \"%s\" %s \"%s\"",
GET_CHAR(mIfname),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
0

13420 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1232
void NetworkUtils::addRouteToSecondaryTable(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult) {
char command[MAX_COMMAND_SIZE];
char* dataType = command;
if (SDK_VERSION >= 20) {
char*command = dataType;
PR_snprintf(command, MAX_COMMAND_SIZE - 1,
"network route add %d %s %s/%s %s",
GET_FIELD(mNetId),
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mGateway));
0

13421 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1605
void NetworkUtils::onNetdMessage(NetdCommand* aCommand)
char* data = (char*)aCommand->mData;
char* result = strtok(data, NETD_MESSAGE_DELIMIT);
uint32_t code = atoi(result);
char* reason = strtok(nullptr, "\0");
if (isBroadcastMessage(code)) {
if (code == NETD_COMMAND_INTERFACE_CHANGE) {
if (gWifiTetheringParms) {
char linkdownReason[MAX_COMMAND_SIZE];
char* dataType = linkdownReason;
linkdownReason = dataType;
PR_snprintf(linkdownReason, MAX_COMMAND_SIZE - 1,
"Iface linkstate %s down",
NS_ConvertUTF16toUTF8(gWifiTetheringParms->mIfname).get());
0

13422 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1185
void NetworkUtils::addDefaultRouteToNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
char* dataType = command;
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
command = dataType;
int type = getIpType(autoGateway.get());
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route add %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
0

13423 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 602
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
char* dataType = command;
nsCString ssid(GET_CHAR(mSsid));
nsCString key(GET_CHAR(mKey));
escapeQuote(ssid);
escapeQuote(key);
if (SDK_VERSION >= 19) {
char* command = dataType;
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s \"%s\" broadcast 6 %s \"%s\"",
GET_CHAR(mIfname),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
0

13424 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_wifi_WifiUtils.cpp Format_String_Attack 371
int32_t do_wifi_command(const char* iface, const char* cmd, char* buf, size_t* len) {
char command[COMMAND_SIZE];
char *dataType = command;
if (!strcmp(iface, "p2p0")) {
char* command = dataType;
PR_snprintf(command, COMMAND_SIZE, "%s", cmd);
0

13425 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_wifi_WifiUtils.cpp Format_String_Attack 374
int32_t do_wifi_command(const char* iface, const char* cmd, char* buf, size_t* len) {
char command[COMMAND_SIZE];
char* dataType = command;
if (!strcmp(iface, "p2p0")) {
char* command = dataType;
PR_snprintf(command, COMMAND_SIZE, "IFNAME=%s %s", iface, cmd);
0

13438 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 729
void NetworkUtils::setInterfaceUp(CommandChain* aChain, CommandCallback aCallback, NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
char *dataType = command;
if (SDK_VERSION >= 16) {
char *command = dataType;
snprintf(command, MAX_COMMAND_SIZE - 1, "interface setcfg %s %s %s [%s]",
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mLink));
1

13439 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 926
void NetworkUtils::setDnsForwarders(CommandChain* aChain,CommandCallback aCallback, NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
char *dataType = command;
if (SDK_VERSION >= 20) {
char *command = dataType;
snprintf(command, MAX_COMMAND_SIZE - 1, "tether dns set %d %s %s",
GET_FIELD(mNetId), GET_CHAR(mDns1), GET_CHAR(mDns2));
1

13440 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1050
void NetworkUtils::setInterfaceDns(CommandChain* aChain, ommandCallback aCallback,NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
char *dataType = command;
int written;
if (SDK_VERSION >= 20) {
written = snprintf(command, sizeof command, "resolver setnetdns %d %s",
GET_FIELD(mNetId), GET_CHAR(mDomain));
nsTArray<nsString>& dnses = GET_FIELD(mDnses);
uint32_t length = dnses.Length();
for (uint32_t i = 0; i < length; i++) {
NS_ConvertUTF16toUTF8 autoDns(dnses[i]);
command = dataType;
int ret = snprintf(command + written, sizeof(command) - written, " %s", autoDns.get());
1

13441 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1185
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
return addDefaultRouteToNetwork(aChain, aOriginalCallback, aResult);
void NetworkUtils::addDefaultRouteToNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;  }
char command[MAX_COMMAND_SIZE];
char* dataType = command;
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
command = dataType;
snprintf(command, MAX_COMMAND_SIZE - 1, "network route add %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
1

13442 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1006
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
return removeDefaultRoute(aChain, aOriginalCallback, aResult);
void NetworkUtils::removeDefaultRoute(CommandChain* aChain, CommandCallback aCallback,NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;}
char command[MAX_COMMAND_SIZE];
char* dataType = command;
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
command = dataType;
snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
1

13443 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1239
void NetworkUtils::addRouteToSecondaryTable(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult) {
char command[MAX_COMMAND_SIZE];
char* dataType = command;
if (SDK_VERSION < 20) {
char* command = dataType;
snprintf(command, MAX_COMMAND_SIZE - 1,
"interface route add %s secondary %s %s %s",
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mGateway));
1

13444 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 497
void NetworkUtils::doCommand(const char* aCommand, CommandChain* aChain, CommandCallback aCallback)
NU_DBG("Preparing to send \'%s\' command...", aCommand);
NetdCommand* netdCommand = new NetdCommand();
netdCommand* dataType = netdCommand;
if (SDK_VERSION >= 16) {
netdCommand* netdCommand = dataType;
snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "0 %s", aCommand);
1

13445 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 879
void NetworkUtils::startTethering(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
char* dataType = command;
if (!GET_FIELD(mUsbStartIp).IsEmpty() && !GET_FIELD(mUsbEndIp).IsEmpty()) {
char* command = dataType;
snprintf(command, MAX_COMMAND_SIZE - 1, "tether start %s %s %s %s",
GET_CHAR(mWifiStartIp), GET_CHAR(mWifiEndIp),
GET_CHAR(mUsbStartIp),  GET_CHAR(mUsbEndIp));
1

13446 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1164
void NetworkUtils::modifyRouteOnInterface(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult,
bool aDoAdd)
char command[MAX_COMMAND_SIZE];
nsCString ipOrSubnetIp = NS_ConvertUTF16toUTF8(GET_FIELD(mIp));
nsCString gatewayOrEmpty;
const char* legacyOrEmpty = "legacy 0 ";
if (GET_FIELD(mGateway).IsEmpty()) {
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
nsCString NetworkUtils::getSubnetIp(const nsCString& aIp, int aPrefixLength)
return nsCString();
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
const char* action = aDoAdd ? "add" : "remove";
const char* dataType = action;
action = dataType;
snprintf(command, MAX_COMMAND_SIZE - 1, "network route %s%s %d %s %s/%d%s",
legacyOrEmpty, action,
GET_FIELD(mNetId), GET_CHAR(mIfname), ipOrSubnetIp.get(),
GET_FIELD(mPrefixLength), gatewayOrEmpty.get());
1

13447 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1682
CommandResult NetworkUtils::setDNS(NetworkParams& aOptions)
uint32_t length = aOptions.mDnses.Length();
if (length > 0) {
for (uint32_t i = 0; i < length; i++) {
NS_ConvertUTF16toUTF8 autoDns(aOptions.mDnses[i]);
char dns_prop_key[PROPERTY_VALUE_MAX];
char* dataType = dns_prop_key;
dns_prop_key = dataType;
snprintf(dns_prop_key, sizeof dns_prop_key, "net.dns%d", i+1);
1

13448 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 781
void NetworkUtils::addRouteToLocalNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
char *dataType = command;
uint32_t prefix = atoi(GET_CHAR(mPrefix));
uint32_t ip = inet_addr(GET_CHAR(mIp));
char* networkAddr = getNetworkAddr(ip, prefix);
command = dataType;
snprintf(command, MAX_COMMAND_SIZE - 1, "network route add local %s %s/%s",
GET_CHAR(mInternalIfname), networkAddr, GET_CHAR(mPrefix));
1

13449 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 602
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
char* dataType = command;
nsCString ssid(GET_CHAR(mSsid));
nsCString key(GET_CHAR(mKey));
escapeQuote(ssid);
escapeQuote(key);
if (SDK_VERSION >= 19) {
char *command = dataType;
snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s \"%s\" broadcast 6 %s \"%s\"",
GET_CHAR(mIfname),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
1

13450 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1264
void NetworkUtils::removeRouteFromSecondaryTable(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult) {
char command[MAX_COMMAND_SIZE];
char* dataType = command;
if (SDK_VERSION < 20) {
char* command = dataType;
snprintf(command, MAX_COMMAND_SIZE - 1,
"interface route remove %s secondary %s %s %s",
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mGateway));
1

13451 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp String_Termination_Error 1607
void NetworkUtils::onNetdMessage(NetdCommand* aCommand)
char* reason = strtok(nullptr, "\0");
char* dataType = reason;
sendBroadcastMessage(code, reason);
if (code == NETD_COMMAND_INTERFACE_CHANGE) {
if (gWifiTetheringParms) {
char linkdownReason[MAX_COMMAND_SIZE];
snprintf(linkdownReason, MAX_COMMAND_SIZE - 1,
"Iface linkstate %s down",
NS_ConvertUTF16toUTF8(gWifiTetheringParms->mIfname).get());
char* reason = dataType;
if (!strcmp(reason, linkdownReason)) {
1

13452 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1040
void NetworkUtils::setInterfaceDns(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
char* dataType = command;
int written;
if (SDK_VERSION <= 20) {
char* command = dataType;
written = snprintf(command, sizeof command, "resolver setifdns %s %s", GET_CHAR(mIfname), GET_CHAR(mDomain));
1

13453 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1257
void NetworkUtils::removeRouteFromSecondaryTable(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult) {
char command[MAX_COMMAND_SIZE];
char *dataType = command;
if (SDK_VERSION >= 20) {
char* command = dataType;
snprintf(command, MAX_COMMAND_SIZE - 1,
"network route remove %d %s %s/%s %s",
GET_FIELD(mNetId),
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mGateway));
1

13454 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 723
void NetworkUtils::setInterfaceUp(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
char *dataType = command;
if (SDK_VERSION >= 16) {
char *command = dataType;
snprintf(command, MAX_COMMAND_SIZE - 1, "interface setcfg %s %s %s %s",
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mLink));
1

13455 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1005
void NetworkUtils::removeDefaultRoute(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
char *dataType = command;
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
char*command = dataType;
snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
1

13456 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 615
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
char *dataType = command;
nsCString ssid(GET_CHAR(mSsid));
nsCString key(GET_CHAR(mKey));
if (SDK_VERSION < 16) {
char* command = dataType;
snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s %s \"%s\" %s \"%s\" 6 0 8",
GET_CHAR(mIfname),
GET_CHAR(mWifictrlinterfacename),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
1

13457 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 608
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
char* dataType = command;
nsCString ssid(GET_CHAR(mSsid));
nsCString key(GET_CHAR(mKey));
if (SDK_VERSION >= 16 && SDK_VERSION < 19) {
char* command = dataType;
snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s \"%s\" %s \"%s\"",
GET_CHAR(mIfname),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
1

13458 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1232
void NetworkUtils::addRouteToSecondaryTable(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult) {
char command[MAX_COMMAND_SIZE];
char* dataType = command;
if (SDK_VERSION >= 20) {
char*command = dataType;
snprintf(command, MAX_COMMAND_SIZE - 1,
"network route add %d %s %s/%s %s",
GET_FIELD(mNetId),
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mGateway));
1

13459 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1605
void NetworkUtils::onNetdMessage(NetdCommand* aCommand)
char* data = (char*)aCommand->mData;
char* result = strtok(data, NETD_MESSAGE_DELIMIT);
uint32_t code = atoi(result);
char* reason = strtok(nullptr, "\0");
if (isBroadcastMessage(code)) {
if (code == NETD_COMMAND_INTERFACE_CHANGE) {
if (gWifiTetheringParms) {
char linkdownReason[MAX_COMMAND_SIZE];
char* dataType = linkdownReason;
linkdownReason = dataType;
snprintf(linkdownReason, MAX_COMMAND_SIZE - 1,
"Iface linkstate %s down",
NS_ConvertUTF16toUTF8(gWifiTetheringParms->mIfname).get());
1

13460 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1185
void NetworkUtils::addDefaultRouteToNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
char* dataType = command;
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
command = dataType;
int type = getIpType(autoGateway.get());
snprintf(command, MAX_COMMAND_SIZE - 1, "network route add %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
1

13461 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 602
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
char* dataType = command;
nsCString ssid(GET_CHAR(mSsid));
nsCString key(GET_CHAR(mKey));
escapeQuote(ssid);
escapeQuote(key);
if (SDK_VERSION >= 19) {
char* command = dataType;
snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s \"%s\" broadcast 6 %s \"%s\"",
GET_CHAR(mIfname),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
1

13462 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_wifi_WifiUtils.cpp Format_String_Attack 371
int32_t do_wifi_command(const char* iface, const char* cmd, char* buf, size_t* len) {
char command[COMMAND_SIZE];
char *dataType = command;
if (!strcmp(iface, "p2p0")) {
char* command = dataType;
snprintf(command, COMMAND_SIZE, "%s", cmd);
1

13463 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_wifi_WifiUtils.cpp Format_String_Attack 374
int32_t do_wifi_command(const char* iface, const char* cmd, char* buf, size_t* len) {
char command[COMMAND_SIZE];
char* dataType = command;
if (strcmp(iface, "p2p0")) {
char* command = dataType;
snprintf(command, COMMAND_SIZE, "IFNAME=%s %s", iface, cmd);
1

13476 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1050
void NetworkUtils::setInterfaceDns(CommandChain* aChain, ommandCallback aCallback,NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
int written;
if (SDK_VERSION >= 20) {
written = PR_snprintf(command, sizeof command, "resolver setnetdns %d %s",
GET_FIELD(mNetId), GET_CHAR(mDomain));
nsTArray<nsString>& dnses = GET_FIELD(mDnses);
uint32_t length = dnses.Length();
for (uint32_t i = 0; i < length; i++) {
structType myStruct;
myStruct.structFirst = dnses;
NS_ConvertUTF16toUTF8 autoDns = func(myStruct, i);
nsTArray func(structType myStruct, uint32_t i)
nsTArray<nsString>& dnses = myStruct.structFirst;
return dnses[i];
NS_ConvertUTF16toUTF8 autoDns = func(myStruct, i);
int ret = PR_snprintf(command + written, sizeof(command) - written, " %s", autoDns.get());
0

13477 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1006
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
return removeDefaultRoute(aChain, aOriginalCallback, aResult);
void NetworkUtils::removeDefaultRoute(CommandChain* aChain, CommandCallback aCallback,NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;}
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
structType myStruct;
myStruct.structFirst = autoGateway;
int type = func(myStruct);
int func(structType myStruct)
NS_ConvertUTF16toUTF8 autoGateway = myStruct.structFirst;
return getIpType(autoGateway.get());
int type = func(myStruct);
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
0

13478 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1164
void NetworkUtils::modifyRouteOnInterface(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult,
bool aDoAdd)
char command[MAX_COMMAND_SIZE];
nsCString ipOrSubnetIp = NS_ConvertUTF16toUTF8(GET_FIELD(mIp));
nsCString gatewayOrEmpty;
const char* legacyOrEmpty = "legacy 0 ";
if (GET_FIELD(mGateway).IsEmpty()) {
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
nsCString NetworkUtils::getSubnetIp(const nsCString& aIp, int aPrefixLength)
return nsCString();
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
structType myStruct;
myStruct.structFirst = aDoAdd;
const char* action = func(myStruct);
const char* func(structType myStruct)
bool aDoAdd = myStruct.structFirst;
return aDoAdd ? "add" : "remove";
const char* action = func(myStruct);
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route %s%s %d %s %s/%d%s",
legacyOrEmpty, action,
GET_FIELD(mNetId), GET_CHAR(mIfname), ipOrSubnetIp.get(),
GET_FIELD(mPrefixLength), gatewayOrEmpty.get());
0

13479 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1682
CommandResult NetworkUtils::setDNS(NetworkParams& aOptions)
structType myStruct;
myStruct.structFirst = aOptions;
uint32_t length = func(myStruct);
uint32_t func(structType myStruct)
NetworkParams aOptions = myStruct.structFirst;
return aOptions.mDnses.Length();
uint32_t length = func(myStruct);
if (length > 0) {
for (uint32_t i = 0; i < length; i++) {
NS_ConvertUTF16toUTF8 autoDns(aOptions.mDnses[i]);
char dns_prop_key[PROPERTY_VALUE_MAX];
PR_snprintf(dns_prop_key, sizeof dns_prop_key, "net.dns%d", i+1);
0

13480 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 781
void NetworkUtils::addRouteToLocalNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
uint32_t prefix = atoi(GET_CHAR(mPrefix));
uint32_t ip = inet_addr(GET_CHAR(mIp));
structType myStruct;
myStruct.structFirst = ip;
char* networkAddr = func(myStruct, prefix);
char* func(structType myStruct, uint32_t prefix)
uint32_t ip = myStruct.structFirst;
return getNetworkAddr(ip, prefix);
char* networkAddr = func(myStruct, prefix);
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route add local %s %s/%s",
GET_CHAR(mInternalIfname), networkAddr, GET_CHAR(mPrefix));
0

13481 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1005
void NetworkUtils::removeDefaultRoute(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
structType myStruct;
myStruct.structFirst = autoGateway;
int type = func(myStruct);
int func(structType myStruct)
NS_ConvertUTF16toUTF8 autoGateway = myStruct.structFirst;
return getIpType(autoGateway.get());
int type = func(myStruct);
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
0

13482 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1605
void NetworkUtils::onNetdMessage(NetdCommand* aCommand)
char* data = (char*)aCommand->mData;
char* result = strtok(data, NETD_MESSAGE_DELIMIT);
structType myStruct;
myStruct.structFirst = result;
uint32_t code = func(myStruct);
uint32_t func(structType myStruct)
char *result = myStruct.structFirst;
return atoi(result);
uint32_t code = func(myStruct);
char* reason = strtok(nullptr, "\0");
if (isBroadcastMessage(code)) {
if (code == NETD_COMMAND_INTERFACE_CHANGE) {
if (gWifiTetheringParms) {
char linkdownReason[MAX_COMMAND_SIZE];
PR_snprintf(linkdownReason, MAX_COMMAND_SIZE - 1,
"Iface linkstate %s down",
NS_ConvertUTF16toUTF8(gWifiTetheringParms->mIfname).get());
0

13483 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1185
void NetworkUtils::addDefaultRouteToNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
structType myStruct;
myStruct.structFirst = autoGateway;
int type = func(myStruct);
int func(structType myStruct)
NS_ConvertUTF16toUTF8 autoGateway = myStruct.structFirst;
return getIpType(autoGateway.get());
int type = func(myStruct);
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route add %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
0

13494 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1050
void NetworkUtils::setInterfaceDns(CommandChain* aChain, ommandCallback aCallback,NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
int written;
if (SDK_VERSION >= 20) {
written = snprintf(command, sizeof command, "resolver setnetdns %d %s",
GET_FIELD(mNetId), GET_CHAR(mDomain));
nsTArray<nsString>& dnses = GET_FIELD(mDnses);
uint32_t length = dnses.Length;
for (uint32_t i = 0; i < length; i++) {
structType myStruct;
myStruct.structFirst = dnses;
NS_ConvertUTF16toUTF8 autoDns = func(myStruct, i);
nsTArray func(structType myStruct, uint32_t i)
nsTArray<nsString>& dnses = myStruct.structFirst;
return dnses[i];
NS_ConvertUTF16toUTF8 autoDns = func(myStruct, i);
int ret = snprintf(command + written, sizeof(command) - written, " %s", autoDns.get());
1

13495 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1006
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
return removeDefaultRoute(aChain, aOriginalCallback, aResult);
void NetworkUtils::removeDefaultRoute(CommandChain* aChain, CommandCallback aCallback,NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;}
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
structType myStruct;
myStruct.structFirst = autoGateway;
int type = func(myStruct);
int func(structType myStruct)
NS_ConvertUTF16toUTF8 autoGateway = myStruct.structFirst;
return getIpType(autoGateway.get());
int type = func(myStruct);
snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
1

13496 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1164
void NetworkUtils::modifyRouteOnInterface(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult,
bool aDoAdd)
char command[MAX_COMMAND_SIZE];
nsCString ipOrSubnetIp = NS_ConvertUTF16toUTF8(GET_FIELD(mIp));
nsCString gatewayOrEmpty;
const char* legacyOrEmpty = "legacy 0 ";
if (GET_FIELD(mGateway).IsEmpty()) {
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
nsCString NetworkUtils::getSubnetIp(const nsCString& aIp, int aPrefixLength)
return nsCString();
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
structType myStruct;
myStruct.structFirst = aDoAdd;
const char* action = func(myStruct);
const char* func(structType myStruct)
bool aDoAdd = myStruct.structFirst;
return aDoAdd ? "add" : "remove";
const char* action = func(myStruct);
snprintf(command, MAX_COMMAND_SIZE - 1, "network route %s%s %d %s %s/%d%s",
legacyOrEmpty, action,
GET_FIELD(mNetId), GET_CHAR(mIfname), ipOrSubnetIp.get(),
GET_FIELD(mPrefixLength), gatewayOrEmpty.get());
1

13497 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1682
CommandResult NetworkUtils::setDNS(NetworkParams& aOptions)
structType myStruct;
myStruct.structFirst = aOptions;
uint32_t length = func(myStruct);
uint32_t func(structType myStruct)
NetworkParams aOptions = myStruct.structFirst;
return aOptions.mDnses.Length();
uint32_t length = func(myStruct);
if (length > 0) {
for (uint32_t i = 0; i < length; i++) {
NS_ConvertUTF16toUTF8 autoDns(aOptions.mDnses[i]);
char dns_prop_key[PROPERTY_VALUE_MAX];
snprintf(dns_prop_key, sizeof dns_prop_key, "net.dns%d", i+1);
1

13498 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 781
void NetworkUtils::addRouteToLocalNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
uint32_t prefix = atoi(GET_CHAR(mPrefix));
uint32_t ip = inet_addr(GET_CHAR(mIp));
structType myStruct;
myStruct.structFirst = ip;
char* networkAddr = func(myStruct, prefix);
char* func(structType myStruct, uint32_t prefix)
uint32_t ip = myStruct.structFirst;
return getNetworkAddr(ip, prefix);
char* networkAddr = func(myStruct, prefix);
snprintf(command, MAX_COMMAND_SIZE - 1, "network route add local %s %s/%s",
GET_CHAR(mInternalIfname), networkAddr, GET_CHAR(mPrefix));
1

13499 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1005
void NetworkUtils::removeDefaultRoute(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
structType myStruct;
myStruct.structFirst = autoGateway;
int type = func(myStruct);
int func(structType myStruct)
NS_ConvertUTF16toUTF8 autoGateway = myStruct.structFirst;
return getIpType(autoGateway.get());
int type = func(myStruct);
snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
1

13500 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1605
void NetworkUtils::onNetdMessage(NetdCommand* aCommand)
char* data = (char*)aCommand->mData;
char* result = strtok(data, NETD_MESSAGE_DELIMIT);
structType myStruct;
myStruct.structFirst = result;
uint32_t code = func(myStruct);
uint32_t func(structType myStruct)
char *result = myStruct.structFirst;
return atoi(result);
uint32_t code = func(myStruct);
char* reason = strtok(nullptr, "\0");
if (isBroadcastMessage(code)) {
if (code == NETD_COMMAND_INTERFACE_CHANGE) {
if (gWifiTetheringParms) {
char linkdownReason[MAX_COMMAND_SIZE];
snprintf(linkdownReason, MAX_COMMAND_SIZE - 1,
"Iface linkstate %s down",
NS_ConvertUTF16toUTF8(gWifiTetheringParms->mIfname).get());
1

13501 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1185
void NetworkUtils::addDefaultRouteToNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
structType myStruct;
myStruct.structFirst = autoGateway;
int type = func(myStruct);
int func(structType myStruct)
NS_ConvertUTF16toUTF8 autoGateway = myStruct.structFirst;
return getIpType(autoGateway.get());
int type = func(myStruct);
snprintf(command, MAX_COMMAND_SIZE - 1, "network route add %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
1

13512 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1050
void NetworkUtils::setInterfaceDns(CommandChain* aChain, ommandCallback aCallback,NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
int written;
if (SDK_VERSION >= 20) {
written = PR_snprintf(command, sizeof command, "resolver setnetdns %d %s",
GET_FIELD(mNetId), GET_CHAR(mDomain));
nsTArray<nsString>& dnses = GET_FIELD(mDnses);
uint32_t length = dnses.Length();
for (uint32_t i = 0; i < length; i++) {
unionType myUnion;
myUnion.unionFirst = dnses;
NS_ConvertUTF16toUTF8 autoDns = func(myUnion, i);
nsTArray func(unionType myUnion, uint32_t i)
nsTArray<nsString>& dnses = myUnion.unionSecond;
return dnses[i];
NS_ConvertUTF16toUTF8 autoDns = func(myUnion, i);
int ret = PR_snprintf(command + written, sizeof(command) - written, " %s", autoDns.get());
0

13513 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1006
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
return removeDefaultRoute(aChain, aOriginalCallback, aResult);
void NetworkUtils::removeDefaultRoute(CommandChain* aChain, CommandCallback aCallback,NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;}
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
unionType myUnion;
myUnion.unionFirst = autoGateway;
int type = func(myUnion);
int func(unionType myUnion)
NS_ConvertUTF16toUTF8 autoGateway = myUnion.unionSecond;
return getIpType(autoGateway.get());
int type = func(myUnion);
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
0

13514 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1164
void NetworkUtils::modifyRouteOnInterface(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult,
bool aDoAdd)
char command[MAX_COMMAND_SIZE];
nsCString ipOrSubnetIp = NS_ConvertUTF16toUTF8(GET_FIELD(mIp));
nsCString gatewayOrEmpty;
const char* legacyOrEmpty = "legacy 0 ";
if (GET_FIELD(mGateway).IsEmpty()) {
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
nsCString NetworkUtils::getSubnetIp(const nsCString& aIp, int aPrefixLength)
return nsCString();
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
unionType myUnion;
myUnion.unionFirst = aDoAdd;
const char* action = func(myUnion);
const char* func(unionType myUnion)
bool aDoAdd = myUnion.unionSecond;
return aDoAdd ? "add" : "remove";
const char* action = func(myUnion);
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route %s%s %d %s %s/%d%s",
legacyOrEmpty, action,
GET_FIELD(mNetId), GET_CHAR(mIfname), ipOrSubnetIp.get(),
GET_FIELD(mPrefixLength), gatewayOrEmpty.get());
0

13515 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1682
CommandResult NetworkUtils::setDNS(NetworkParams& aOptions)
unionType myUnion;
myUnion.unionFirst = aOptions;
uint32_t length = func(myUnion);
uint32_t func(unionType myUnion)
NetworkParams aOptions = myUnion.unionSecond;
return aOptions.mDnses.Length();
uint32_t length = func(myUnion);
if (length > 0) {
for (uint32_t i = 0; i < length; i++) {
NS_ConvertUTF16toUTF8 autoDns(aOptions.mDnses[i]);
char dns_prop_key[PROPERTY_VALUE_MAX];
PR_snprintf(dns_prop_key, sizeof dns_prop_key, "net.dns%d", i+1);
0

13516 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 781
void NetworkUtils::addRouteToLocalNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
uint32_t prefix = atoi(GET_CHAR(mPrefix));
uint32_t ip = inet_addr(GET_CHAR(mIp));
unionType myUnion;
myUnion.unionFirst = ip;
char* networkAddr = func(myUnion, prefix);
char* func(unionType myUnion, uint32_t prefix)
uint32_t ip = myUnion.unionSecond;
return getNetworkAddr(ip, prefix);
char* networkAddr = func(myUnion, prefix);
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route add local %s %s/%s",
GET_CHAR(mInternalIfname), networkAddr, GET_CHAR(mPrefix));
0

13517 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1005
void NetworkUtils::removeDefaultRoute(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
unionType myUnion;
myUnion.unionFirst = autoGateway;
int type = func(myUnion);
int func(unionType myUnion)
NS_ConvertUTF16toUTF8 autoGateway = myUnion.unionSecond;
return getIpType(autoGateway.get());
int type = func(myUnion);
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
0

13518 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1605
void NetworkUtils::onNetdMessage(NetdCommand* aCommand)
char* data = (char*)aCommand->mData;
char* result = strtok(data, NETD_MESSAGE_DELIMIT);
unionType myUnion;
myUnion.unionFirst = result;
uint32_t code = func(myUnion);
uint32_t func(unionType myUnion)
char *result = myUnion.unionSecond;
return atoi(result);
uint32_t code = func(myUnion);
char* reason = strtok(nullptr, "\0");
if (isBroadcastMessage(code)) {
if (code == NETD_COMMAND_INTERFACE_CHANGE) {
if (gWifiTetheringParms) {
char linkdownReason[MAX_COMMAND_SIZE];
PR_snprintf(linkdownReason, MAX_COMMAND_SIZE - 1,
"Iface linkstate %s down",
NS_ConvertUTF16toUTF8(gWifiTetheringParms->mIfname).get());
0

13519 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1185
void NetworkUtils::addDefaultRouteToNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
unionType myUnion;
myUnion.unionFirst = autoGateway;
int type = func(myUnion);
int func(unionType myUnion)
NS_ConvertUTF16toUTF8 autoGateway = myUnion.unionSecond;
return getIpType(autoGateway.get());
int type = func(myUnion);
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route add %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
0

13530 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1050
void NetworkUtils::setInterfaceDns(CommandChain* aChain, ommandCallback aCallback,NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
int written;
if (SDK_VERSION >= 20) {
written = snprintf(command, sizeof command, "resolver setnetdns %d %s",
GET_FIELD(mNetId), GET_CHAR(mDomain));
nsTArray<nsString>& dnses = GET_FIELD(mDnses);
uint32_t length = dnses.Length;
for (uint32_t i = 0; i < length; i++) {
unionType myUnion;
myUnion.unionFirst = dnses;
NS_ConvertUTF16toUTF8 autoDns = func(myUnion, i);
nsTArray func(unionType myUnion, uint32_t i)
nsTArray<nsString>& dnses = myUnion.unionSecond;
return dnses[i];
NS_ConvertUTF16toUTF8 autoDns = func(myUnion, i);
int ret = snprintf(command + written, sizeof(command) - written, " %s", autoDns.get());
1

13531 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1006
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
return removeDefaultRoute(aChain, aOriginalCallback, aResult);
void NetworkUtils::removeDefaultRoute(CommandChain* aChain, CommandCallback aCallback,NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;}
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
unionType myUnion;
myUnion.unionFirst = autoGateway;
int type = func(myUnion);
int func(unionType myUnion)
NS_ConvertUTF16toUTF8 autoGateway = myUnion.unionSecond;
return getIpType(autoGateway.get());
int type = func(myUnion);
snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
1

13532 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1164
void NetworkUtils::modifyRouteOnInterface(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult,
bool aDoAdd)
char command[MAX_COMMAND_SIZE];
nsCString ipOrSubnetIp = NS_ConvertUTF16toUTF8(GET_FIELD(mIp));
nsCString gatewayOrEmpty;
const char* legacyOrEmpty = "legacy 0 ";
if (GET_FIELD(mGateway).IsEmpty()) {
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
nsCString NetworkUtils::getSubnetIp(const nsCString& aIp, int aPrefixLength)
return nsCString();
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
unionType myUnion;
myUnion.unionFirst = aDoAdd;
const char* action = func(myUnion);
const char* func(unionType myUnion)
bool aDoAdd = myUnion.unionSecond;
return aDoAdd ? "add" : "remove";
const char* action = func(myUnion);
snprintf(command, MAX_COMMAND_SIZE - 1, "network route %s%s %d %s %s/%d%s",
legacyOrEmpty, action,
GET_FIELD(mNetId), GET_CHAR(mIfname), ipOrSubnetIp.get(),
GET_FIELD(mPrefixLength), gatewayOrEmpty.get());
1

13533 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1682
CommandResult NetworkUtils::setDNS(NetworkParams& aOptions)
unionType myUnion;
myUnion.unionFirst = aOptions;
uint32_t length = func(myUnion);
uint32_t func(unionType myUnion)
NetworkParams aOptions = myUnion.unionSecond;
return aOptions.mDnses.Length();
uint32_t length = func(myUnion);
if (length > 0) {
for (uint32_t i = 0; i < length; i++) {
NS_ConvertUTF16toUTF8 autoDns(aOptions.mDnses[i]);
char dns_prop_key[PROPERTY_VALUE_MAX];
snprintf(dns_prop_key, sizeof dns_prop_key, "net.dns%d", i+1);
1

13534 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 781
void NetworkUtils::addRouteToLocalNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
uint32_t prefix = atoi(GET_CHAR(mPrefix));
uint32_t ip = inet_addr(GET_CHAR(mIp));
unionType myUnion;
myUnion.unionFirst = ip;
char* networkAddr = func(myUnion, prefix);
char* func(unionType myUnion, uint32_t prefix)
uint32_t ip = myUnion.unionSecond;
return getNetworkAddr(ip, prefix);
char* networkAddr = func(myUnion, prefix);
snprintf(command, MAX_COMMAND_SIZE - 1, "network route add local %s %s/%s",
GET_CHAR(mInternalIfname), networkAddr, GET_CHAR(mPrefix));
1

13535 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1005
void NetworkUtils::removeDefaultRoute(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
unionType myUnion;
myUnion.unionFirst = autoGateway;
int type = func(myUnion);
int func(unionType myUnion)
NS_ConvertUTF16toUTF8 autoGateway = myUnion.unionSecond;
return getIpType(autoGateway.get());
int type = func(myUnion);
snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
1

13536 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1605
void NetworkUtils::onNetdMessage(NetdCommand* aCommand)
char* data = (char*)aCommand->mData;
char* result = strtok(data, NETD_MESSAGE_DELIMIT);
unionType myUnion;
myUnion.unionFirst = result;
uint32_t code = func(myUnion);
uint32_t func(unionType myUnion)
char *result = myUnion.unionSecond;
return atoi(result);
uint32_t code = func(myUnion);
char* reason = strtok(nullptr, "\0");
if (isBroadcastMessage(code)) {
if (code == NETD_COMMAND_INTERFACE_CHANGE) {
if (gWifiTetheringParms) {
char linkdownReason[MAX_COMMAND_SIZE];
snprintf(linkdownReason, MAX_COMMAND_SIZE - 1,
"Iface linkstate %s down",
NS_ConvertUTF16toUTF8(gWifiTetheringParms->mIfname).get());
1

13537 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1185
void NetworkUtils::addDefaultRouteToNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
unionType myUnion;
myUnion.unionFirst = autoGateway;
int type = func(myUnion);
int func(unionType myUnion)
NS_ConvertUTF16toUTF8 autoGateway = myUnion.unionSecond;
return getIpType(autoGateway.get());
int type = func(myUnion);
snprintf(command, MAX_COMMAND_SIZE - 1, "network route add %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
1

13548 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1050
void NetworkUtils::setInterfaceDns(CommandChain* aChain, ommandCallback aCallback,NetworkResultOptions& aResult)
int written;
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION >= 20) {
written = PR_snprintf(command, sizeof command, "resolver setnetdns %d %s",
GET_FIELD(mNetId), GET_CHAR(mDomain));
uint32_t length = dnses.Length();
nsTArray<nsString>& dnses = GET_FIELD(mDnses);
for (uint32_t i = 0; i < length; i++) {
NS_ConvertUTF16toUTF8 autoDns(dnses[i]);
int ret = PR_snprintf(command + written, sizeof(command) - written, " %s", autoDns.get());
0

13549 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1185
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
return addDefaultRouteToNetwork(aChain, aOriginalCallback, aResult);
void NetworkUtils::addDefaultRouteToNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;  }
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
char command[MAX_COMMAND_SIZE];
int type = getIpType(autoGateway.get());
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route add %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
0

13550 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1006
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
return removeDefaultRoute(aChain, aOriginalCallback, aResult);
void NetworkUtils::removeDefaultRoute(CommandChain* aChain, CommandCallback aCallback,NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;}
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
char command[MAX_COMMAND_SIZE];
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
0

13551 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 497
void NetworkUtils::doCommand(const char* aCommand, CommandChain* aChain, CommandCallback aCallback)
NetdCommand* netdCommand = new NetdCommand();
NU_DBG("Preparing to send \'%s\' command...", aCommand);
if (SDK_VERSION >= 16) {
PR_snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "0 %s", aCommand);
0

13552 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1164
void NetworkUtils::modifyRouteOnInterface(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult,
bool aDoAdd)
nsCString ipOrSubnetIp = NS_ConvertUTF16toUTF8(GET_FIELD(mIp));
nsCString gatewayOrEmpty;
char command[MAX_COMMAND_SIZE];
const char* legacyOrEmpty = "legacy 0 ";
if (GET_FIELD(mGateway).IsEmpty()) {
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
nsCString NetworkUtils::getSubnetIp(const nsCString& aIp, int aPrefixLength)
return nsCString();
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
const char* action = aDoAdd ? "add" : "remove";
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route %s%s %d %s %s/%d%s",
legacyOrEmpty, action,
GET_FIELD(mNetId), GET_CHAR(mIfname), ipOrSubnetIp.get(),
GET_FIELD(mPrefixLength), gatewayOrEmpty.get());
0

13553 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1682
CommandResult NetworkUtils::setDNS(NetworkParams& aOptions)
uint32_t length = aOptions.mDnses.Length();
if (length > 0) {
for (uint32_t i = 0; i < length; i++) {
char dns_prop_key[PROPERTY_VALUE_MAX];
NS_ConvertUTF16toUTF8 autoDns(aOptions.mDnses[i]);
PR_snprintf(dns_prop_key, sizeof dns_prop_key, "net.dns%d", i+1);
0

13554 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 781
void NetworkUtils::addRouteToLocalNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
uint32_t ip = inet_addr(GET_CHAR(mIp));
uint32_t prefix = atoi(GET_CHAR(mPrefix));
char* networkAddr = getNetworkAddr(ip, prefix);
char command[MAX_COMMAND_SIZE];
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route add local %s %s/%s",
GET_CHAR(mInternalIfname), networkAddr, GET_CHAR(mPrefix));
0

13555 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 602
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsCString key(GET_CHAR(mKey));
nsCString ssid(GET_CHAR(mSsid));
escapeQuote(key);
escapeQuote(ssid);
if (SDK_VERSION >= 19) {
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s \"%s\" broadcast 6 %s \"%s\"",
GET_CHAR(mIfname),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
0

13556 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1005
void NetworkUtils::removeDefaultRoute(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
char command[MAX_COMMAND_SIZE];
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
0

13557 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 615
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
nsCString ssid(GET_CHAR(mSsid));
nsCString key(GET_CHAR(mKey));
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION < 16) {
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s %s \"%s\" %s \"%s\" 6 0 8",
GET_CHAR(mIfname),
GET_CHAR(mWifictrlinterfacename),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
0

13558 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 608
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsCString key(GET_CHAR(mKey));
nsCString ssid(GET_CHAR(mSsid));
if (SDK_VERSION >= 16 && SDK_VERSION < 19) {
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s \"%s\" %s \"%s\"",
GET_CHAR(mIfname),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
0

13559 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1185
void NetworkUtils::addDefaultRouteToNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
char command[MAX_COMMAND_SIZE];
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route add %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
0

13560 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 602
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
nsCString key(GET_CHAR(mKey));
nsCString ssid(GET_CHAR(mSsid));
char command[MAX_COMMAND_SIZE];
escapeQuote(ssid);
escapeQuote(key);
if (SDK_VERSION >= 19) {
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s \"%s\" broadcast 6 %s \"%s\"",
GET_CHAR(mIfname),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
0

13570 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1050
void NetworkUtils::setInterfaceDns(CommandChain* aChain, ommandCallback aCallback,NetworkResultOptions& aResult)
int written;
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION >= 20) {
written = snprintf(command, sizeof command, "resolver setnetdns %d %s",
GET_FIELD(mNetId), GET_CHAR(mDomain));
uint32_t length = dnses.Length();
nsTArray<nsString>& dnses = GET_FIELD(mDnses);
for (uint32_t i = 0; i < length; i++) {
NS_ConvertUTF16toUTF8 autoDns(dnses[i]);
int ret = snprintf(command + written, sizeof(command) - written, " %s", autoDns.get());
1

13571 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1185
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
return addDefaultRouteToNetwork(aChain, aOriginalCallback, aResult);
void NetworkUtils::addDefaultRouteToNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;  }
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
char command[MAX_COMMAND_SIZE];
int type = getIpType(autoGateway.get());
snprintf(command, MAX_COMMAND_SIZE - 1, "network route add %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
1

13572 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1006
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
return removeDefaultRoute(aChain, aOriginalCallback, aResult);
void NetworkUtils::removeDefaultRoute(CommandChain* aChain, CommandCallback aCallback,NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;}
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
char command[MAX_COMMAND_SIZE];
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
1

13573 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 497
void NetworkUtils::doCommand(const char* aCommand, CommandChain* aChain, CommandCallback aCallback)
NetdCommand* netdCommand = new NetdCommand();
NU_DBG("Preparing to send \'%s\' command...", aCommand);
if (SDK_VERSION >= 16) {
snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "0 %s", aCommand);
1

13574 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1164
void NetworkUtils::modifyRouteOnInterface(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult,
bool aDoAdd)
nsCString gatewayOrEmpty;
nsCString ipOrSubnetIp = NS_ConvertUTF16toUTF8(GET_FIELD(mIp));
char command[MAX_COMMAND_SIZE];
const char* legacyOrEmpty = "legacy 0 ";
if (GET_FIELD(mGateway).IsEmpty()) {
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
nsCString NetworkUtils::getSubnetIp(const nsCString& aIp, int aPrefixLength)
return nsCString();
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
const char* action = aDoAdd ? "add" : "remove";
snprintf(command, MAX_COMMAND_SIZE - 1, "network route %s%s %d %s %s/%d%s",
legacyOrEmpty, action,
GET_FIELD(mNetId), GET_CHAR(mIfname), ipOrSubnetIp.get(),
GET_FIELD(mPrefixLength), gatewayOrEmpty.get());
1

13575 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1682
CommandResult NetworkUtils::setDNS(NetworkParams& aOptions)
uint32_t length = aOptions.mDnses.Length();
if (length > 0) {
for (uint32_t i = 0; i < length; i++) {
char dns_prop_key[PROPERTY_VALUE_MAX];
NS_ConvertUTF16toUTF8 autoDns(aOptions.mDnses[i]);
snprintf(dns_prop_key, sizeof dns_prop_key, "net.dns%d", i+1);
1

13576 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 781
void NetworkUtils::addRouteToLocalNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
uint32_t ip = inet_addr(GET_CHAR(mIp));
uint32_t prefix = atoi(GET_CHAR(mPrefix));
char* networkAddr = getNetworkAddr(ip, prefix);
char command[MAX_COMMAND_SIZE];
snprintf(command, MAX_COMMAND_SIZE - 1, "network route add local %s %s/%s",
GET_CHAR(mInternalIfname), networkAddr, GET_CHAR(mPrefix));
1

13577 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 602
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsCString key(GET_CHAR(mKey));
nsCString ssid(GET_CHAR(mSsid));
escapeQuote(key);
escapeQuote(ssid);
if (SDK_VERSION >= 19) {
snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s \"%s\" broadcast 6 %s \"%s\"",
GET_CHAR(mIfname),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
1

13578 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1005
void NetworkUtils::removeDefaultRoute(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
char command[MAX_COMMAND_SIZE];
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
1

13579 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 615
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
nsCString key(GET_CHAR(mKey));
nsCString ssid(GET_CHAR(mSsid));
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION < 16) {
snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s %s \"%s\" %s \"%s\" 6 0 8",
GET_CHAR(mIfname),
GET_CHAR(mWifictrlinterfacename),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
1

13580 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 608
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
nsCString key(GET_CHAR(mKey));
nsCString ssid(GET_CHAR(mSsid));
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION >= 16 && SDK_VERSION < 19) {
snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s \"%s\" %s \"%s\"",
GET_CHAR(mIfname),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
1

13581 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1185
void NetworkUtils::addDefaultRouteToNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
char command[MAX_COMMAND_SIZE];
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
snprintf(command, MAX_COMMAND_SIZE - 1, "network route add %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
1

13582 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 602
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
nsCString key(GET_CHAR(mKey));
nsCString ssid(GET_CHAR(mSsid));
char command[MAX_COMMAND_SIZE];
escapeQuote(ssid);
escapeQuote(key);
if (SDK_VERSION >= 19) {
snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s \"%s\" broadcast 6 %s \"%s\"",
GET_CHAR(mIfname),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
1

13790 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 499
void NetworkUtils::doCommand(const char* aCommand, CommandChain* aChain, CommandCallback aCallback)
aCommand = func(aCommand);
static char * func(const char * aCommand)
NU_DBG("Preparing to send \'%s\' command...", aCommand);
return aCommand;
aCommand = func(aCommand);
NetdCommand* netdCommand = new NetdCommand();
if (SDK_VERSION >= 16)
snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "0 %s", aCommand);
else
snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "%s", aCommand);
netdCommand->mSize = strlen((char*)netdCommand->mData) + 1;
gCommandQueue.AppendElement(QueueData(netdCommand, aChain, aCallback));
nextNetdCommand();
1

13791 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 499
void NetworkUtils::doCommand(const char* aCommand, CommandChain* aChain, CommandCallback aCallback)
aCommand = func(aCommand);
static char * func(const char * aCommand)
NU_DBG("Preparing to send \'%s\' command...", aCommand);
return aCommand;
aCommand = func(aCommand);
NetdCommand* netdCommand = new NetdCommand();
if (SDK_VERSION >= 16)
PR_snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "0 %s", aCommand);
else
PR_snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "%s", aCommand);
netdCommand->mSize = strlen((char*)netdCommand->mData) + 1;
gCommandQueue.AppendElement(QueueData(netdCommand, aChain, aCallback));
nextNetdCommand();
0

13792 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 499
void NetworkUtils::doCommand(const char* aCommand, CommandChain* aChain, CommandCallback aCallback)
aCommand = func(&aCommand);
static char * func(char * * ptr)
char * aCommand = *ptr;
NU_DBG("Preparing to send \'%s\' command...", aCommand);
return aCommand;
aCommand = func(&aCommand);
NetdCommand* netdCommand = new NetdCommand();
if (SDK_VERSION >= 16)
snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "0 %s", aCommand);
else
snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "%s", aCommand);
netdCommand->mSize = strlen((char*)netdCommand->mData) + 1;
gCommandQueue.AppendElement(QueueData(netdCommand, aChain, aCallback));
nextNetdCommand();
1

13793 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 499
void NetworkUtils::doCommand(const char* aCommand, CommandChain* aChain, CommandCallback aCallback)
aCommand = func(&aCommand);
static char * func(char * * ptr)
char * aCommand = *ptr;
NU_DBG("Preparing to send \'%s\' command...", aCommand);
return aCommand;
aCommand = func(&aCommand);
NetdCommand* netdCommand = new NetdCommand();
if (SDK_VERSION >= 16)
PR_snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "0 %s", aCommand);
else
PR_snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "%s", aCommand);
netdCommand->mSize = strlen((char*)netdCommand->mData) + 1;
gCommandQueue.AppendElement(QueueData(netdCommand, aChain, aCallback));
nextNetdCommand();
0

13794 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 499
void NetworkUtils::doCommand(const char* aCommand, CommandChain* aChain, CommandCallback aCallback)
void (*funcPtr) (char *) = badSource;
funcPtr(aCommand);
void badSource(char * aCommand)
NU_DBG("Preparing to send \'%s\' command...", aCommand);
NetdCommand* netdCommand = new NetdCommand();
if (SDK_VERSION >= 16)
snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "0 %s", aCommand);
else
snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "%s", aCommand);
netdCommand->mSize = strlen((char*)netdCommand->mData) + 1;
gCommandQueue.AppendElement(QueueData(netdCommand, aChain, aCallback));
nextNetdCommand();
1

13795 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 499
void NetworkUtils::doCommand(const char* aCommand, CommandChain* aChain, CommandCallback aCallback)
void (*funcPtr) (char *) = badSource;
funcPtr(aCommand);
void badSource(char * aCommand)
NU_DBG("Preparing to send \'%s\' command...", aCommand);
NetdCommand* netdCommand = new NetdCommand();
if (SDK_VERSION >= 16)
PR_snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "0 %s", aCommand);
else
PR_snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "%s", aCommand);
netdCommand->mSize = strlen((char*)netdCommand->mData) + 1;
gCommandQueue.AppendElement(QueueData(netdCommand, aChain, aCallback));
nextNetdCommand();
0

13796 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 499
void NetworkUtils::doCommand(const char* aCommand, CommandChain* aChain, CommandCallback aCallback)
NU_DBG("Preparing to send \'%s\' command...", aCommand);
char * dataCopy = aCommand;
char * aCommand = dataCopy;
NetdCommand* netdCommand = new NetdCommand();
if (SDK_VERSION >= 16)
snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "0 %s", aCommand);
else
snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "%s", aCommand);
netdCommand->mSize = strlen((char*)netdCommand->mData) + 1;
gCommandQueue.AppendElement(QueueData(netdCommand, aChain, aCallback));
nextNetdCommand();
1

13797 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 499
void NetworkUtils::doCommand(const char* aCommand, CommandChain* aChain, CommandCallback aCallback)
NU_DBG("Preparing to send \'%s\' command...", aCommand);
char * dataCopy = aCommand;
char * aCommand = dataCopy;
NetdCommand* netdCommand = new NetdCommand();
if (SDK_VERSION >= 16)
PR_snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "0 %s", aCommand);
else
PR_snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "%s", aCommand);
netdCommand->mSize = strlen((char*)netdCommand->mData) + 1;
gCommandQueue.AppendElement(QueueData(netdCommand, aChain, aCallback));
nextNetdCommand();
0

13798 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 499
void NetworkUtils::doCommand(const char* aCommand, CommandChain* aChain, CommandCallback aCallback)
NU_DBG("Preparing to send \'%s\' command...", aCommand);
NetdCommand* netdCommand = new NetdCommand();
size = MAX_COMMAND_SIZE - 1;
if (SDK_VERSION >= 16)
snprintf((char*)netdCommand->mData, size, "0 %s", aCommand);
else
snprintf((char*)netdCommand->mData, size, "%s", aCommand);
netdCommand->mSize = strlen((char*)netdCommand->mData) + 1;
gCommandQueue.AppendElement(QueueData(netdCommand, aChain, aCallback));
nextNetdCommand();
1

13799 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 499
void NetworkUtils::doCommand(const char* aCommand, CommandChain* aChain, CommandCallback aCallback)
NU_DBG("Preparing to send \'%s\' command...", aCommand);
NetdCommand* netdCommand = new NetdCommand();
size = MAX_COMMAND_SIZE - 1;
if (SDK_VERSION >= 16)
PR_snprintf((char*)netdCommand->mData, size, "0 %s", aCommand);
else
PR_snprintf((char*)netdCommand->mData, size, "%s", aCommand);
netdCommand->mSize = strlen((char*)netdCommand->mData) + 1;
gCommandQueue.AppendElement(QueueData(netdCommand, aChain, aCallback));
nextNetdCommand();
0

13800 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 499
void NetworkUtils::doCommand(const char* aCommand, CommandChain* aChain, CommandCallback aCallback)
NetdCommand* netdCommand = new NetdCommand();
NU_DBG("Preparing to send \'%s\' command...", aCommand);
if (SDK_VERSION >= 16)
snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "0 %s", aCommand);
else
snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "%s", aCommand);
netdCommand->mSize = strlen((char*)netdCommand->mData) + 1;
gCommandQueue.AppendElement(QueueData(netdCommand, aChain, aCallback));
nextNetdCommand();
1

13801 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 499
void NetworkUtils::doCommand(const char* aCommand, CommandChain* aChain, CommandCallback aCallback)
NetdCommand* netdCommand = new NetdCommand();
NU_DBG("Preparing to send \'%s\' command...", aCommand);
if (SDK_VERSION >= 16)
PR_snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "0 %s", aCommand);
else
PR_snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "%s", aCommand);
netdCommand->mSize = strlen((char*)netdCommand->mData) + 1;
gCommandQueue.AppendElement(QueueData(netdCommand, aChain, aCallback));
nextNetdCommand();
0

13802 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 499
void NetworkUtils::doCommand(const char* aCommand, CommandChain* aChain, CommandCallback aCallback)
char * dataArray[5];
dataArray[2] =aCommand;
aCommand = badSource(dataArray);
void badSource(char *dataArray[])
char * aCommand = dataArray[2];
NU_DBG("Preparing to send \'%s\' command...", aCommand);
return aCommand;
NetdCommand* netdCommand = new NetdCommand();
if (SDK_VERSION >= 16)
snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "0 %s", aCommand);
else
snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "%s", aCommand);
netdCommand->mSize = strlen((char*)netdCommand->mData) + 1;
gCommandQueue.AppendElement(QueueData(netdCommand, aChain, aCallback));
nextNetdCommand();
1

13803 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 499
void NetworkUtils::doCommand(const char* aCommand, CommandChain* aChain, CommandCallback aCallback)
char * dataArray[5];
dataArray[2] =aCommand;
aCommand = badSource(dataArray);
void badSource(char *dataArray[])
char * aCommand = dataArray[2];
NU_DBG("Preparing to send \'%s\' command...", aCommand);
return aCommand;
NetdCommand* netdCommand = new NetdCommand();
if (SDK_VERSION >= 16)
PR_snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "0 %s", aCommand);
else
PR_snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "%s", aCommand);
netdCommand->mSize = strlen((char*)netdCommand->mData) + 1;
gCommandQueue.AppendElement(QueueData(netdCommand, aChain, aCallback));
nextNetdCommand();
0

13804 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 499
void NetworkUtils::doCommand(const char* aCommand, CommandChain* aChain, CommandCallback aCallback)
NU_DBG("Preparing to send \'%s\' command...", aCommand);
unionType myUnion;
myUnion.unionFirst = aCommand;
char * aCommand = myUnion.unionSecond;
NetdCommand* netdCommand = new NetdCommand();
if (SDK_VERSION >= 16)
snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "0 %s", aCommand);
else
snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "%s", aCommand);
netdCommand->mSize = strlen((char*)netdCommand->mData) + 1;
gCommandQueue.AppendElement(QueueData(netdCommand, aChain, aCallback));
nextNetdCommand();
1

13805 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 499
void NetworkUtils::doCommand(const char* aCommand, CommandChain* aChain, CommandCallback aCallback)
NU_DBG("Preparing to send \'%s\' command...", aCommand);
unionType myUnion;
myUnion.unionFirst = aCommand;
char * aCommand = myUnion.unionSecond;
NetdCommand* netdCommand = new NetdCommand();
if (SDK_VERSION >= 16)
PR_snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "0 %s", aCommand);
else
PR_snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "%s", aCommand);
netdCommand->mSize = strlen((char*)netdCommand->mData) + 1;
gCommandQueue.AppendElement(QueueData(netdCommand, aChain, aCallback));
nextNetdCommand();
0

13806 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 499
void NetworkUtils::doCommand(const char* aCommand, CommandChain* aChain, CommandCallback aCallback)
structType myStruct;
myStruct.structFirst = aCommand;
aCommand = badSource(myStruct);
void badSource(structType myStruct)
char * aCommand = myStruct.structFirst;
NU_DBG("Preparing to send \'%s\' command...", aCommand);
return aCommand;
NetdCommand* netdCommand = new NetdCommand();
if (SDK_VERSION >= 16)
snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "0 %s", aCommand);
else
snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "%s", aCommand);
netdCommand->mSize = strlen((char*)netdCommand->mData) + 1;
gCommandQueue.AppendElement(QueueData(netdCommand, aChain, aCallback));
nextNetdCommand();
1

13807 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 499
void NetworkUtils::doCommand(const char* aCommand, CommandChain* aChain, CommandCallback aCallback)
structType myStruct;
myStruct.structFirst = aCommand;
aCommand = badSource(myStruct);
void badSource(structType myStruct)
char * aCommand = myStruct.structFirst;
NU_DBG("Preparing to send \'%s\' command...", aCommand);
return aCommand;
NetdCommand* netdCommand = new NetdCommand();
if (SDK_VERSION >= 16)
PR_snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "0 %s", aCommand);
else
PR_snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "%s", aCommand);
netdCommand->mSize = strlen((char*)netdCommand->mData) + 1;
gCommandQueue.AppendElement(QueueData(netdCommand, aChain, aCallback));
nextNetdCommand();
0

13808 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1040
char command[MAX_COMMAND_SIZE];
command = func(command);
static char * func(const char * command)
if (SDK_VERSION >= 20)
written = snprintf(command, sizeof command, "resolver setnetdns %d %s",GET_FIELD(mNetId), GET_CHAR(mDomain));
else
written = snprintf(command, sizeof command, "resolver setifdns %s %s",GET_CHAR(mIfname), GET_CHAR(mDomain));
return command;
command = func(command);
nsTArray<nsString>& dnses = GET_FIELD(mDnses);
uint32_t length = dnses.Length();
for (uint32_t i = 0; i < length; i++)
NS_ConvertUTF16toUTF8 autoDns(dnses[i]);
int ret = snprintf(command + written, sizeof(command) - written, " %s", autoDns.get());
1

13809 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1040
char command[MAX_COMMAND_SIZE];
command = func(command);
static char * func(const char * command)
if (SDK_VERSION >= 20)
written = PR_snprintf(command, sizeof command, "resolver setnetdns %d %s",GET_FIELD(mNetId), GET_CHAR(mDomain));
else
written = PR_snprintf(command, sizeof command, "resolver setifdns %s %s",GET_CHAR(mIfname), GET_CHAR(mDomain));
return command;
command = func(command);
nsTArray<nsString>& dnses = GET_FIELD(mDnses);
uint32_t length = dnses.Length();
for (uint32_t i = 0; i < length; i++)
NS_ConvertUTF16toUTF8 autoDns(dnses[i]);
int ret = PR_snprintf(command + written, sizeof(command) - written, " %s", autoDns.get());
0

13810 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1040
char command[MAX_COMMAND_SIZE];
command = func(&command);
static char * func(char * * ptr)
char * command = *ptr;
if (SDK_VERSION >= 20)
written = snprintf(command, sizeof command, "resolver setnetdns %d %s",GET_FIELD(mNetId), GET_CHAR(mDomain));
else
written = snprintf(command, sizeof command, "resolver setifdns %s %s",GET_CHAR(mIfname), GET_CHAR(mDomain));
return command;
command = func(&command);
nsTArray<nsString>& dnses = GET_FIELD(mDnses);
uint32_t length = dnses.Length();
for (uint32_t i = 0; i < length; i++)
NS_ConvertUTF16toUTF8 autoDns(dnses[i]);
int ret = snprintf(command + written, sizeof(command) - written, " %s", autoDns.get());
1

13811 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1040
char command[MAX_COMMAND_SIZE];
command = func(&command);
static char * func(char * * ptr)
char * command = *ptr;
if (SDK_VERSION >= 20)
written = PR_snprintf(command, sizeof command, "resolver setnetdns %d %s",GET_FIELD(mNetId), GET_CHAR(mDomain));
else
written = PR_snprintf(command, sizeof command, "resolver setifdns %s %s",GET_CHAR(mIfname), GET_CHAR(mDomain));
return command;
command = func(&command);
nsTArray<nsString>& dnses = GET_FIELD(mDnses);
uint32_t length = dnses.Length();
for (uint32_t i = 0; i < length; i++)
NS_ConvertUTF16toUTF8 autoDns(dnses[i]);
int ret = PR_snprintf(command + written, sizeof(command) - written, " %s", autoDns.get());
0

13812 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1040
char command[MAX_COMMAND_SIZE];
void (*funcPtr) (char *) = badSource;
funcPtr(command);
void badSource(char * command)
if (SDK_VERSION >= 20)
written = snprintf(command, sizeof command, "resolver setnetdns %d %s",GET_FIELD(mNetId), GET_CHAR(mDomain));
else
written = snprintf(command, sizeof command, "resolver setifdns %s %s",GET_CHAR(mIfname), GET_CHAR(mDomain));
nsTArray<nsString>& dnses = GET_FIELD(mDnses);
uint32_t length = dnses.Length();
for (uint32_t i = 0; i < length; i++)
NS_ConvertUTF16toUTF8 autoDns(dnses[i]);
int ret = snprintf(command + written, sizeof(command) - written, " %s", autoDns.get());
1

13813 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1040
char command[MAX_COMMAND_SIZE];
void (*funcPtr) (char *) = badSource;
funcPtr(command);
void badSource(char * command)
if (SDK_VERSION >= 20)
written = PR_snprintf(command, sizeof command, "resolver setnetdns %d %s",GET_FIELD(mNetId), GET_CHAR(mDomain));
else
written = PR_snprintf(command, sizeof command, "resolver setifdns %s %s",GET_CHAR(mIfname), GET_CHAR(mDomain));
nsTArray<nsString>& dnses = GET_FIELD(mDnses);
uint32_t length = dnses.Length();
for (uint32_t i = 0; i < length; i++)
NS_ConvertUTF16toUTF8 autoDns(dnses[i]);
int ret = PR_snprintf(command + written, sizeof(command) - written, " %s", autoDns.get());
0

13814 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1040
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION >= 20)
written = snprintf(command, sizeof command, "resolver setnetdns %d %s",GET_FIELD(mNetId), GET_CHAR(mDomain));
else
written = snprintf(command, sizeof command, "resolver setifdns %s %s",GET_CHAR(mIfname), GET_CHAR(mDomain));
char * dataCopy = command;
char * command = dataCopy;
nsTArray<nsString>& dnses = GET_FIELD(mDnses);
uint32_t length = dnses.Length();
for (uint32_t i = 0; i < length; i++)
NS_ConvertUTF16toUTF8 autoDns(dnses[i]);
int ret = snprintf(command + written, sizeof(command) - written, " %s", autoDns.get());
1

13815 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1040
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION >= 20)
written = PR_snprintf(command, sizeof command, "resolver setnetdns %d %s",GET_FIELD(mNetId), GET_CHAR(mDomain));
else
written = PR_snprintf(command, sizeof command, "resolver setifdns %s %s",GET_CHAR(mIfname), GET_CHAR(mDomain));
char * dataCopy = command;
char * command = dataCopy;
nsTArray<nsString>& dnses = GET_FIELD(mDnses);
uint32_t length = dnses.Length();
for (uint32_t i = 0; i < length; i++)
NS_ConvertUTF16toUTF8 autoDns(dnses[i]);
int ret = PR_snprintf(command + written, sizeof(command) - written, " %s", autoDns.get());
0

13816 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1040
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION >= 20)
written = snprintf(command, sizeof command, "resolver setnetdns %d %s",GET_FIELD(mNetId), GET_CHAR(mDomain));
else
written = snprintf(command, sizeof command, "resolver setifdns %s %s",GET_CHAR(mIfname), GET_CHAR(mDomain));
nsTArray<nsString>& dnses = GET_FIELD(mDnses);
uint32_t length = dnses.Length();
for (uint32_t i = 0; i < length; i++)
NS_ConvertUTF16toUTF8 autoDns(dnses[i]);
size = sizeof(command) - written;
int ret = snprintf(command + written, size, " %s", autoDns.get());
1

13817 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1040
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION >= 20)
written = PR_snprintf(command, sizeof command, "resolver setnetdns %d %s",GET_FIELD(mNetId), GET_CHAR(mDomain));
else
written = PR_snprintf(command, sizeof command, "resolver setifdns %s %s",GET_CHAR(mIfname), GET_CHAR(mDomain));
nsTArray<nsString>& dnses = GET_FIELD(mDnses);
uint32_t length = dnses.Length();
for (uint32_t i = 0; i < length; i++)
NS_ConvertUTF16toUTF8 autoDns(dnses[i]);
size = sizeof(command) - written;
int ret = PR_snprintf(command + written, size, " %s", autoDns.get());
0

13818 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1040
char command[MAX_COMMAND_SIZE];
char * dataArray[5];
dataArray[2] = command;
command = badSource(dataArray);
void badSource(chae * dataArray[])
char * command = dataArray[2];
if (SDK_VERSION >= 20)
written = snprintf(command, sizeof command, "resolver setnetdns %d %s",GET_FIELD(mNetId), GET_CHAR(mDomain));
else
written = snprintf(command, sizeof command, "resolver setifdns %s %s",GET_CHAR(mIfname), GET_CHAR(mDomain));
return command;
nsTArray<nsString>& dnses = GET_FIELD(mDnses);
uint32_t length = dnses.Length();
for (uint32_t i = 0; i < length; i++)
NS_ConvertUTF16toUTF8 autoDns(dnses[i]);
int ret = snprintf(command + written, sizeof(command) - written, " %s", autoDns.get());
1

13819 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1040
char command[MAX_COMMAND_SIZE];
char * dataArray[5];
dataArray[2] = command;
command = badSource(dataArray);
void badSource(chae * dataArray[])
char * command = dataArray[2];
if (SDK_VERSION >= 20)
written = PR_snprintf(command, sizeof command, "resolver setnetdns %d %s",GET_FIELD(mNetId), GET_CHAR(mDomain));
else
written = PR_snprintf(command, sizeof command, "resolver setifdns %s %s",GET_CHAR(mIfname), GET_CHAR(mDomain));
return command;
nsTArray<nsString>& dnses = GET_FIELD(mDnses);
uint32_t length = dnses.Length();
for (uint32_t i = 0; i < length; i++)
NS_ConvertUTF16toUTF8 autoDns(dnses[i]);
int ret = PR_snprintf(command + written, sizeof(command) - written, " %s", autoDns.get());
0

13820 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1040
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION >= 20)
written = snprintf(command, sizeof command, "resolver setnetdns %d %s",GET_FIELD(mNetId), GET_CHAR(mDomain));
else
written = snprintf(command, sizeof command, "resolver setifdns %s %s",GET_CHAR(mIfname), GET_CHAR(mDomain));
unionType myUnion;
myUnion.unionFirst = command;
char * command = myUnion.unionSecond;
nsTArray<nsString>& dnses = GET_FIELD(mDnses);
uint32_t length = dnses.Length();
for (uint32_t i = 0; i < length; i++)
NS_ConvertUTF16toUTF8 autoDns(dnses[i]);
int ret = snprintf(command + written, sizeof(command) - written, " %s", autoDns.get());
1

13821 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1040
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION >= 20)
written = PR_snprintf(command, sizeof command, "resolver setnetdns %d %s",GET_FIELD(mNetId), GET_CHAR(mDomain));
else
written = PR_snprintf(command, sizeof command, "resolver setifdns %s %s",GET_CHAR(mIfname), GET_CHAR(mDomain));
unionType myUnion;
myUnion.unionFirst = command;
char * command = myUnion.unionSecond;
nsTArray<nsString>& dnses = GET_FIELD(mDnses);
uint32_t length = dnses.Length();
for (uint32_t i = 0; i < length; i++)
NS_ConvertUTF16toUTF8 autoDns(dnses[i]);
int ret = PR_snprintf(command + written, sizeof(command) - written, " %s", autoDns.get());
0

13822 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1040
char command[MAX_COMMAND_SIZE];
structType myStruct;
myStruct.structFirst = command;
command = badSource(myStruct);
void badSource(structType myStruct)
char * command = myStruct.structFirst;
if (SDK_VERSION >= 20)
written = snprintf(command, sizeof command, "resolver setnetdns %d %s",GET_FIELD(mNetId), GET_CHAR(mDomain));
else
written = snprintf(command, sizeof command, "resolver setifdns %s %s",GET_CHAR(mIfname), GET_CHAR(mDomain));
return command;
nsTArray<nsString>& dnses = GET_FIELD(mDnses);
uint32_t length = dnses.Length();
for (uint32_t i = 0; i < length; i++)
NS_ConvertUTF16toUTF8 autoDns(dnses[i]);
int ret = snprintf(command + written, sizeof(command) - written, " %s", autoDns.get());
1

13823 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1040
char command[MAX_COMMAND_SIZE];
structType myStruct;
myStruct.structFirst = command;
command = badSource(myStruct);
void badSource(structType myStruct)
char * command = myStruct.structFirst;
if (SDK_VERSION >= 20)
written = PR_snprintf(command, sizeof command, "resolver setnetdns %d %s",GET_FIELD(mNetId), GET_CHAR(mDomain));
else
written = PR_snprintf(command, sizeof command, "resolver setifdns %s %s",GET_CHAR(mIfname), GET_CHAR(mDomain));
return command;
nsTArray<nsString>& dnses = GET_FIELD(mDnses);
uint32_t length = dnses.Length();
for (uint32_t i = 0; i < length; i++)
NS_ConvertUTF16toUTF8 autoDns(dnses[i]);
int ret = PR_snprintf(command + written, sizeof(command) - written, " %s", autoDns.get());
0

13824 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1165
void NetworkUtils::removeRouteFromInterface(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult)
modifyRouteOnInterface(aChain, aCallback, aResult, false);
void NetworkUtils::modifyRouteOnInterface(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult,bool aDoAdd)
char command[MAX_COMMAND_SIZE];
nsCString ipOrSubnetIp = NS_ConvertUTF16toUTF8(GET_FIELD(mIp));
nsCString gatewayOrEmpty;
const char* legacyOrEmpty = "legacy 0 ";
legacyOrEmpty = func(legacyOrEmpty);
static char * func(const char * legacyOrEmpty)
if (GET_FIELD(mGateway).IsEmpty()) {
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
legacyOrEmpty = "";
else
gatewayOrEmpty = nsCString(" ") + NS_ConvertUTF16toUTF8(GET_FIELD(mGateway));
return legacyOrEmpty;
legacyOrEmpty = func(legacyOrEmpty);
const char* action = aDoAdd ? "add" : "remove";
snprintf(command, MAX_COMMAND_SIZE - 1, "network route %s%s %d %s %s/%d%s",
legacyOrEmpty, action,
GET_FIELD(mNetId), GET_CHAR(mIfname), ipOrSubnetIp.get(),
GET_FIELD(mPrefixLength), gatewayOrEmpty.get());
1

13825 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1165
void NetworkUtils::removeRouteFromInterface(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult)
modifyRouteOnInterface(aChain, aCallback, aResult, false);
void NetworkUtils::modifyRouteOnInterface(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult,bool aDoAdd)
char command[MAX_COMMAND_SIZE];
nsCString ipOrSubnetIp = NS_ConvertUTF16toUTF8(GET_FIELD(mIp));
nsCString gatewayOrEmpty;
const char* legacyOrEmpty = "legacy 0 ";
legacyOrEmpty = func(legacyOrEmpty);
static char * func(const char * legacyOrEmpty)
if (GET_FIELD(mGateway).IsEmpty()) {
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
legacyOrEmpty = "";
else
gatewayOrEmpty = nsCString(" ") + NS_ConvertUTF16toUTF8(GET_FIELD(mGateway));
return legacyOrEmpty;
legacyOrEmpty = func(legacyOrEmpty);
const char* action = aDoAdd ? "add" : "remove";
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route %s%s %d %s %s/%d%s",
legacyOrEmpty, action,
GET_FIELD(mNetId), GET_CHAR(mIfname), ipOrSubnetIp.get(),
GET_FIELD(mPrefixLength), gatewayOrEmpty.get());
0

13826 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1165
void NetworkUtils::removeRouteFromInterface(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult)
modifyRouteOnInterface(aChain, aCallback, aResult, false);
void NetworkUtils::modifyRouteOnInterface(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult,bool aDoAdd)
char command[MAX_COMMAND_SIZE];
nsCString ipOrSubnetIp = NS_ConvertUTF16toUTF8(GET_FIELD(mIp));
nsCString gatewayOrEmpty;
const char* legacyOrEmpty = "legacy 0 ";
legacyOrEmpty = func(&legacyOrEmpty);
static char * func(char * *ptr)
char * legacyOrEmpty = *ptr;
if (GET_FIELD(mGateway).IsEmpty()) {
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
legacyOrEmpty = "";
else
gatewayOrEmpty = nsCString(" ") + NS_ConvertUTF16toUTF8(GET_FIELD(mGateway));
return legacyOrEmpty;
legacyOrEmpty = func(&legacyOrEmpty);
const char* action = aDoAdd ? "add" : "remove";
snprintf(command, MAX_COMMAND_SIZE - 1, "network route %s%s %d %s %s/%d%s",
legacyOrEmpty, action,
GET_FIELD(mNetId), GET_CHAR(mIfname), ipOrSubnetIp.get(),
GET_FIELD(mPrefixLength), gatewayOrEmpty.get());
1

13827 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1165
void NetworkUtils::removeRouteFromInterface(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult)
modifyRouteOnInterface(aChain, aCallback, aResult, false);
void NetworkUtils::modifyRouteOnInterface(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult,bool aDoAdd)
char command[MAX_COMMAND_SIZE];
nsCString ipOrSubnetIp = NS_ConvertUTF16toUTF8(GET_FIELD(mIp));
nsCString gatewayOrEmpty;
const char* legacyOrEmpty = "legacy 0 ";
legacyOrEmpty = func(&legacyOrEmpty);
static char * func(char * *ptr)
char * legacyOrEmpty = *ptr;
if (GET_FIELD(mGateway).IsEmpty()) {
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
legacyOrEmpty = "";
else
gatewayOrEmpty = nsCString(" ") + NS_ConvertUTF16toUTF8(GET_FIELD(mGateway));
return legacyOrEmpty;
legacyOrEmpty = func(&legacyOrEmpty);
const char* action = aDoAdd ? "add" : "remove";
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route %s%s %d %s %s/%d%s",
legacyOrEmpty, action,
GET_FIELD(mNetId), GET_CHAR(mIfname), ipOrSubnetIp.get(),
GET_FIELD(mPrefixLength), gatewayOrEmpty.get());
0

13828 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1165
void NetworkUtils::removeRouteFromInterface(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult)
modifyRouteOnInterface(aChain, aCallback, aResult, false);
void NetworkUtils::modifyRouteOnInterface(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult,bool aDoAdd)
char command[MAX_COMMAND_SIZE];
nsCString ipOrSubnetIp = NS_ConvertUTF16toUTF8(GET_FIELD(mIp));
nsCString gatewayOrEmpty;
const char* legacyOrEmpty = "legacy 0 ";
void (*funcPtr) (char *) = badSource;
funcPtr(legacyOrEmpty)
void badSource(char * legacyOrEmpty)
if (GET_FIELD(mGateway).IsEmpty()) {
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
legacyOrEmpty = "";
else
gatewayOrEmpty = nsCString(" ") + NS_ConvertUTF16toUTF8(GET_FIELD(mGateway));
const char* action = aDoAdd ? "add" : "remove";
snprintf(command, MAX_COMMAND_SIZE - 1, "network route %s%s %d %s %s/%d%s",
legacyOrEmpty, action,
GET_FIELD(mNetId), GET_CHAR(mIfname), ipOrSubnetIp.get(),
GET_FIELD(mPrefixLength), gatewayOrEmpty.get());
1

13829 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1165
void NetworkUtils::removeRouteFromInterface(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult)
modifyRouteOnInterface(aChain, aCallback, aResult, false);
void NetworkUtils::modifyRouteOnInterface(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult,bool aDoAdd)
char command[MAX_COMMAND_SIZE];
nsCString ipOrSubnetIp = NS_ConvertUTF16toUTF8(GET_FIELD(mIp));
nsCString gatewayOrEmpty;
const char* legacyOrEmpty = "legacy 0 ";
void (*funcPtr) (char *) = badSource;
funcPtr(legacyOrEmpty)
void badSource(char * legacyOrEmpty)
if (GET_FIELD(mGateway).IsEmpty()) {
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
legacyOrEmpty = "";
else
gatewayOrEmpty = nsCString(" ") + NS_ConvertUTF16toUTF8(GET_FIELD(mGateway));
const char* action = aDoAdd ? "add" : "remove";
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route %s%s %d %s %s/%d%s",
legacyOrEmpty, action,
GET_FIELD(mNetId), GET_CHAR(mIfname), ipOrSubnetIp.get(),
GET_FIELD(mPrefixLength), gatewayOrEmpty.get());
0

13830 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1165
void NetworkUtils::removeRouteFromInterface(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult)
modifyRouteOnInterface(aChain, aCallback, aResult, false);
void NetworkUtils::modifyRouteOnInterface(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult,bool aDoAdd)
char command[MAX_COMMAND_SIZE];
nsCString ipOrSubnetIp = NS_ConvertUTF16toUTF8(GET_FIELD(mIp));
nsCString gatewayOrEmpty;
const char* legacyOrEmpty = "legacy 0 ";
if (GET_FIELD(mGateway).IsEmpty()) {
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
legacyOrEmpty = "";
else
gatewayOrEmpty = nsCString(" ") + NS_ConvertUTF16toUTF8(GET_FIELD(mGateway));
char * dataCopy = legacyOrEmpty;
char * legacyOrEmpty = dataCopy;
const char* action = aDoAdd ? "add" : "remove";
snprintf(command, MAX_COMMAND_SIZE - 1, "network route %s%s %d %s %s/%d%s",
legacyOrEmpty, action,
GET_FIELD(mNetId), GET_CHAR(mIfname), ipOrSubnetIp.get(),
GET_FIELD(mPrefixLength), gatewayOrEmpty.get());
1

13831 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1165
void NetworkUtils::removeRouteFromInterface(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult)
modifyRouteOnInterface(aChain, aCallback, aResult, false);
void NetworkUtils::modifyRouteOnInterface(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult,bool aDoAdd)
char command[MAX_COMMAND_SIZE];
nsCString ipOrSubnetIp = NS_ConvertUTF16toUTF8(GET_FIELD(mIp));
nsCString gatewayOrEmpty;
const char* legacyOrEmpty = "legacy 0 ";
if (GET_FIELD(mGateway).IsEmpty()) {
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
legacyOrEmpty = "";
else
gatewayOrEmpty = nsCString(" ") + NS_ConvertUTF16toUTF8(GET_FIELD(mGateway));
char * dataCopy = legacyOrEmpty;
char * legacyOrEmpty = dataCopy;
const char* action = aDoAdd ? "add" : "remove";
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route %s%s %d %s %s/%d%s",
legacyOrEmpty, action,
GET_FIELD(mNetId), GET_CHAR(mIfname), ipOrSubnetIp.get(),
GET_FIELD(mPrefixLength), gatewayOrEmpty.get());
0

13832 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1165
void NetworkUtils::removeRouteFromInterface(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult)
modifyRouteOnInterface(aChain, aCallback, aResult, false);
void NetworkUtils::modifyRouteOnInterface(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult,bool aDoAdd)
char command[MAX_COMMAND_SIZE];
nsCString ipOrSubnetIp = NS_ConvertUTF16toUTF8(GET_FIELD(mIp));
nsCString gatewayOrEmpty;
const char* legacyOrEmpty = "legacy 0 ";
if (GET_FIELD(mGateway).IsEmpty()) {
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
legacyOrEmpty = "";
else
gatewayOrEmpty = nsCString(" ") + NS_ConvertUTF16toUTF8(GET_FIELD(mGateway));
const char* action = aDoAdd ? "add" : "remove";
size = MAX_COMMAND_SIZE - 1;
snprintf(command, size, "network route %s%s %d %s %s/%d%s",
legacyOrEmpty, action,
GET_FIELD(mNetId), GET_CHAR(mIfname), ipOrSubnetIp.get(),
GET_FIELD(mPrefixLength), gatewayOrEmpty.get());
1

13833 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1165
void NetworkUtils::removeRouteFromInterface(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult)
modifyRouteOnInterface(aChain, aCallback, aResult, false);
void NetworkUtils::modifyRouteOnInterface(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult,bool aDoAdd)
char command[MAX_COMMAND_SIZE];
nsCString ipOrSubnetIp = NS_ConvertUTF16toUTF8(GET_FIELD(mIp));
nsCString gatewayOrEmpty;
const char* legacyOrEmpty = "legacy 0 ";
if (GET_FIELD(mGateway).IsEmpty()) {
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
legacyOrEmpty = "";
else
gatewayOrEmpty = nsCString(" ") + NS_ConvertUTF16toUTF8(GET_FIELD(mGateway));
const char* action = aDoAdd ? "add" : "remove";
size = MAX_COMMAND_SIZE - 1;
PR_snprintf(command, size, "network route %s%s %d %s %s/%d%s",
legacyOrEmpty, action,
GET_FIELD(mNetId), GET_CHAR(mIfname), ipOrSubnetIp.get(),
GET_FIELD(mPrefixLength), gatewayOrEmpty.get());
0

13834 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1165
void NetworkUtils::removeRouteFromInterface(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult)
modifyRouteOnInterface(aChain, aCallback, aResult, false);
void NetworkUtils::modifyRouteOnInterface(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult,bool aDoAdd)
char command[MAX_COMMAND_SIZE];
nsCString gatewayOrEmpty;
nsCString ipOrSubnetIp = NS_ConvertUTF16toUTF8(GET_FIELD(mIp));
const char* legacyOrEmpty = "legacy 0 ";
if (GET_FIELD(mGateway).IsEmpty()) {
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
legacyOrEmpty = "";
else
gatewayOrEmpty = nsCString(" ") + NS_ConvertUTF16toUTF8(GET_FIELD(mGateway));
const char* action = aDoAdd ? "add" : "remove";
snprintf(command, MAX_COMMAND_SIZE - 1, "network route %s%s %d %s %s/%d%s",
legacyOrEmpty, action,
GET_FIELD(mNetId), GET_CHAR(mIfname), ipOrSubnetIp.get(),
GET_FIELD(mPrefixLength), gatewayOrEmpty.get());
1

13835 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1165
void NetworkUtils::removeRouteFromInterface(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult)
modifyRouteOnInterface(aChain, aCallback, aResult, false);
void NetworkUtils::modifyRouteOnInterface(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult,bool aDoAdd)
char command[MAX_COMMAND_SIZE];
nsCString gatewayOrEmpty;
nsCString ipOrSubnetIp = NS_ConvertUTF16toUTF8(GET_FIELD(mIp));
const char* legacyOrEmpty = "legacy 0 ";
if (GET_FIELD(mGateway).IsEmpty()) {
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
legacyOrEmpty = "";
else
gatewayOrEmpty = nsCString(" ") + NS_ConvertUTF16toUTF8(GET_FIELD(mGateway));
const char* action = aDoAdd ? "add" : "remove";
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route %s%s %d %s %s/%d%s",
legacyOrEmpty, action,
GET_FIELD(mNetId), GET_CHAR(mIfname), ipOrSubnetIp.get(),
GET_FIELD(mPrefixLength), gatewayOrEmpty.get());
0

13836 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1165
void NetworkUtils::removeRouteFromInterface(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult)
modifyRouteOnInterface(aChain, aCallback, aResult, false);
void NetworkUtils::modifyRouteOnInterface(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult,bool aDoAdd)
char command[MAX_COMMAND_SIZE];
nsCString ipOrSubnetIp = NS_ConvertUTF16toUTF8(GET_FIELD(mIp));
nsCString gatewayOrEmpty;
const char* legacyOrEmpty = "legacy 0 ";
char * dataArray[5];
dataArray[2] = legacyOrEmpty;
legacyOrEmpty = badSource(dataArray);
void badSource(char * dataArray[])
char * legacyOrEmpty = dataArray[2];
if (GET_FIELD(mGateway).IsEmpty()) {
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
legacyOrEmpty = "";
else
gatewayOrEmpty = nsCString(" ") + NS_ConvertUTF16toUTF8(GET_FIELD(mGateway));
return legacyOrEmpty;
const char* action = aDoAdd ? "add" : "remove";
snprintf(command, MAX_COMMAND_SIZE - 1, "network route %s%s %d %s %s/%d%s",
legacyOrEmpty, action,
GET_FIELD(mNetId), GET_CHAR(mIfname), ipOrSubnetIp.get(),
GET_FIELD(mPrefixLength), gatewayOrEmpty.get());
1

13837 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1165
void NetworkUtils::removeRouteFromInterface(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult)
modifyRouteOnInterface(aChain, aCallback, aResult, false);
void NetworkUtils::modifyRouteOnInterface(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult,bool aDoAdd)
char command[MAX_COMMAND_SIZE];
nsCString ipOrSubnetIp = NS_ConvertUTF16toUTF8(GET_FIELD(mIp));
nsCString gatewayOrEmpty;
const char* legacyOrEmpty = "legacy 0 ";
char * dataArray[5];
dataArray[2] = legacyOrEmpty;
legacyOrEmpty = badSource(dataArray);
void badSource(char * dataArray[])
char * legacyOrEmpty = dataArray[2];
if (GET_FIELD(mGateway).IsEmpty()) {
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
legacyOrEmpty = "";
else
gatewayOrEmpty = nsCString(" ") + NS_ConvertUTF16toUTF8(GET_FIELD(mGateway));
return legacyOrEmpty;
const char* action = aDoAdd ? "add" : "remove";
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route %s%s %d %s %s/%d%s",
legacyOrEmpty, action,
GET_FIELD(mNetId), GET_CHAR(mIfname), ipOrSubnetIp.get(),
GET_FIELD(mPrefixLength), gatewayOrEmpty.get());
0

13838 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1165
void NetworkUtils::removeRouteFromInterface(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult)
modifyRouteOnInterface(aChain, aCallback, aResult, false);
void NetworkUtils::modifyRouteOnInterface(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult,bool aDoAdd)
char command[MAX_COMMAND_SIZE];
nsCString ipOrSubnetIp = NS_ConvertUTF16toUTF8(GET_FIELD(mIp));
nsCString gatewayOrEmpty;
const char* legacyOrEmpty = "legacy 0 ";
if (GET_FIELD(mGateway).IsEmpty()) {
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
legacyOrEmpty = "";
else
gatewayOrEmpty = nsCString(" ") + NS_ConvertUTF16toUTF8(GET_FIELD(mGateway));
unionType myUnion;
myUnion.unionFirst = legacyOrEmpty;
char * legacyOrEmpty = myUnion.unionSecond;
const char* action = aDoAdd ? "add" : "remove";
snprintf(command, MAX_COMMAND_SIZE - 1, "network route %s%s %d %s %s/%d%s",
legacyOrEmpty, action,
GET_FIELD(mNetId), GET_CHAR(mIfname), ipOrSubnetIp.get(),
GET_FIELD(mPrefixLength), gatewayOrEmpty.get());
1

13839 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1165
void NetworkUtils::removeRouteFromInterface(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult)
modifyRouteOnInterface(aChain, aCallback, aResult, false);
void NetworkUtils::modifyRouteOnInterface(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult,bool aDoAdd)
char command[MAX_COMMAND_SIZE];
nsCString ipOrSubnetIp = NS_ConvertUTF16toUTF8(GET_FIELD(mIp));
nsCString gatewayOrEmpty;
const char* legacyOrEmpty = "legacy 0 ";
if (GET_FIELD(mGateway).IsEmpty()) {
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
legacyOrEmpty = "";
else
gatewayOrEmpty = nsCString(" ") + NS_ConvertUTF16toUTF8(GET_FIELD(mGateway));
unionType myUnion;
myUnion.unionFirst = legacyOrEmpty;
char * legacyOrEmpty = myUnion.unionSecond;
const char* action = aDoAdd ? "add" : "remove";
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route %s%s %d %s %s/%d%s",
legacyOrEmpty, action,
GET_FIELD(mNetId), GET_CHAR(mIfname), ipOrSubnetIp.get(),
GET_FIELD(mPrefixLength), gatewayOrEmpty.get());
0

13840 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1165
void NetworkUtils::removeRouteFromInterface(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult)
modifyRouteOnInterface(aChain, aCallback, aResult, false);
void NetworkUtils::modifyRouteOnInterface(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult,bool aDoAdd)
char command[MAX_COMMAND_SIZE];
nsCString ipOrSubnetIp = NS_ConvertUTF16toUTF8(GET_FIELD(mIp));
nsCString gatewayOrEmpty;
const char* legacyOrEmpty = "legacy 0 ";
structType myStruct;
myStruct.structFirst = legacyOrEmpty;
legacyOrEmpty = badSource(myStruct);
void badSource(structType myStruct)
char * legacyOrEmpty = myStruct.structFirst;
if (GET_FIELD(mGateway).IsEmpty()) {
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
legacyOrEmpty = "";
else
gatewayOrEmpty = nsCString(" ") + NS_ConvertUTF16toUTF8(GET_FIELD(mGateway));
return legacyOrEmpty;
const char* action = aDoAdd ? "add" : "remove";
snprintf(command, MAX_COMMAND_SIZE - 1, "network route %s%s %d %s %s/%d%s",
legacyOrEmpty, action,
GET_FIELD(mNetId), GET_CHAR(mIfname), ipOrSubnetIp.get(),
GET_FIELD(mPrefixLength), gatewayOrEmpty.get());
1

13841 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1165
void NetworkUtils::removeRouteFromInterface(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult)
modifyRouteOnInterface(aChain, aCallback, aResult, false);
void NetworkUtils::modifyRouteOnInterface(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult,bool aDoAdd)
char command[MAX_COMMAND_SIZE];
nsCString ipOrSubnetIp = NS_ConvertUTF16toUTF8(GET_FIELD(mIp));
nsCString gatewayOrEmpty;
const char* legacyOrEmpty = "legacy 0 ";
structType myStruct;
myStruct.structFirst = legacyOrEmpty;
legacyOrEmpty = badSource(myStruct);
void badSource(structType myStruct)
char * legacyOrEmpty = myStruct.structFirst;
if (GET_FIELD(mGateway).IsEmpty()) {
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
legacyOrEmpty = "";
else
gatewayOrEmpty = nsCString(" ") + NS_ConvertUTF16toUTF8(GET_FIELD(mGateway));
return legacyOrEmpty;
const char* action = aDoAdd ? "add" : "remove";
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route %s%s %d %s %s/%d%s",
legacyOrEmpty, action,
GET_FIELD(mNetId), GET_CHAR(mIfname), ipOrSubnetIp.get(),
GET_FIELD(mPrefixLength), gatewayOrEmpty.get());
0

13842 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1005
void NetworkUtils::removeDefaultRoute(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
command = func(command);
static char * func(const char * command)
snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
return command;
command = func(command);
struct MyCallback
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
NU_DBG("removeDefaultRoute's reason: %s", reason.get());
if (aError && !reason.EqualsASCII("removeRoute() failed (No such process)")) {
return aOriginalCallback(aChain, aError, aResult);
GET_FIELD(mLoopIndex)++;
return removeDefaultRoute(aChain, aOriginalCallback, aResult);
1

13843 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1005
void NetworkUtils::removeDefaultRoute(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
command = func(command);
static char * func(const char * command)
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
return command;
command = func(command);
struct MyCallback
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
NU_DBG("removeDefaultRoute's reason: %s", reason.get());
if (aError && !reason.EqualsASCII("removeRoute() failed (No such process)")) {
return aOriginalCallback(aChain, aError, aResult);
GET_FIELD(mLoopIndex)++;
return removeDefaultRoute(aChain, aOriginalCallback, aResult);
0

13844 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1005
void NetworkUtils::removeDefaultRoute(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
command = func(&command);
static char * func(char * * ptr)
char * command = *ptr;
snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
return command;
command = func(&command);
struct MyCallback
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
NU_DBG("removeDefaultRoute's reason: %s", reason.get());
if (aError && !reason.EqualsASCII("removeRoute() failed (No such process)")) {
return aOriginalCallback(aChain, aError, aResult);
GET_FIELD(mLoopIndex)++;
return removeDefaultRoute(aChain, aOriginalCallback, aResult);
1

13845 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1005
void NetworkUtils::removeDefaultRoute(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
command = func(&command);
static char * func(char * * ptr)
char * command = *ptr;
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
return command;
command = func(&command);
struct MyCallback
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
NU_DBG("removeDefaultRoute's reason: %s", reason.get());
if (aError && !reason.EqualsASCII("removeRoute() failed (No such process)")) {
return aOriginalCallback(aChain, aError, aResult);
GET_FIELD(mLoopIndex)++;
return removeDefaultRoute(aChain, aOriginalCallback, aResult);
0

13846 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1005
void NetworkUtils::removeDefaultRoute(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
void (*funcPtr) (char *) = badSource;
funcPtr(command);
void badSource(char * command)
snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
struct MyCallback
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
NU_DBG("removeDefaultRoute's reason: %s", reason.get());
if (aError && !reason.EqualsASCII("removeRoute() failed (No such process)")) {
return aOriginalCallback(aChain, aError, aResult);
GET_FIELD(mLoopIndex)++;
return removeDefaultRoute(aChain, aOriginalCallback, aResult);
1

13847 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1005
void NetworkUtils::removeDefaultRoute(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
void (*funcPtr) (char *) = badSource;
funcPtr(command);
void badSource(char * command)
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
struct MyCallback
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
NU_DBG("removeDefaultRoute's reason: %s", reason.get());
if (aError && !reason.EqualsASCII("removeRoute() failed (No such process)")) {
return aOriginalCallback(aChain, aError, aResult);
GET_FIELD(mLoopIndex)++;
return removeDefaultRoute(aChain, aOriginalCallback, aResult);
0

13848 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1005
void NetworkUtils::removeDefaultRoute(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
char * dataCopy = command;
char * command = dataCopy;
struct MyCallback
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
NU_DBG("removeDefaultRoute's reason: %s", reason.get());
if (aError && !reason.EqualsASCII("removeRoute() failed (No such process)")) {
return aOriginalCallback(aChain, aError, aResult);
GET_FIELD(mLoopIndex)++;
return removeDefaultRoute(aChain, aOriginalCallback, aResult);
1

13849 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1005
void NetworkUtils::removeDefaultRoute(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
char * dataCopy = command;
char * command = dataCopy;
struct MyCallback
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
NU_DBG("removeDefaultRoute's reason: %s", reason.get());
if (aError && !reason.EqualsASCII("removeRoute() failed (No such process)")) {
return aOriginalCallback(aChain, aError, aResult);
GET_FIELD(mLoopIndex)++;
return removeDefaultRoute(aChain, aOriginalCallback, aResult);
0

13850 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1005
void NetworkUtils::removeDefaultRoute(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
size = MAX_COMMAND_SIZE - 1;
snprintf(command, size , "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
struct MyCallback
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
NU_DBG("removeDefaultRoute's reason: %s", reason.get());
if (aError && !reason.EqualsASCII("removeRoute() failed (No such process)")) {
return aOriginalCallback(aChain, aError, aResult);
GET_FIELD(mLoopIndex)++;
return removeDefaultRoute(aChain, aOriginalCallback, aResult);
1

13851 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1005
void NetworkUtils::removeDefaultRoute(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
size = MAX_COMMAND_SIZE - 1;
PR_snprintf(command, size, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
struct MyCallback
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
NU_DBG("removeDefaultRoute's reason: %s", reason.get());
if (aError && !reason.EqualsASCII("removeRoute() failed (No such process)")) {
return aOriginalCallback(aChain, aError, aResult);
GET_FIELD(mLoopIndex)++;
return removeDefaultRoute(aChain, aOriginalCallback, aResult);
0

13852 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1005
void NetworkUtils::removeDefaultRoute(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
char command[MAX_COMMAND_SIZE];
int type = getIpType(autoGateway.get());
snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
struct MyCallback
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
NU_DBG("removeDefaultRoute's reason: %s", reason.get());
if (aError && !reason.EqualsASCII("removeRoute() failed (No such process)")) {
return aOriginalCallback(aChain, aError, aResult);
GET_FIELD(mLoopIndex)++;
return removeDefaultRoute(aChain, aOriginalCallback, aResult);
1

13853 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1005
void NetworkUtils::removeDefaultRoute(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
char command[MAX_COMMAND_SIZE];
int type = getIpType(autoGateway.get());
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
struct MyCallback
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
NU_DBG("removeDefaultRoute's reason: %s", reason.get());
if (aError && !reason.EqualsASCII("removeRoute() failed (No such process)")) {
return aOriginalCallback(aChain, aError, aResult);
GET_FIELD(mLoopIndex)++;
return removeDefaultRoute(aChain, aOriginalCallback, aResult);
0

13854 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1005
void NetworkUtils::removeDefaultRoute(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
char * dataArray[5];
dataArray[2] =command;
command = badSource(dataArray);
void badSource(dataArray);
void badSource(char * dataArray[])
char * command = dataArray[2];
snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
return command;
struct MyCallback
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
NU_DBG("removeDefaultRoute's reason: %s", reason.get());
if (aError && !reason.EqualsASCII("removeRoute() failed (No such process)")) {
return aOriginalCallback(aChain, aError, aResult);
GET_FIELD(mLoopIndex)++;
return removeDefaultRoute(aChain, aOriginalCallback, aResult);
1

13855 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1005
void NetworkUtils::removeDefaultRoute(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
char * dataArray[5];
dataArray[2] =command;
command = badSource(dataArray);
void badSource(dataArray);
void badSource(char * dataArray[])
char * command = dataArray[2];
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
return command;
struct MyCallback
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
NU_DBG("removeDefaultRoute's reason: %s", reason.get());
if (aError && !reason.EqualsASCII("removeRoute() failed (No such process)")) {
return aOriginalCallback(aChain, aError, aResult);
GET_FIELD(mLoopIndex)++;
return removeDefaultRoute(aChain, aOriginalCallback, aResult);
0

13856 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1005
void NetworkUtils::removeDefaultRoute(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
unionType myUnion;
myUnion.unionFirst = command;
char * command = myUnion.unionSecond;
struct MyCallback
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
NU_DBG("removeDefaultRoute's reason: %s", reason.get());
if (aError && !reason.EqualsASCII("removeRoute() failed (No such process)")) {
return aOriginalCallback(aChain, aError, aResult);
GET_FIELD(mLoopIndex)++;
return removeDefaultRoute(aChain, aOriginalCallback, aResult);
1

13857 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1005
void NetworkUtils::removeDefaultRoute(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
unionType myUnion;
myUnion.unionFirst = command;
char * command = myUnion.unionSecond;
struct MyCallback
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
NU_DBG("removeDefaultRoute's reason: %s", reason.get());
if (aError && !reason.EqualsASCII("removeRoute() failed (No such process)")) {
return aOriginalCallback(aChain, aError, aResult);
GET_FIELD(mLoopIndex)++;
return removeDefaultRoute(aChain, aOriginalCallback, aResult);
0

13858 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1005
void NetworkUtils::removeDefaultRoute(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
structType myStruct;
myStruct.structFirst = command;
command = badSource(myStruct);
void badSource(structType myStruct)
char * command = myStruct.structFirst;
snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
return command;
struct MyCallback
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
NU_DBG("removeDefaultRoute's reason: %s", reason.get());
if (aError && !reason.EqualsASCII("removeRoute() failed (No such process)")) {
return aOriginalCallback(aChain, aError, aResult);
GET_FIELD(mLoopIndex)++;
return removeDefaultRoute(aChain, aOriginalCallback, aResult);
1

13859 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1005
void NetworkUtils::removeDefaultRoute(CommandChain* aChain,CommandCallback aCallback,NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
structType myStruct;
myStruct.structFirst = command;
command = badSource(myStruct);
void badSource(structType myStruct)
char * command = myStruct.structFirst;
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
return command;
struct MyCallback
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
NU_DBG("removeDefaultRoute's reason: %s", reason.get());
if (aError && !reason.EqualsASCII("removeRoute() failed (No such process)")) {
return aOriginalCallback(aChain, aError, aResult);
GET_FIELD(mLoopIndex)++;
return removeDefaultRoute(aChain, aOriginalCallback, aResult);
0

13950 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 729
void NetworkUtils::setInterfaceUp(CommandChain* aChain, CommandCallback aCallback, NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION >= 16) {
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "interface setcfg %s %s %s %s",
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mLink));
0

13951 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 926
void NetworkUtils::setDnsForwarders(CommandChain* aChain,CommandCallback aCallback, NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION >= 20) {
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "tether dns set %d %s %s",
GET_FIELD(mNetId), GET_CHAR(mDns1), GET_CHAR(mDns2));
0

13952 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1050
void NetworkUtils::setInterfaceDns(CommandChain* aChain, ommandCallback aCallback,NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
int written;
if (SDK_VERSION >= 20) {
written = PR_snprintf(command, sizeof command, "resolver setnetdns %d %s",
GET_FIELD(mNetId), GET_CHAR(mDomain));
nsTArray<nsString>& dnses = GET_FIELD(mDnses);
uint32_t length = dnses.Length();
for (uint32_t i = 0; i < length; i++) {
NS_ConvertUTF16toUTF8 autoDns(dnses[i]);
int ret = PR_snprintf(command + written, sizeof(command) - written, " %s", autoDns.get());
0

13953 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1185
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
return addDefaultRouteToNetwork(aChain, aOriginalCallback, aResult);
void NetworkUtils::addDefaultRouteToNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;  }
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route add %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
0

13954 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1006
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
return removeDefaultRoute(aChain, aOriginalCallback, aResult);
void NetworkUtils::removeDefaultRoute(CommandChain* aChain, CommandCallback aCallback,NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;}
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
0

13955 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1239
void NetworkUtils::addRouteToSecondaryTable(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult) {
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION < 20) {
PR_snprintf(command, MAX_COMMAND_SIZE - 1,
"interface route add %s secondary %s %s %s",
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mGateway));
0

13956 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 497
void NetworkUtils::doCommand(const char* aCommand, CommandChain* aChain, CommandCallback aCallback)
NU_DBG("Preparing to send \'%s\' command...", aCommand);
NetdCommand* netdCommand = new NetdCommand();
if (SDK_VERSION >= 16) {
PR_snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "0 %s", aCommand);
0

13957 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 879
void NetworkUtils::startTethering(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
if (!GET_FIELD(mUsbStartIp).IsEmpty() && !GET_FIELD(mUsbEndIp).IsEmpty()) {
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "tether start %s %s %s %s",
GET_CHAR(mWifiStartIp), GET_CHAR(mWifiEndIp),
GET_CHAR(mUsbStartIp),  GET_CHAR(mUsbEndIp));
0

13958 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1164
void NetworkUtils::modifyRouteOnInterface(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult,
bool aDoAdd)
char command[MAX_COMMAND_SIZE];
nsCString ipOrSubnetIp = NS_ConvertUTF16toUTF8(GET_FIELD(mIp));
nsCString gatewayOrEmpty;
const char* legacyOrEmpty = "legacy 0 ";
if (GET_FIELD(mGateway).IsEmpty()) {
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
nsCString NetworkUtils::getSubnetIp(const nsCString& aIp, int aPrefixLength)
return nsCString();
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
const char* action = aDoAdd ? "add" : "remove";
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route %s%s %d %s %s/%d%s",
legacyOrEmpty, action,
GET_FIELD(mNetId), GET_CHAR(mIfname), ipOrSubnetIp.get(),
GET_FIELD(mPrefixLength), gatewayOrEmpty.get());
0

13959 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1682
CommandResult NetworkUtils::setDNS(NetworkParams& aOptions)
uint32_t length = aOptions.mDnses.Length();
if (length > 0) {
for (uint32_t i = 0; i < length; i++) {
NS_ConvertUTF16toUTF8 autoDns(aOptions.mDnses[i]);
char dns_prop_key[PROPERTY_VALUE_MAX];
PR_snprintf(dns_prop_key, sizeof dns_prop_key, "net.dns%d", i+1);
0

13960 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 781
void NetworkUtils::addRouteToLocalNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
uint32_t prefix = atoi(GET_CHAR(mPrefix));
uint32_t ip = inet_addr(GET_CHAR(mIp));
char* networkAddr = getNetworkAddr(ip, prefix);
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route add local %s %s/%s",
GET_CHAR(mInternalIfname), networkAddr, GET_CHAR(mPrefix));
0

13961 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 602
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsCString ssid(GET_CHAR(mSsid));
nsCString key(GET_CHAR(mKey));
escapeQuote(ssid);
escapeQuote(key);
if (SDK_VERSION >= 19) {
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s \"%s\" broadcast 6 %s \"%s\"",
GET_CHAR(mIfname),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
0

13962 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1264
void NetworkUtils::removeRouteFromSecondaryTable(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult) {
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION < 20) {
PR_snprintf(command, MAX_COMMAND_SIZE - 1,
"interface route remove %s secondary %s %s %s",
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mGateway));
0

13963 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp String_Termination_Error 1607
void NetworkUtils::onNetdMessage(NetdCommand* aCommand)
char* reason = strtok(nullptr, "\0");
sendBroadcastMessage(code, reason);
if (code == NETD_COMMAND_INTERFACE_CHANGE) {
if (gWifiTetheringParms) {
char linkdownReason[MAX_COMMAND_SIZE];
PR_snprintf(linkdownReason, MAX_COMMAND_SIZE - 1,
"Iface linkstate %s down",
NS_ConvertUTF16toUTF8(gWifiTetheringParms->mIfname).get());
if (!strcmp(reason, linkdownReason)) {
0

13964 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1040
void NetworkUtils::setInterfaceDns(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
int written;
if (SDK_VERSION <= 20) {
written = PR_snprintf(command, sizeof command, "resolver setifdns %s %s", GET_CHAR(mIfname), GET_CHAR(mDomain));
0

13965 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1257
void NetworkUtils::removeRouteFromSecondaryTable(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult) {
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION >= 20) {
PR_snprintf(command, MAX_COMMAND_SIZE - 1,
"network route remove %d %s %s/%s %s",
GET_FIELD(mNetId),
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mGateway));
0

13966 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 723
void NetworkUtils::setInterfaceUp(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION >= 16) {
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "interface setcfg %s %s %s %s",
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mLink));
0

13967 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1005
void NetworkUtils::removeDefaultRoute(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
0

13968 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 615
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsCString ssid(GET_CHAR(mSsid));
nsCString key(GET_CHAR(mKey));
if (SDK_VERSION < 16) {
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s %s \"%s\" %s \"%s\" 6 0 8",
GET_CHAR(mIfname),
GET_CHAR(mWifictrlinterfacename),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
0

13969 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 608
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsCString ssid(GET_CHAR(mSsid));
nsCString key(GET_CHAR(mKey));
if (SDK_VERSION >= 16 && SDK_VERSION < 19) {
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s \"%s\" %s \"%s\"",
GET_CHAR(mIfname),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
0

13970 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1232
void NetworkUtils::addRouteToSecondaryTable(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult) {
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION >= 20) {
PR_snprintf(command, MAX_COMMAND_SIZE - 1,
"network route add %d %s %s/%s %s",
GET_FIELD(mNetId),
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mGateway));
0

13971 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1605
void NetworkUtils::onNetdMessage(NetdCommand* aCommand)
char* data = (char*)aCommand->mData;
char* result = strtok(data, NETD_MESSAGE_DELIMIT);
uint32_t code = atoi(result);
char* reason = strtok(nullptr, "\0");
if (isBroadcastMessage(code)) {
if (code == NETD_COMMAND_INTERFACE_CHANGE) {
if (gWifiTetheringParms) {
char linkdownReason[MAX_COMMAND_SIZE];
PR_snprintf(linkdownReason, MAX_COMMAND_SIZE - 1,
"Iface linkstate %s down",
NS_ConvertUTF16toUTF8(gWifiTetheringParms->mIfname).get());
0

13972 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1185
void NetworkUtils::addDefaultRouteToNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "network route add %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
0

13973 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 602
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsCString ssid(GET_CHAR(mSsid));
nsCString key(GET_CHAR(mKey));
escapeQuote(ssid);
escapeQuote(key);
if (SDK_VERSION >= 19) {
PR_snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s \"%s\" broadcast 6 %s \"%s\"",
GET_CHAR(mIfname),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
0

13974 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_wifi_WifiUtils.cpp Format_String_Attack 371
int32_t do_wifi_command(const char* iface, const char* cmd, char* buf, size_t* len) {
char command[COMMAND_SIZE];
if (!strcmp(iface, "p2p0")) {
PR_snprintf(command, COMMAND_SIZE, "%s", cmd);
0

13975 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_wifi_WifiUtils.cpp Format_String_Attack 374
int32_t do_wifi_command(const char* iface, const char* cmd, char* buf, size_t* len) {
char command[COMMAND_SIZE];
if (!strcmp(iface, "p2p0")) {
PR_snprintf(command, COMMAND_SIZE, "IFNAME=%s %s", iface, cmd);
0

13988 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 729
void NetworkUtils::setInterfaceUp(CommandChain* aChain, CommandCallback aCallback, NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION >= 16) {
snprintf(command, MAX_COMMAND_SIZE - 1, "interface setcfg %s %s %s [%s]",
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mLink));
1

13989 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 926
void NetworkUtils::setDnsForwarders(CommandChain* aChain,CommandCallback aCallback, NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION >= 20) {
snprintf(command, MAX_COMMAND_SIZE - 1, "tether dns set %d %s %s",
GET_FIELD(mNetId), GET_CHAR(mDns1), GET_CHAR(mDns2));
1

13990 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1050
void NetworkUtils::setInterfaceDns(CommandChain* aChain, ommandCallback aCallback,NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
int written;
if (SDK_VERSION >= 20) {
written = snprintf(command, sizeof command, "resolver setnetdns %d %s",
GET_FIELD(mNetId), GET_CHAR(mDomain));
nsTArray<nsString>& dnses = GET_FIELD(mDnses);
uint32_t length = dnses.Length();
for (uint32_t i = 0; i < length; i++) {
NS_ConvertUTF16toUTF8 autoDns(dnses[i]);
int ret = snprintf(command + written, sizeof(command) - written, " %s", autoDns.get());
1

13991 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1185
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
return addDefaultRouteToNetwork(aChain, aOriginalCallback, aResult);
void NetworkUtils::addDefaultRouteToNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;  }
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
snprintf(command, MAX_COMMAND_SIZE - 1, "network route add %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
1

13992 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1006
static void callback(CommandCallback::CallbackType aOriginalCallback,
CommandChain* aChain,
bool aError,
mozilla::dom::NetworkResultOptions& aResult)
NS_ConvertUTF16toUTF8 reason(aResult.mResultReason);
return removeDefaultRoute(aChain, aOriginalCallback, aResult);
void NetworkUtils::removeDefaultRoute(CommandChain* aChain, CommandCallback aCallback,NetworkResultOptions& aResult)
if (GET_FIELD(mLoopIndex) >= GET_FIELD(mGateways).Length()) {
aCallback(aChain, false, aResult);
return;}
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
1

13993 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1239
void NetworkUtils::addRouteToSecondaryTable(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult) {
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION < 20) {
snprintf(command, MAX_COMMAND_SIZE - 1,
"interface route add %s secondary %s %s %s",
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mGateway));
1

13994 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 497
void NetworkUtils::doCommand(const char* aCommand, CommandChain* aChain, CommandCallback aCallback)
NU_DBG("Preparing to send \'%s\' command...", aCommand);
NetdCommand* netdCommand = new NetdCommand();
if (SDK_VERSION >= 16) {
snprintf((char*)netdCommand->mData, MAX_COMMAND_SIZE - 1, "0 %s", aCommand);
1

13995 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 879
void NetworkUtils::startTethering(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
if (!GET_FIELD(mUsbStartIp).IsEmpty() && !GET_FIELD(mUsbEndIp).IsEmpty()) {
snprintf(command, MAX_COMMAND_SIZE - 1, "tether start %s %s %s %s",
GET_CHAR(mWifiStartIp), GET_CHAR(mWifiEndIp),
GET_CHAR(mUsbStartIp),  GET_CHAR(mUsbEndIp));
1

13996 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1164
void NetworkUtils::modifyRouteOnInterface(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult,
bool aDoAdd)
char command[MAX_COMMAND_SIZE];
nsCString ipOrSubnetIp = NS_ConvertUTF16toUTF8(GET_FIELD(mIp));
nsCString gatewayOrEmpty;
const char* legacyOrEmpty = "legacy 0 ";
if (GET_FIELD(mGateway).IsEmpty()) {
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
nsCString NetworkUtils::getSubnetIp(const nsCString& aIp, int aPrefixLength)
return nsCString();
ipOrSubnetIp = getSubnetIp(ipOrSubnetIp, GET_FIELD(mPrefixLength));
const char* action = aDoAdd ? "add" : "remove";
snprintf(command, MAX_COMMAND_SIZE - 1, "network route %s%s %d %s %s/%d%s",
legacyOrEmpty, action,
GET_FIELD(mNetId), GET_CHAR(mIfname), ipOrSubnetIp.get(),
GET_FIELD(mPrefixLength), gatewayOrEmpty.get());
1

13997 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1682
CommandResult NetworkUtils::setDNS(NetworkParams& aOptions)
uint32_t length = aOptions.mDnses.Length();
if (length > 0) {
for (uint32_t i = 0; i < length; i++) {
NS_ConvertUTF16toUTF8 autoDns(aOptions.mDnses[i]);
char dns_prop_key[PROPERTY_VALUE_MAX];
snprintf(dns_prop_key, sizeof dns_prop_key, "net.dns%d", i+1);
1

13998 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 781
void NetworkUtils::addRouteToLocalNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
uint32_t prefix = atoi(GET_CHAR(mPrefix));
uint32_t ip = inet_addr(GET_CHAR(mIp));
char* networkAddr = getNetworkAddr(ip, prefix);
snprintf(command, MAX_COMMAND_SIZE - 1, "network route add local %s %s/%s",
GET_CHAR(mInternalIfname), networkAddr, GET_CHAR(mPrefix));
1

13999 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 602
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsCString ssid(GET_CHAR(mSsid));
nsCString key(GET_CHAR(mKey));
escapeQuote(ssid);
escapeQuote(key);
if (SDK_VERSION >= 19) {
snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s \"%s\" broadcast 6 %s \"%s\"",
GET_CHAR(mIfname),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
1

14000 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Format_String_Attack 1264
void NetworkUtils::removeRouteFromSecondaryTable(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult) {
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION < 20) {
snprintf(command, MAX_COMMAND_SIZE - 1,
"interface route remove %s secondary %s %s %s",
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mGateway));
1

14001 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp String_Termination_Error 1607
void NetworkUtils::onNetdMessage(NetdCommand* aCommand)
char* reason = strtok(nullptr, "\0");
sendBroadcastMessage(code, reason);
if (code == NETD_COMMAND_INTERFACE_CHANGE) {
if (gWifiTetheringParms) {
char linkdownReason[MAX_COMMAND_SIZE];
snprintf(linkdownReason, MAX_COMMAND_SIZE - 1,
"Iface linkstate %s down",
NS_ConvertUTF16toUTF8(gWifiTetheringParms->mIfname).get());
if (!strcmp(reason, linkdownReason)) {
1

14002 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1040
void NetworkUtils::setInterfaceDns(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
int written;
if (SDK_VERSION <= 20) {
written = snprintf(command, sizeof command, "resolver setifdns %s %s", GET_CHAR(mIfname), GET_CHAR(mDomain));
1

14003 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1257
void NetworkUtils::removeRouteFromSecondaryTable(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult) {
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION >= 20) {
snprintf(command, MAX_COMMAND_SIZE - 1,
"network route remove %d %s %s/%s %s",
GET_FIELD(mNetId),
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mGateway));
1

14004 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 723
void NetworkUtils::setInterfaceUp(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION >= 16) {
snprintf(command, MAX_COMMAND_SIZE - 1, "interface setcfg %s %s %s %s",
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mLink));
1

14005 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1005
void NetworkUtils::removeDefaultRoute(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
snprintf(command, MAX_COMMAND_SIZE - 1, "network route remove %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
1

14006 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 615
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsCString ssid(GET_CHAR(mSsid));
nsCString key(GET_CHAR(mKey));
if (SDK_VERSION < 16) {
snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s %s \"%s\" %s \"%s\" 6 0 8",
GET_CHAR(mIfname),
GET_CHAR(mWifictrlinterfacename),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
1

14007 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 608
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsCString ssid(GET_CHAR(mSsid));
nsCString key(GET_CHAR(mKey));
if (SDK_VERSION >= 16 && SDK_VERSION < 19) {
snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s \"%s\" %s \"%s\"",
GET_CHAR(mIfname),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
1

14008 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1232
void NetworkUtils::addRouteToSecondaryTable(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult) {
char command[MAX_COMMAND_SIZE];
if (SDK_VERSION >= 20) {
snprintf(command, MAX_COMMAND_SIZE - 1,
"network route add %d %s %s/%s %s",
GET_FIELD(mNetId),
GET_CHAR(mIfname),
GET_CHAR(mIp),
GET_CHAR(mPrefix),
GET_CHAR(mGateway));
1

14009 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1605
void NetworkUtils::onNetdMessage(NetdCommand* aCommand)
char* data = (char*)aCommand->mData;
char* result = strtok(data, NETD_MESSAGE_DELIMIT);
uint32_t code = atoi(result);
char* reason = strtok(nullptr, "\0");
if (isBroadcastMessage(code)) {
if (code == NETD_COMMAND_INTERFACE_CHANGE) {
if (gWifiTetheringParms) {
char linkdownReason[MAX_COMMAND_SIZE];
snprintf(linkdownReason, MAX_COMMAND_SIZE - 1,
"Iface linkstate %s down",
NS_ConvertUTF16toUTF8(gWifiTetheringParms->mIfname).get());
1

14010 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 1185
void NetworkUtils::addDefaultRouteToNetwork(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsTArray<nsString>& gateways = GET_FIELD(mGateways);
NS_ConvertUTF16toUTF8 autoGateway(gateways[GET_FIELD(mLoopIndex)]);
int type = getIpType(autoGateway.get());
snprintf(command, MAX_COMMAND_SIZE - 1, "network route add %d %s %s/0 %s",
GET_FIELD(mNetId), GET_CHAR(mIfname),
type == AF_INET6 ? "::" : "0.0.0.0", autoGateway.get());
1

14011 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_system_gonk_NetworkUtils.cpp Buffer_Overflow_LowBound 602
void NetworkUtils::setAccessPoint(CommandChain* aChain,
CommandCallback aCallback,
NetworkResultOptions& aResult)
char command[MAX_COMMAND_SIZE];
nsCString ssid(GET_CHAR(mSsid));
nsCString key(GET_CHAR(mKey));
escapeQuote(ssid);
escapeQuote(key);
if (SDK_VERSION >= 19) {
snprintf(command, MAX_COMMAND_SIZE - 1, "softap set %s \"%s\" broadcast 6 %s \"%s\"",
GET_CHAR(mIfname),
ssid.get(),
GET_CHAR(mSecurity),
key.get());
1

14012 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_wifi_WifiUtils.cpp Format_String_Attack 371
int32_t do_wifi_command(const char* iface, const char* cmd, char* buf, size_t* len) {
char command[COMMAND_SIZE];
if (!strcmp(iface, "p2p0")) {
snprintf(command, COMMAND_SIZE, "%s", cmd);
1

14013 CVE-2015-4517/Firefox_40.0b9_CVE_2015_4517_dom_wifi_WifiUtils.cpp Format_String_Attack 374
int32_t do_wifi_command(const char* iface, const char* cmd, char* buf, size_t* len) {
char command[COMMAND_SIZE];
if (strcmp(iface, "p2p0")) {
snprintf(command, COMMAND_SIZE, "IFNAME=%s %s", iface, cmd);
1

