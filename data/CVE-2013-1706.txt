4 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_components_maintenanceservice_workmonitor.cpp cppfunc 111
WCHAR installDir[MAX_PATH + 1] = {L'\0'};
if (!GetInstallationDir(argc, argv, installDir)) {
GetInstallationDir(int argcTmp, LPWSTR *argvTmp, WCHAR aResultDir[MAX_PATH + 1])
wcsncpy(aResultDir, argvTmp[2], MAX_PATH);
WCHAR* backSlash = wcsrchr(aResultDir, L'\\');
0

16 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_mozapps_update_common_updatehelper.cpp API 404
WriteStatusFailure(LPCWSTR updateDirPath, int errorCode)
char failure[32];
sprintf(failure, "failed: %d", errorCode);
DWORD toWrite = strlen(failure);
DWORD wrote;
toWrite, &wrote, NULL);
0

17 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_mozapps_update_common_updatehelper.cpp cfunc 401
WriteStatusFailure(LPCWSTR updateDirPath, int errorCode)
char failure[32];
sprintf(failure, "failed: %d", errorCode);
DWORD toWrite = strlen(failure);
0

18 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_mozapps_update_common_updatehelper.cpp API 403
WriteStatusFailure(LPCWSTR updateDirPath, int errorCode)
char failure[32];
sprintf(failure, "failed: %d", errorCode);
DWORD toWrite = strlen(failure);
BOOL ok = WriteFile(statusFile, failure,
0

26 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_components_maintenanceservice_serviceinstall.cpp cfunc 133
int rv = ReadMaintenanceServiceStrings(updaterINIPath, &serviceStrings);
MaintenanceServiceStringTable *results)
results->serviceDescription[MAX_TEXT_LEN - 1] = '\0';
MaintenanceServiceStringTable serviceStrings;
int rv = ReadMaintenanceServiceStrings(updaterINIPath, &serviceStrings);
if (rv != OK || !strlen(serviceStrings.serviceDescription)) {
0

31 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_mozapps_update_common_updatehelper.cpp API 373
const char pending[] = "pending";
DWORD wrote;
sizeof(pending) - 1, &wrote, NULL);
0

36 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_mozapps_update_common_updatehelper.cpp API 577
HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
if (!Process32FirstW(snapshot, &processEntry)) {
} while (Process32NextW(snapshot, &processEntry));
CloseHandle(snapshot);
0

37 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_mozapps_update_common_updatehelper.cpp API 573
HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
if (!Process32FirstW(snapshot, &processEntry)) {
} while (Process32NextW(snapshot, &processEntry));
CloseHandle(snapshot);
0

40 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_components_maintenanceservice_workmonitor.cpp cfunc 78
char buf[32] = { 0 };
if (!ReadFile(statusFile, buf, sizeof(buf), &read, NULL)) {
LOG(("updater.exe returned status: %s", buf));
const char kApplying[] = "applying";
isApplying = strncmp(buf, kApplying,
0

46 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_components_maintenanceservice_workmonitor.cpp API 70
WCHAR updateStatusFilePath[MAX_PATH + 1] = {L'\0'};
wcsncpy(updateStatusFilePath, updateDirPath, MAX_PATH);
if (!PathAppendSafe(updateStatusFilePath, L"update.status")) {
FILE_SHARE_WRITE |
NULL, OPEN_EXISTING, 0, NULL));
nsAutoHandle statusFile(CreateFileW(updateStatusFilePath, GENERIC_READ,
FILE_SHARE_WRITE |
FILE_SHARE_READ |
FILE_SHARE_WRITE |
char buf[32] = { 0 };
DWORD read;
if (!ReadFile(statusFile, buf, sizeof(buf), &read, NULL)) {
0

51 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_components_maintenanceservice_workmonitor.cpp API 211
PROCESS_INFORMATION pi = {0};
NULL, &si, &pi);
CloseHandle(pi.hThread);
0

74 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_components_maintenanceservice_workmonitor.cpp cfunc 396
char updaterIdentity[64];
updaterIdentity, sizeof(updaterIdentity))) {
if (strcmp(updaterIdentity, UPDATER_IDENTITY_STRING)) {
0

96 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_components_maintenanceservice_workmonitor.cpp API 400
wcsncpy(aResultDir, argvTmp[2], MAX_PATH);
bool backgroundUpdate = IsUpdateBeingStaged(argcTmp, argvTmp);
LOAD_LIBRARY_AS_DATAFILE);
HMODULE updaterModule = LoadLibraryEx(argv[0], NULL,
if (!LoadStringA(updaterModule, IDS_UPDATER_IDENTITY,
FreeLibrary(updaterModule);
if (!PathRemoveFileSpecW(serviceUpdaterPath)) {
if (!PathAppendSafe(serviceUpdaterPath, L"update")) {
CreateDirectoryW(serviceUpdaterPath, NULL);
if (!PathAppendSafe(serviceUpdaterPath, L"updater.exe")) {
result = DeleteFileW(serviceUpdaterPath);
serviceUpdaterPath));
if (PathGetSiblingFilePath(updaterINIPath, serviceUpdaterPath,
WCHAR secureUpdaterPath[MAX_PATH + 1] = { L'\0' };
result = GetSecureUpdaterPath(secureUpdaterPath);
oldUpdaterPath, secureUpdaterPath));
DeleteSecureUpdater(secureUpdaterPath);
argv[3] = secureUpdaterPath;
result = ProcessSoftwareUpdateCommand(argc - 3, argv + 3);
IsUpdateBeingStaged(int argc, LPWSTR *argv)
return argc == 4 && !wcscmp(argv[3], L"-1");
bool replaceRequest = (argcTmp >= 4 && wcsstr(argvTmp[3], L"/replace"));
if (!IsLocalFile(argv[0], isLocal) || !isLocal) {
nsAutoHandle noWriteLock(CreateFileW(argv[0], GENERIC_READ, FILE_SHARE_READ,
if (result && !VerifySameFiles(argv[0], installDirUpdater,
HMODULE updaterModule = LoadLibraryEx(argv[0], NULL,
if (!LoadStringA(updaterModule, IDS_UPDATER_IDENTITY,
FreeLibrary(updaterModule);
DeleteSecureUpdater(WCHAR serviceUpdaterPath[MAX_PATH + 1])
result = CopyFileW(oldUpdaterPath, secureUpdaterPath, FALSE);
argv[3] = secureUpdaterPath;
result = ProcessSoftwareUpdateCommand(argc - 3, argv + 3);
ProcessSoftwareUpdateCommand(DWORD argc, LPWSTR *argv)
if (!GetInstallationDir(argc, argv, installDir)) {
GetInstallationDir(int argcTmp, LPWSTR *argvTmp, WCHAR aResultDir[MAX_PATH + 1])
if (!IsLocalFile(argv[0], isLocal) || !isLocal) {
nsAutoHandle noWriteLock(CreateFileW(argv[0], GENERIC_READ, FILE_SHARE_READ,
if (result && !VerifySameFiles(argv[0], installDirUpdater,
HMODULE updaterModule = LoadLibraryEx(argv[0], NULL,
if (!LoadStringA(updaterModule, IDS_UPDATER_IDENTITY,
FreeLibrary(updaterModule);
BOOL PathGetSiblingFilePath(LPWSTR destinationBuffer,  LPCWSTR siblingFilePath,
result = CopyFileW(oldUpdaterPath, secureUpdaterPath, FALSE);
argv[3] = secureUpdaterPath;
result = ProcessSoftwareUpdateCommand(argc - 3, argv + 3);
GetSecureUpdaterPath(WCHAR serviceUpdaterPath[MAX_PATH + 1])
if (!GetModuleFileNameW(NULL, serviceUpdaterPath, MAX_PATH)) {
argv[3] = secureUpdaterPath;
result = ProcessSoftwareUpdateCommand(argc - 3, argv + 3);
0

125 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_mozapps_update_common_updatehelper.cpp API 233
PROCESS_INFORMATION pi = {0};
NULL, installDir, &si, &pi);
CloseHandle(pi.hThread);
0

126 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_mozapps_update_common_updatehelper.cpp API 232
PROCESS_INFORMATION pi = {0};
NULL, installDir, &si, &pi);
CloseHandle(pi.hProcess);
0

148 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_components_maintenanceservice_maintenanceservice.cpp API 228
NULL, 0, NULL);
HANDLE thread = CreateThread(NULL, 0, EnsureProcessTerminatedThread,
CloseHandle(thread);
0

163 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_mozapps_update_common_updatehelper.cpp API 626
HKEY testOnlyFallbackKey;
&testOnlyFallbackKey) != ERROR_SUCCESS) {
RegCloseKey(testOnlyFallbackKey);
0

223 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_mozapps_update_common_updatehelper.cpp API 701
HKEY baseKey;
KEY_READ, &baseKey);
BOOL success = GetDWORDValue(baseKey, L"EnableLUA", enabled);
GetDWORDValue(HKEY key, LPCWSTR valueName, DWORD &retValue)
LONG retCode = RegQueryValueExW(key, valueName, 0, NULL,
GetDWORDValue(baseKey, L"ConsentPromptBehaviorAdmin", consent);
GetDWORDValue(baseKey, L"PromptOnSecureDesktop", secureDesktop);
RegCloseKey(baseKey);
GetDWORDValue(HKEY key, LPCWSTR valueName, DWORD &retValue)
LONG retCode = RegQueryValueExW(key, valueName, 0, NULL,
GetDWORDValue(baseKey, L"PromptOnSecureDesktop", secureDesktop);
GetDWORDValue(HKEY key, LPCWSTR valueName, DWORD &retValue)
LONG retCode = RegQueryValueExW(key, valueName, 0, NULL,
RegCloseKey(baseKey);
0

264 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_mozapps_update_common_updatehelper.cpp API 567
HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
if (!Process32FirstW(snapshot, &processEntry)) {
CloseHandle(snapshot);
0

276 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_components_maintenanceservice_maintenanceservice.cpp cfunc 162
if (!GetBackupLogPath(newPath, basePath, i)) {
BackupOldLogs(updatePath, LOGS_TO_KEEP);
GetBackupLogPath(LPWSTR path, LPCWSTR basePath, int logNumber)
L"maintenanceservice-%d.log", logNumber);
BackupOldLogs(LPCWSTR basePath, int numLogsToKeep)
for (int i = numLogsToKeep; i >= 1; i--) {
if (!GetBackupLogPath(oldPath, basePath, i -1)) {
0

277 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_components_maintenanceservice_maintenanceservice.cpp cppfunc 162
if (!GetBackupLogPath(newPath, basePath, i)) {
BackupOldLogs(updatePath, LOGS_TO_KEEP);
BackupOldLogs(LPCWSTR basePath, int numLogsToKeep)
for (int i = numLogsToKeep; i >= 1; i--) {
if (!GetBackupLogPath(oldPath, basePath, i -1)) {
GetBackupLogPath(LPWSTR path, LPCWSTR basePath, int logNumber)
L"maintenanceservice-%d.log", logNumber);
0

313 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_components_maintenanceservice_workmonitor.cpp API 210
PROCESS_INFORMATION pi = {0};
NULL, &si, &pi);
DWORD waitRes = WaitForSingleObject(pi.hProcess, TIME_TO_WAIT_ON_UPDATER);
TerminateProcess(pi.hProcess, 1);
if (GetExitCodeProcess(pi.hProcess, &returnCode)) {
CloseHandle(pi.hProcess);
0

316 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_components_maintenanceservice_workmonitor.cpp cppfunc 51
WCHAR updateStatusFilePath[MAX_PATH + 1] = {L'\0'};
wcsncpy(updateStatusFilePath, updateDirPath, MAX_PATH);
wcsncpy(aResultDir, argvTmp[2], MAX_PATH);
bool backgroundUpdate = IsUpdateBeingStaged(argcTmp, argvTmp);
if (!PathRemoveFileSpecW(serviceUpdaterPath)) {
if (!PathAppendSafe(serviceUpdaterPath, L"update")) {
CreateDirectoryW(serviceUpdaterPath, NULL);
if (!PathAppendSafe(serviceUpdaterPath, L"updater.exe")) {
result = DeleteFileW(serviceUpdaterPath);
serviceUpdaterPath));
if (PathGetSiblingFilePath(updaterINIPath, serviceUpdaterPath,
WCHAR secureUpdaterPath[MAX_PATH + 1] = { L'\0' };
result = GetSecureUpdaterPath(secureUpdaterPath);
oldUpdaterPath, secureUpdaterPath));
DeleteSecureUpdater(secureUpdaterPath);
argv[3] = secureUpdaterPath;
result = ProcessSoftwareUpdateCommand(argc - 3, argv + 3);
ProcessSoftwareUpdateCommand(DWORD argc, LPWSTR *argv)
if (!GetInstallationDir(argc, argv, installDir)) {
GetInstallationDir(int argcTmp, LPWSTR *argvTmp, WCHAR aResultDir[MAX_PATH + 1])
if (!IsLocalFile(argv[0], isLocal) || !isLocal) {
nsAutoHandle noWriteLock(CreateFileW(argv[0], GENERIC_READ, FILE_SHARE_READ,
if (result && !VerifySameFiles(argv[0], installDirUpdater,
HMODULE updaterModule = LoadLibraryEx(argv[0], NULL,
argv[0]);
if (StartUpdateProcess(argc, argv, installDir,
LPWSTR *argv,
LPWSTR cmdLine = MakeCommandLine(argc, argv);
PRUnichar* MakeCommandLine(int argc, PRUnichar **argv);
PathGetSiblingFilePath(updaterINITemp, argv[0], L"updater.tmp")) {
BOOL PathGetSiblingFilePath(LPWSTR destinationBuffer,  LPCWSTR siblingFilePath,
if (PathGetSiblingFilePath(updaterINI, argv[0], L"updater.ini") &&
processStarted = CreateProcessW(argv[0], cmdLine,
if (IsStatusApplying(argv[1], isApplying) && isApplying) {
result = CopyFileW(oldUpdaterPath, secureUpdaterPath, FALSE);
argv[3] = secureUpdaterPath;
result = ProcessSoftwareUpdateCommand(argc - 3, argv + 3);
BOOL PathGetSiblingFilePath(LPWSTR destinationBuffer,  LPCWSTR siblingFilePath,
processStarted = CreateProcessW(argv[0], cmdLine,
if (IsStatusApplying(argv[1], isApplying) && isApplying) {
IsStatusApplying(LPCWSTR updateDirPath, BOOL &isApplying)
wcsncpy(updateStatusFilePath, updateDirPath, MAX_PATH);
DeleteSecureUpdater(WCHAR serviceUpdaterPath[MAX_PATH + 1])
result = CopyFileW(oldUpdaterPath, secureUpdaterPath, FALSE);
argv[3] = secureUpdaterPath;
result = ProcessSoftwareUpdateCommand(argc - 3, argv + 3);
GetSecureUpdaterPath(WCHAR serviceUpdaterPath[MAX_PATH + 1])
if (!GetModuleFileNameW(NULL, serviceUpdaterPath, MAX_PATH)) {
argv[3] = secureUpdaterPath;
result = ProcessSoftwareUpdateCommand(argc - 3, argv + 3);
IsUpdateBeingStaged(int argc, LPWSTR *argv)
return argc == 4 && !wcscmp(argv[3], L"-1");
bool replaceRequest = (argcTmp >= 4 && wcsstr(argvTmp[3], L"/replace"));
if (!IsLocalFile(argv[0], isLocal) || !isLocal) {
nsAutoHandle noWriteLock(CreateFileW(argv[0], GENERIC_READ, FILE_SHARE_READ,
if (result && !VerifySameFiles(argv[0], installDirUpdater,
HMODULE updaterModule = LoadLibraryEx(argv[0], NULL,
argv[0]);
if (StartUpdateProcess(argc, argv, installDir,
LPWSTR *argv,
LPWSTR cmdLine = MakeCommandLine(argc, argv);
0

334 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_mozapps_update_common_updatehelper.cpp API 178
PROCESS_INFORMATION pi = {0};
&pi);
&pi);
CloseHandle(pi.hThread);
0

340 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_components_maintenanceservice_maintenanceservice.cpp API 374
NULL, 0, NULL);
HANDLE thread = CreateThread(NULL, 0, StopServiceAndWaitForCommandThread,
CloseHandle(thread);
0

345 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_components_maintenanceservice_serviceinstall.cpp cfunc 46
MaintenanceServiceStringTable serviceStrings;
int rv = ReadMaintenanceServiceStrings(updaterINIPath, &serviceStrings);
MaintenanceServiceStringTable *results)
strncpy(results->serviceDescription,
0

346 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_components_maintenanceservice_serviceinstall.cpp API 572
SERVICE_STATUS status;
if (ControlService(schService, SERVICE_CONTROL_STOP, &status)) {
} while (QueryServiceStatus(schService, &status));
Sleep(status.dwWaitHint);
0

353 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_mozapps_update_common_updatehelper.cpp API 176
PROCESS_INFORMATION pi = {0};
&pi);
&pi);
WaitForSingleObject(pi.hProcess, INFINITE);
0

354 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_mozapps_update_common_updatehelper.cpp API 177
PROCESS_INFORMATION pi = {0};
&pi);
&pi);
WaitForSingleObject(pi.hProcess, INFINITE);
CloseHandle(pi.hProcess);
0

446 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_components_maintenanceservice_serviceinstall.cpp cppfunc 203
LPCWSTR currentServicePath,
nsAutoArrayPtr<char> serviceConfigBuffer = new char[bytesNeeded];
reinterpret_cast<QUERY_SERVICE_CONFIGW*>(serviceConfigBuffer.get()),
*reinterpret_cast<QUERY_SERVICE_CONFIGW*>(serviceConfigBuffer.get());
QUERY_SERVICE_CONFIGW &serviceConfig =
if (!FixServicePath(schService, serviceConfig.lpBinaryPathName,
size_t currentServicePathLen = wcslen(currentServicePath);
!wcsstr(currentServicePath, L"maintenanceservice_tmp.exe") &&
currentServicePath));
WCHAR fixedPath[MAX_PATH + 1] = { L'\0' };
wcsncpy(fixedPath, currentServicePath, MAX_PATH);
0

449 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_components_maintenanceservice_serviceinstall.cpp cppfunc 364
WCHAR newServiceBinaryPath[MAX_PATH + 1];
if (!GetModuleFileNameW(NULL, newServiceBinaryPath,
if (!GetVersionNumberFromPath(newServiceBinaryPath, newA,
GetVersionNumberFromPath(LPWSTR path, DWORD &A, DWORD &B,
DWORD fileVersionInfoSize = GetFileVersionInfoSizeW(path, 0);
if (!GetFileVersionInfoW(path, 0, fileVersionInfoSize,
if (!wcscmp(newServiceBinaryPath, serviceConfig.lpBinaryPathName)) {
0

474 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_mozapps_update_common_pathhash.cpp cppfunc 134
LPCWSTR baseRegPath = L"SOFTWARE\\Mozilla\\"
wcsncpy(registryPath, baseRegPath, MAX_PATH);
registryPath + wcslen(baseRegPath));
0

522 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_components_maintenanceservice_maintenanceservice.cpp API 284
gWorkDoneEvent = CreateEvent(NULL, TRUE, FALSE, NULL);
ReportSvcStatus(SERVICE_RUNNING, NO_ERROR, 0);
SetEvent(gWorkDoneEvent);
0

563 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_components_maintenanceservice_workmonitor.cpp cfunc 276
LPWSTR cmdLine = MakeCommandLine(argc, argv);
LOG(("Starting service with cmdline: %ls", cmdLine));
processStarted = CreateProcessW(argv[0], cmdLine,
free(cmdLine);
0

564 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_components_maintenanceservice_workmonitor.cpp cppfunc 276
LPWSTR cmdLine = MakeCommandLine(argc, argv);
LOG(("Starting service with cmdline: %ls", cmdLine));
processStarted = CreateProcessW(argv[0], cmdLine,
free(cmdLine);
0

589 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_mozapps_update_common_updatehelper.cpp API 405
WCHAR updateStatusFilePath[MAX_PATH + 1];
wcscpy(updateStatusFilePath, updateDirPath);
if (!PathAppendSafe(updateStatusFilePath, L"update.status")) {
NULL, CREATE_ALWAYS, 0, NULL);
HANDLE statusFile = CreateFileW(updateStatusFilePath, GENERIC_WRITE, 0,
BOOL ok = WriteFile(statusFile, failure,
CloseHandle(statusFile);
BOOL PathAppendSafe(LPWSTR base, LPCWSTR extra);
HANDLE statusFile = CreateFileW(updateStatusFilePath, GENERIC_WRITE, 0,
BOOL ok = WriteFile(statusFile, failure,
CloseHandle(statusFile);
1

595 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_mozapps_update_common_updatehelper.cpp API 374
WCHAR updateStatusFilePath[MAX_PATH + 1];
wcscpy(updateStatusFilePath, updateDirPath);
if (!PathAppendSafe(updateStatusFilePath, L"update.status")) {
NULL, CREATE_ALWAYS, 0, NULL);
HANDLE statusFile = CreateFileW(updateStatusFilePath, GENERIC_WRITE, 0,
BOOL ok = WriteFile(statusFile, pending,
CloseHandle(statusFile);
BOOL PathAppendSafe(LPWSTR base, LPCWSTR extra);
HANDLE statusFile = CreateFileW(updateStatusFilePath, GENERIC_WRITE, 0,
BOOL ok = WriteFile(statusFile, pending,
CloseHandle(statusFile);
1

599 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_mozapps_update_common_updatehelper.cpp cppfunc 116
const WCHAR *updateInfoDir,
WCHAR slogFile[MAX_PATH + 1];
wcscpy(slogFile, updateInfoDir);
1

603 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_components_maintenanceservice_serviceinstall.cpp cppfunc 689
WCHAR accountName[UNLEN + 1];
if (!LookupAccountSidW(NULL, sid, accountName,
wcscpy(accountName, L"Users");
1

604 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_mozapps_update_common_updatehelper.cpp cppfunc 221
StartServiceUpdate(LPCWSTR installDir)
WCHAR maintserviceInstallerPath[MAX_PATH + 1];
wcscpy(maintserviceInstallerPath, installDir);
1

606 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_mozapps_update_common_updatehelper.cpp cppfunc 388
WriteStatusFailure(LPCWSTR updateDirPath, int errorCode)
WCHAR updateStatusFilePath[MAX_PATH + 1];
wcscpy(updateStatusFilePath, updateDirPath);
1

607 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_components_maintenanceservice_workmonitor.cpp cppfunc 349
wcsncpy(aResultDir, argvTmp[2], MAX_PATH);
WCHAR* backSlash = wcsrchr(aResultDir, L'\\');
return PathRemoveFileSpecW(aResultDir);
WCHAR installDir[MAX_PATH + 1] = {L'\0'};
if (!GetInstallationDir(argc, argv, installDir)) {
WCHAR installDirUpdater[MAX_PATH + 1] = {L'\0'};
wcsncpy(installDirUpdater, installDir, MAX_PATH);
GetInstallationDir(int argcTmp, LPWSTR *argvTmp, WCHAR aResultDir[MAX_PATH + 1])
wcsncpy(installDirUpdater, installDir, MAX_PATH);
1

608 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_mozapps_update_common_updatehelper.cpp cppfunc 40
WCHAR exefullpath[MAX_PATH + 1];
wcscpy(exefullpath, installationDir);
if (!PathAppendSafe(exefullpath, exefile)) {
BOOL PathAppendSafe(LPWSTR base, LPCWSTR extra);
if (!PathGetSiblingFilePath(dlogFile, exefullpath, L"uninstall.update")) {
LPCWSTR siblingFilePath,
if (wcslen(siblingFilePath) >= MAX_PATH) {
wcscpy(destinationBuffer, siblingFilePath);
1

609 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_mozapps_update_common_updatehelper.cpp cppfunc 45
WCHAR dlogFile[MAX_PATH + 1];
if (!PathGetSiblingFilePath(dlogFile, exefullpath, L"uninstall.update")) {
LPCWSTR newFileName)
if (wcslen(destinationBuffer) + wcslen(newFileName) >= MAX_PATH) {
PathGetSiblingFilePath(LPWSTR destinationBuffer,
wcscpy(destinationBuffer, siblingFilePath);
if (!PathRemoveFileSpecW(destinationBuffer)) {
if (wcslen(destinationBuffer) + wcslen(newFileName) >= MAX_PATH) {
1

614 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_mozapps_update_common_pathhash.cpp cppfunc 117
CalculateRegistryPathFromFilePath(const LPCWSTR filePath,
size_t filePathLen = wcslen(filePath);
WCHAR *lowercasePath = new WCHAR[filePathLen + 2];
wcscpy(lowercasePath, filePath);
1

621 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_mozapps_update_common_updatehelper.cpp cppfunc 105
LaunchWinPostProcess(const WCHAR *installationDir,
wcscpy(workingDirectory, installationDir);
wcscpy(inifile, installationDir);
wcscpy(exefullpath, installationDir);
1

627 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_components_maintenanceservice_serviceinstall.cpp cppfunc 393
currentServicePath));
wcsncpy(fixedPath, currentServicePath, MAX_PATH);
nsAutoArrayPtr<char> serviceConfigBuffer = new char[bytesNeeded];
reinterpret_cast<QUERY_SERVICE_CONFIGW*>(serviceConfigBuffer.get()),
*reinterpret_cast<QUERY_SERVICE_CONFIGW*>(serviceConfigBuffer.get());
QUERY_SERVICE_CONFIGW &serviceConfig =
if (!FixServicePath(schService, serviceConfig.lpBinaryPathName,
LPCWSTR currentServicePath,
size_t currentServicePathLen = wcslen(currentServicePath);
!wcsstr(currentServicePath, L"maintenanceservice_tmp.exe") &&
PathUnquoteSpacesW(serviceConfig.lpBinaryPathName);
GetVersionNumberFromPath(serviceConfig.lpBinaryPathName,
new WCHAR[wcslen(serviceConfig.lpBinaryPathName) + 1];
LPWSTR oldServiceBinaryTempPath =
wcscpy(oldServiceBinaryTempPath, serviceConfig.lpBinaryPathName);
wcscpy(oldServiceBinaryTempPath + len - 3, L"old");
GetVersionNumberFromPath(LPWSTR path, DWORD &A, DWORD &B,
DWORD fileVersionInfoSize = GetFileVersionInfoSizeW(path, 0);
if (!GetFileVersionInfoW(path, 0, fileVersionInfoSize,
if (!wcscmp(newServiceBinaryPath, serviceConfig.lpBinaryPathName)) {
serviceConfig.lpBinaryPathName, FALSE)) {
const size_t len = wcslen(serviceConfig.lpBinaryPathName);
wcscpy(oldServiceBinaryTempPath + len - 3, L"old");
1

641 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_mozapps_update_common_updatehelper.cpp cfunc 173
WCHAR exearg[MAX_PATH + 1];
if (!GetPrivateProfileStringW(L"PostUpdateWin", L"ExeArg", NULL, exearg,
WCHAR dummyArg[14];
wcscpy(dummyArg, L"argv0ignored ");
size_t len = wcslen(exearg) + wcslen(dummyArg);
WCHAR *cmdline = (WCHAR *) malloc((len + 1) * sizeof(WCHAR));
wcscpy(cmdline, dummyArg);
wcscat(cmdline, exearg);
cmdline,
cmdline,
free(cmdline);
1

642 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_mozapps_update_common_updatehelper.cpp cppfunc 173
WCHAR exearg[MAX_PATH + 1];
if (!GetPrivateProfileStringW(L"PostUpdateWin", L"ExeArg", NULL, exearg,
WCHAR dummyArg[14];
wcscpy(dummyArg, L"argv0ignored ");
size_t len = wcslen(exearg) + wcslen(dummyArg);
WCHAR *cmdline = (WCHAR *) malloc((len + 1) * sizeof(WCHAR));
wcscpy(cmdline, dummyArg);
wcscat(cmdline, exearg);
cmdline,
cmdline,
free(cmdline);
1

644 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_mozapps_update_common_updatehelper.cpp cppfunc 359
WriteStatusPending(LPCWSTR updateDirPath)
WCHAR updateStatusFilePath[MAX_PATH + 1];
wcscpy(updateStatusFilePath, updateDirPath);
1

654 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_components_maintenanceservice_serviceinstall.cpp cppfunc 391
if (!FixServicePath(schService, serviceConfig.lpBinaryPathName,
LPCWSTR currentServicePath,
size_t currentServicePathLen = wcslen(currentServicePath);
!wcsstr(currentServicePath, L"maintenanceservice_tmp.exe") &&
currentServicePath));
wcsncpy(fixedPath, currentServicePath, MAX_PATH);
nsAutoArrayPtr<char> serviceConfigBuffer = new char[bytesNeeded];
reinterpret_cast<QUERY_SERVICE_CONFIGW*>(serviceConfigBuffer.get()),
*reinterpret_cast<QUERY_SERVICE_CONFIGW*>(serviceConfigBuffer.get());
QUERY_SERVICE_CONFIGW &serviceConfig =
PathUnquoteSpacesW(serviceConfig.lpBinaryPathName);
GetVersionNumberFromPath(serviceConfig.lpBinaryPathName,
GetVersionNumberFromPath(LPWSTR path, DWORD &A, DWORD &B,
DWORD fileVersionInfoSize = GetFileVersionInfoSizeW(path, 0);
if (!GetFileVersionInfoW(path, 0, fileVersionInfoSize,
if (!wcscmp(newServiceBinaryPath, serviceConfig.lpBinaryPathName)) {
serviceConfig.lpBinaryPathName, FALSE)) {
const size_t len = wcslen(serviceConfig.lpBinaryPathName);
wcscpy(oldServiceBinaryTempPath, serviceConfig.lpBinaryPathName);
1

13048 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_mozapps_update_common_updatehelper.cpp Buffer_Overflow_cpycat 646
IsLocalFile(LPCWSTR file, BOOL &isLocal)
WCHAR rootPath[MAX_PATH + 1];
if (wcslen(file) > MAX_PATH) {
return FALSE;
wcscpy(rootPath, file);
1

13049 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_mozapps_update_common_updatehelper.cpp Buffer_Overflow_cpycat 646
IsLocalFile(LPCWSTR file, BOOL &isLocal)
WCHAR rootPath[MAX_PATH + 1] = { L'\0' };
if (wcslen(file) > MAX_PATH) {
return FALSE;
wcsncpy(rootPath, file, MAX_PATH);
0

13050 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_components_maintenanceservice_maintenanceservice.cpp Buffer_Overflow_cpycat 156
GetBackupLogPath(LPWSTR path, LPCWSTR basePath, int logNumber)
WCHAR logName[64];
wcscpy(path, basePath);
if (logNumber <= 0)
swprintf(logName, sizeof(logName) / sizeof(logName[0]),L"maintenanceservice.log");
else
swprintf(logName, sizeof(logName) / sizeof(logName[0]),L"maintenanceservice-%d.log", logNumber);
return PathAppendSafe(path, logName);
1

13051 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_components_maintenanceservice_maintenanceservice.cpp Buffer_Overflow_cpycat 156
GetBackupLogPath(LPWSTR path, LPCWSTR basePath, int logNumber)
WCHAR logName[64] = { L'\0' };
wcsncpy(path, basePath, sizeof(logName) / sizeof(logName[0]) - 1);
if (logNumber <= 0)
swprintf(logName, sizeof(logName) / sizeof(logName[0]),L"maintenanceservice.log");
else
swprintf(logName, sizeof(logName) / sizeof(logName[0]),L"maintenanceservice-%d.log", logNumber);
return PathAppendSafe(path, logName);
0

13742 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_mozapps_update_common_updatehelper.cpp Buffer_Overflow_cpycat 646
IsLocalFile(LPCWSTR file, BOOL &isLocal)
rootPath = func(rootPath);
static WCHAR * func(const WCHAR * rootPath)
WCHAR rootPath[MAX_PATH + 1];
return rootPath;
rootPath = func(rootPath);
if (wcslen(file) > MAX_PATH) {
return FALSE;
wcscpy(rootPath, file);
1

13743 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_mozapps_update_common_updatehelper.cpp Buffer_Overflow_cpycat 646
IsLocalFile(LPCWSTR file, BOOL &isLocal)
rootPath = func(rootPath);
static WCHAR * func(const WCHAR * rootPath)
WCHAR rootPath[MAX_PATH + 1] = { L'\0' };
return rootPath;
rootPath = func(rootPath);
if (wcslen(file) > MAX_PATH) {
return FALSE;
wcsncpy(rootPath, file, MAX_PATH);
0

13744 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_mozapps_update_common_updatehelper.cpp Buffer_Overflow_cpycat 646
IsLocalFile(LPCWSTR file, BOOL &isLocal)
rootPath = func(&rootPath);
static WCHAR * func(WCHAR * * ptr)
WCHAR * rootPath = *ptr;
WCHAR rootPath[MAX_PATH + 1];
return rootPath;
rootPath = func(&rootPath);
if (wcslen(file) > MAX_PATH) {
return FALSE;
wcscpy(rootPath, file);
1

13745 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_mozapps_update_common_updatehelper.cpp Buffer_Overflow_cpycat 646
IsLocalFile(LPCWSTR file, BOOL &isLocal)
rootPath = func(&rootPath);
static WCHAR * func(WCHAR * * ptr)
WCHAR * rootPath = *ptr;
WCHAR rootPath[MAX_PATH + 1] = { L'\0' };
return rootPath;
rootPath = func(&rootPath);
if (wcslen(file) > MAX_PATH) {
return FALSE;
wcsncpy(rootPath, file, MAX_PATH);
0

13746 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_mozapps_update_common_updatehelper.cpp Buffer_Overflow_cpycat 646
IsLocalFile(LPCWSTR file, BOOL &isLocal)
void (*funcPtr) (WCHAR *) = badSource;
funcPtr(rootPath);
void badSource(WCHAR * rootPath)
WCHAR rootPath[MAX_PATH + 1];
if (wcslen(file) > MAX_PATH) {
return FALSE;
wcscpy(rootPath, file);
1

13747 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_mozapps_update_common_updatehelper.cpp Buffer_Overflow_cpycat 646
IsLocalFile(LPCWSTR file, BOOL &isLocal)
void (*funcPtr) (WCHAR *) = badSource;
funcPtr(rootPath);
void badSource(WCHAR * rootPath)
WCHAR rootPath[MAX_PATH + 1] = { L'\0' };
if (wcslen(file) > MAX_PATH) {
return FALSE;
wcsncpy(rootPath, file, MAX_PATH);
0

13748 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_mozapps_update_common_updatehelper.cpp Buffer_Overflow_cpycat 646
IsLocalFile(LPCWSTR file, BOOL &isLocal)
WCHAR rootPath[MAX_PATH + 1];
WCHAR * dataCopy = rootPath;
WCHAR * rootPath = dataCopy;
if (wcslen(file) > MAX_PATH) {
return FALSE;
wcscpy(rootPath, file);
1

13749 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_mozapps_update_common_updatehelper.cpp Buffer_Overflow_cpycat 646
IsLocalFile(LPCWSTR file, BOOL &isLocal)
WCHAR rootPath[MAX_PATH + 1] = { L'\0' };
WCHAR * dataCopy = rootPath;
WCHAR * rootPath = dataCopy;
if (wcslen(file) > MAX_PATH) {
return FALSE;
wcsncpy(rootPath, file, MAX_PATH);
0

13750 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_mozapps_update_common_updatehelper.cpp Buffer_Overflow_cpycat 646
IsLocalFile(LPCWSTR file, BOOL &isLocal)
WCHAR * dataArray[5];
dataArray[2] = rootPath;
rootPath = badSource(dataArray);
void badSource(WCHAR * dataArray[])
WCHAR * rootPath = dataArray[2];
WCHAR rootPath[MAX_PATH + 1];
return rootPath;
if (wcslen(file) > MAX_PATH) {
return FALSE;
wcscpy(rootPath, file);
1

13751 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_mozapps_update_common_updatehelper.cpp Buffer_Overflow_cpycat 646
IsLocalFile(LPCWSTR file, BOOL &isLocal)
WCHAR * dataArray[5];
dataArray[2] = rootPath;
rootPath = badSource(dataArray);
void badSource(WCHAR * dataArray[])
WCHAR * rootPath = dataArray[2];
WCHAR rootPath[MAX_PATH + 1] = { L'\0' };
return rootPath;
if (wcslen(file) > MAX_PATH) {
return FALSE;
wcsncpy(rootPath, file, MAX_PATH);
0

13752 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_mozapps_update_common_updatehelper.cpp Buffer_Overflow_cpycat 646
IsLocalFile(LPCWSTR file, BOOL &isLocal)
WCHAR rootPath[MAX_PATH + 1];
unionType myUnion;
myUnion.unionFirst = rootPath;
WCHAR * rootPath = myUnion.unionSecond;
if (wcslen(file) > MAX_PATH) {
return FALSE;
wcscpy(rootPath, file);
1

13753 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_mozapps_update_common_updatehelper.cpp Buffer_Overflow_cpycat 646
IsLocalFile(LPCWSTR file, BOOL &isLocal)
WCHAR rootPath[MAX_PATH + 1] = { L'\0' };
unionType myUnion;
myUnion.unionFirst = rootPath;
WCHAR * rootPath = myUnion.unionSecond;
if (wcslen(file) > MAX_PATH) {
return FALSE;
wcsncpy(rootPath, file, MAX_PATH);
0

13754 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_mozapps_update_common_updatehelper.cpp Buffer_Overflow_cpycat 646
IsLocalFile(LPCWSTR file, BOOL &isLocal)
structType myStruct;
myStruct.structFirst = rootPath;
rootPath = badSource(myStruct);
void badSource(structType myStruct)
WCHAR * rootPath = myStruct,structFirst;
WCHAR rootPath[MAX_PATH + 1];
return rootPath;
if (wcslen(file) > MAX_PATH) {
return FALSE;
wcscpy(rootPath, file);
1

13755 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_mozapps_update_common_updatehelper.cpp Buffer_Overflow_cpycat 646
IsLocalFile(LPCWSTR file, BOOL &isLocal)
structType myStruct;
myStruct.structFirst = rootPath;
rootPath = badSource(myStruct);
void badSource(structType myStruct)
WCHAR * rootPath = myStruct,structFirst;
WCHAR rootPath[MAX_PATH + 1] = { L'\0' };
return rootPath;
if (wcslen(file) > MAX_PATH) {
return FALSE;
wcsncpy(rootPath, file, MAX_PATH);
0

13756 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_components_maintenanceservice_maintenanceservice.cpp Buffer_Overflow_cpycat 156
GetBackupLogPath(LPWSTR path, LPCWSTR basePath, int logNumber)
logName = func(logName);
static WCHAR * func(const WCHAR * logName)
WCHAR logName[64];
return logName;
logName = func(logName);
wcscpy(path, basePath);
if (logNumber <= 0)
swprintf(logName, sizeof(logName) / sizeof(logName[0]),L"maintenanceservice.log");
else
swprintf(logName, sizeof(logName) / sizeof(logName[0]),L"maintenanceservice-%d.log", logNumber);
return PathAppendSafe(path, logName);
1

13757 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_components_maintenanceservice_maintenanceservice.cpp Buffer_Overflow_cpycat 156
GetBackupLogPath(LPWSTR path, LPCWSTR basePath, int logNumber)
logName = func(logName);
static WCHAR * func(const WCHAR * logName)
WCHAR logName[64] = { L'\0' };
return logName;
logName = func(logName);
wcsncpy(path, basePath, sizeof(logName) / sizeof(logName[0]) - 1);
if (logNumber <= 0)
swprintf(logName, sizeof(logName) / sizeof(logName[0]),L"maintenanceservice.log");
else
swprintf(logName, sizeof(logName) / sizeof(logName[0]),L"maintenanceservice-%d.log", logNumber);
return PathAppendSafe(path, logName);
0

13758 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_components_maintenanceservice_maintenanceservice.cpp Buffer_Overflow_cpycat 156
GetBackupLogPath(LPWSTR path, LPCWSTR basePath, int logNumber)
logName = func(&logName);
static WCHAR * func(WCHAR * * ptr)
WCHAR * logName = *ptr;
WCHAR logName[64];
return logName;
logName = func(&logName);
wcscpy(path, basePath);
if (logNumber <= 0)
swprintf(logName, sizeof(logName) / sizeof(logName[0]),L"maintenanceservice.log");
else
swprintf(logName, sizeof(logName) / sizeof(logName[0]),L"maintenanceservice-%d.log", logNumber);
return PathAppendSafe(path, logName);
1

13759 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_components_maintenanceservice_maintenanceservice.cpp Buffer_Overflow_cpycat 156
GetBackupLogPath(LPWSTR path, LPCWSTR basePath, int logNumber)
logName = func(&logName);
static WCHAR * func(WCHAR * * ptr)
WCHAR * logName = *ptr;
WCHAR logName[64] = { L'\0' };
return logName;
logName = func(&logName);
wcsncpy(path, basePath, sizeof(logName) / sizeof(logName[0]) - 1);
if (logNumber <= 0)
swprintf(logName, sizeof(logName) / sizeof(logName[0]),L"maintenanceservice.log");
else
swprintf(logName, sizeof(logName) / sizeof(logName[0]),L"maintenanceservice-%d.log", logNumber);
return PathAppendSafe(path, logName);
0

13760 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_components_maintenanceservice_maintenanceservice.cpp Buffer_Overflow_cpycat 156
GetBackupLogPath(LPWSTR path, LPCWSTR basePath, int logNumber)
void (*funcPtr) (WCHAR *) = badSource;
funcPtr(logName);
void badSource(WCHAR * logName)
WCHAR logName[64];
wcscpy(path, basePath);
if (logNumber <= 0)
swprintf(logName, sizeof(logName) / sizeof(logName[0]),L"maintenanceservice.log");
else
swprintf(logName, sizeof(logName) / sizeof(logName[0]),L"maintenanceservice-%d.log", logNumber);
return PathAppendSafe(path, logName);
1

13761 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_components_maintenanceservice_maintenanceservice.cpp Buffer_Overflow_cpycat 156
GetBackupLogPath(LPWSTR path, LPCWSTR basePath, int logNumber)
void (*funcPtr) (WCHAR *) = badSource;
funcPtr(logName);
void badSource(WCHAR * logName)
WCHAR logName[64] = { L'\0' };
wcsncpy(path, basePath, sizeof(logName) / sizeof(logName[0]) - 1);
if (logNumber <= 0)
swprintf(logName, sizeof(logName) / sizeof(logName[0]),L"maintenanceservice.log");
else
swprintf(logName, sizeof(logName) / sizeof(logName[0]),L"maintenanceservice-%d.log", logNumber);
return PathAppendSafe(path, logName);
0

13762 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_components_maintenanceservice_maintenanceservice.cpp Buffer_Overflow_cpycat 156
GetBackupLogPath(LPWSTR path, LPCWSTR basePath, int logNumber)
WCHAR logName[64];
wchar * dataCopy = logName;
wchar * logName = dataCopy;
wcscpy(path, basePath);
if (logNumber <= 0)
swprintf(logName, sizeof(logName) / sizeof(logName[0]),L"maintenanceservice.log");
else
swprintf(logName, sizeof(logName) / sizeof(logName[0]),L"maintenanceservice-%d.log", logNumber);
return PathAppendSafe(path, logName);
1

13763 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_components_maintenanceservice_maintenanceservice.cpp Buffer_Overflow_cpycat 156
GetBackupLogPath(LPWSTR path, LPCWSTR basePath, int logNumber)
WCHAR logName[64] = { L'\0' };
wchar * dataCopy = logName;
wchar * logName = dataCopy;
wcsncpy(path, basePath, sizeof(logName) / sizeof(logName[0]) - 1);
if (logNumber <= 0)
swprintf(logName, sizeof(logName) / sizeof(logName[0]),L"maintenanceservice.log");
else
swprintf(logName, sizeof(logName) / sizeof(logName[0]),L"maintenanceservice-%d.log", logNumber);
return PathAppendSafe(path, logName);
0

13764 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_components_maintenanceservice_maintenanceservice.cpp Buffer_Overflow_cpycat 156
GetBackupLogPath(LPWSTR path, LPCWSTR basePath, int logNumber)
WCHAR logName[64];
wcscpy(path, basePath);
len = sizeof(logName) / sizeof(logName[0]);
if (logNumber <= 0)
swprintf(logName, len,L"maintenanceservice.log");
else
swprintf(logName, len,L"maintenanceservice-%d.log", logNumber);
return PathAppendSafe(path, logName);
1

13765 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_components_maintenanceservice_maintenanceservice.cpp Buffer_Overflow_cpycat 156
GetBackupLogPath(LPWSTR path, LPCWSTR basePath, int logNumber)
WCHAR logName[64] = { L'\0' };
len = sizeof(logName) / sizeof(logName[0]);
wcsncpy(path, basePath, len - 1);
if (logNumber <= 0)
swprintf(logName, len,L"maintenanceservice.log");
else
swprintf(logName, len,L"maintenanceservice-%d.log", logNumber);
return PathAppendSafe(path, logName);
0

13766 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_components_maintenanceservice_maintenanceservice.cpp Buffer_Overflow_cpycat 156
GetBackupLogPath(LPWSTR path, LPCWSTR basePath, int logNumber)
WCHAR * dataArray[5];
dataArray[2] = logName;
logName = badSource(dataArray[2]);
WCHAR logName[64];
return logName;
wcscpy(path, basePath);
if (logNumber <= 0)
swprintf(logName, sizeof(logName) / sizeof(logName[0]),L"maintenanceservice.log");
else
swprintf(logName, sizeof(logName) / sizeof(logName[0]),L"maintenanceservice-%d.log", logNumber);
return PathAppendSafe(path, logName);
1

13767 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_components_maintenanceservice_maintenanceservice.cpp Buffer_Overflow_cpycat 156
GetBackupLogPath(LPWSTR path, LPCWSTR basePath, int logNumber)
WCHAR * dataArray[5];
dataArray[2] = logName;
logName = badSource(dataArray[2]);
WCHAR logName[64] = { L'\0' };
return logName;
wcsncpy(path, basePath, sizeof(logName) / sizeof(logName[0]) - 1);
if (logNumber <= 0)
swprintf(logName, sizeof(logName) / sizeof(logName[0]),L"maintenanceservice.log");
else
swprintf(logName, sizeof(logName) / sizeof(logName[0]),L"maintenanceservice-%d.log", logNumber);
return PathAppendSafe(path, logName);
0

13768 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_components_maintenanceservice_maintenanceservice.cpp Buffer_Overflow_cpycat 156
GetBackupLogPath(LPWSTR path, LPCWSTR basePath, int logNumber)
WCHAR logName[64];
unionType myUnion;
myUnion.unionFirst = logName;
WCHAR * logName = myUnion.unionSecond;
wcscpy(path, basePath);
if (logNumber <= 0)
swprintf(logName, sizeof(logName) / sizeof(logName[0]),L"maintenanceservice.log");
else
swprintf(logName, sizeof(logName) / sizeof(logName[0]),L"maintenanceservice-%d.log", logNumber);
return PathAppendSafe(path, logName);
1

13769 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_components_maintenanceservice_maintenanceservice.cpp Buffer_Overflow_cpycat 156
GetBackupLogPath(LPWSTR path, LPCWSTR basePath, int logNumber)
WCHAR logName[64] = { L'\0' };
unionType myUnion;
myUnion.unionFirst = logName;
WCHAR * logName = myUnion.unionSecond;
wcsncpy(path, basePath, sizeof(logName) / sizeof(logName[0]) - 1);
if (logNumber <= 0)
swprintf(logName, sizeof(logName) / sizeof(logName[0]),L"maintenanceservice.log");
else
swprintf(logName, sizeof(logName) / sizeof(logName[0]),L"maintenanceservice-%d.log", logNumber);
return PathAppendSafe(path, logName);
0

13770 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_components_maintenanceservice_maintenanceservice.cpp Buffer_Overflow_cpycat 156
GetBackupLogPath(LPWSTR path, LPCWSTR basePath, int logNumber)
structType myStruct;
myStruct.structFirst = logName;
logName = badSource(myStruct);
void badSource(structType myStruct)
WCHAR * logName = myStruct.structFirst;
WCHAR logName[64];
return logName;
wcscpy(path, basePath);
if (logNumber <= 0)
swprintf(logName, sizeof(logName) / sizeof(logName[0]),L"maintenanceservice.log");
else
swprintf(logName, sizeof(logName) / sizeof(logName[0]),L"maintenanceservice-%d.log", logNumber);
return PathAppendSafe(path, logName);
1

13771 CVE-2013-1706/Firefox_22.0b6_CVE_2013_1706_toolkit_components_maintenanceservice_maintenanceservice.cpp Buffer_Overflow_cpycat 156
GetBackupLogPath(LPWSTR path, LPCWSTR basePath, int logNumber)
structType myStruct;
myStruct.structFirst = logName;
logName = badSource(myStruct);
void badSource(structType myStruct)
WCHAR * logName = myStruct.structFirst;
WCHAR logName[64] = { L'\0' };
return logName;
wcsncpy(path, basePath, sizeof(logName) / sizeof(logName[0]) - 1);
if (logNumber <= 0)
swprintf(logName, sizeof(logName) / sizeof(logName[0]),L"maintenanceservice.log");
else
swprintf(logName, sizeof(logName) / sizeof(logName[0]),L"maintenanceservice-%d.log", logNumber);
return PathAppendSafe(path, logName);
0

