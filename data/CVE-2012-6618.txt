7 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 4420
str[0] = '\0';
av_strlcatf(str, size, "%s:
av_strlcatf(str, size, "%s@", authorization);
av_strlcat(str, "[", size);
av_strlcat(str, hostname, size);
av_strlcat(str, "]", size);
av_strlcat(str, hostname, size);
av_strlcat(str, hostname, size);
av_strlcatf(str, size, ":%d", port);
int len = strlen(str);
vsnprintf(str + len, size > len ? size - len : 0, fmt, vl);
return strlen(str);
0

23 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 4732
char *endptr;
prog_id = strtol(spec, &endptr, 0);
if (*endptr++ == ':') {
int stream_idx = strtol(endptr, NULL, 0);
0

24 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cppfunc 4732
char *endptr;
prog_id = strtol(spec, &endptr, 0);
if (*endptr++ == ':') {
int stream_idx = strtol(endptr, NULL, 0);
0

32 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 4169
PRINT(" %02x", buf[i+j]);
PRINT("   ");
PRINT(" ");
PRINT("%c", c);
PRINT("\n");
PRINT("%08x ", i);
PRINT(" ");
PRINT("%c", c);
hex_dump_internal(avcl, NULL, level, buf, size);
PRINT("stream #%d:\n", pkt->stream_index);
PRINT("  keyframe=%d\n", ((pkt->flags & AV_PKT_FLAG_KEY) != 0));
PRINT("  duration=%0.3f\n", pkt->duration * av_q2d(time_base));
PRINT("  dts=");
PRINT("N/A");
PRINT("%0.3f", pkt->dts * av_q2d(time_base));
PRINT("  pts=");
PRINT("N/A");
PRINT("%0.3f", pkt->pts * av_q2d(time_base));
PRINT("\n");
PRINT("  size=%d\n", pkt->size);
av_hex_dump(f, pkt->data, pkt->size);
pkt_dump_internal(avcl, NULL, level, pkt, dump_payload, tb);
pkt_dump_internal(avcl, NULL, level, pkt, dump_payload, st->time_base);
void av_hex_dump(FILE *f, uint8_t *buf, int size)
hex_dump_internal(NULL, f, 0, buf, size);
static void hex_dump_internal(void *avcl, FILE *f, int level, uint8_t *buf, int size)
PRINT("%c", c);
static void pkt_dump_internal(void *avcl, FILE *f, int level, AVPacket *pkt, int dump_payload, AVRational time_base)
av_hex_dump(f, pkt->data, pkt->size);
void av_pkt_dump2(FILE *f, AVPacket *pkt, int dump_payload, AVStream *st)
pkt_dump_internal(NULL, f, 0, pkt, dump_payload, st->time_base);
void av_pkt_dump(FILE *f, AVPacket *pkt, int dump_payload)
pkt_dump_internal(NULL, f, 0, pkt, dump_payload, tb);
0

33 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 4164
PRINT("%c", c);
PRINT("\n");
PRINT("%08x ", i);
PRINT(" ");
hex_dump_internal(avcl, NULL, level, buf, size);
PRINT("stream #%d:\n", pkt->stream_index);
PRINT("  keyframe=%d\n", ((pkt->flags & AV_PKT_FLAG_KEY) != 0));
PRINT("  duration=%0.3f\n", pkt->duration * av_q2d(time_base));
PRINT("  dts=");
PRINT("N/A");
PRINT("%0.3f", pkt->dts * av_q2d(time_base));
PRINT("  pts=");
PRINT("N/A");
PRINT("%0.3f", pkt->pts * av_q2d(time_base));
PRINT("\n");
PRINT("  size=%d\n", pkt->size);
av_hex_dump(f, pkt->data, pkt->size);
pkt_dump_internal(avcl, NULL, level, pkt, dump_payload, tb);
pkt_dump_internal(avcl, NULL, level, pkt, dump_payload, st->time_base);
static void hex_dump_internal(void *avcl, FILE *f, int level, uint8_t *buf, int size)
PRINT(" ");
static void pkt_dump_internal(void *avcl, FILE *f, int level, AVPacket *pkt, int dump_payload, AVRational time_base)
av_hex_dump(f, pkt->data, pkt->size);
void av_hex_dump(FILE *f, uint8_t *buf, int size)
hex_dump_internal(NULL, f, 0, buf, size);
void av_pkt_dump(FILE *f, AVPacket *pkt, int dump_payload)
pkt_dump_internal(NULL, f, 0, pkt, dump_payload, tb);
void av_pkt_dump2(FILE *f, AVPacket *pkt, int dump_payload, AVStream *st)
pkt_dump_internal(NULL, f, 0, pkt, dump_payload, st->time_base);
0

34 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 4162
PRINT(" %02x", buf[i+j]);
PRINT("   ");
PRINT(" ");
PRINT("%c", c);
PRINT("\n");
PRINT("%08x ", i);
PRINT("   ");
hex_dump_internal(avcl, NULL, level, buf, size);
PRINT("stream #%d:\n", pkt->stream_index);
PRINT("  keyframe=%d\n", ((pkt->flags & AV_PKT_FLAG_KEY) != 0));
PRINT("  duration=%0.3f\n", pkt->duration * av_q2d(time_base));
PRINT("  dts=");
PRINT("N/A");
PRINT("%0.3f", pkt->dts * av_q2d(time_base));
PRINT("  pts=");
PRINT("N/A");
PRINT("%0.3f", pkt->pts * av_q2d(time_base));
PRINT("\n");
PRINT("  size=%d\n", pkt->size);
av_hex_dump(f, pkt->data, pkt->size);
pkt_dump_internal(avcl, NULL, level, pkt, dump_payload, tb);
pkt_dump_internal(avcl, NULL, level, pkt, dump_payload, st->time_base);
void av_hex_dump(FILE *f, uint8_t *buf, int size)
hex_dump_internal(NULL, f, 0, buf, size);
static void hex_dump_internal(void *avcl, FILE *f, int level, uint8_t *buf, int size)
PRINT("   ");
static void pkt_dump_internal(void *avcl, FILE *f, int level, AVPacket *pkt, int dump_payload, AVRational time_base)
av_hex_dump(f, pkt->data, pkt->size);
void av_pkt_dump2(FILE *f, AVPacket *pkt, int dump_payload, AVStream *st)
pkt_dump_internal(NULL, f, 0, pkt, dump_payload, st->time_base);
void av_pkt_dump(FILE *f, AVPacket *pkt, int dump_payload)
pkt_dump_internal(NULL, f, 0, pkt, dump_payload, tb);
0

35 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 4160
PRINT(" ");
PRINT("%c", c);
PRINT("\n");
PRINT("%08x ", i);
PRINT(" %02x", buf[i+j]);
hex_dump_internal(avcl, NULL, level, buf, size);
PRINT("  keyframe=%d\n", ((pkt->flags & AV_PKT_FLAG_KEY) != 0));
PRINT("  duration=%0.3f\n", pkt->duration * av_q2d(time_base));
PRINT("N/A");
PRINT("%0.3f", pkt->dts * av_q2d(time_base));
PRINT("\n");
av_hex_dump(f, pkt->data, pkt->size);
pkt_dump_internal(avcl, NULL, level, pkt, dump_payload, tb);
pkt_dump_internal(avcl, NULL, level, pkt, dump_payload, st->time_base);
void av_hex_dump(FILE *f, uint8_t *buf, int size)
hex_dump_internal(NULL, f, 0, buf, size);
static void hex_dump_internal(void *avcl, FILE *f, int level, uint8_t *buf, int size)
PRINT(" %02x", buf[i+j]);
PRINT("   ");
PRINT(" %02x", buf[i+j]);
void av_pkt_dump(FILE *f, AVPacket *pkt, int dump_payload)
pkt_dump_internal(NULL, f, 0, pkt, dump_payload, tb);
static void pkt_dump_internal(void *avcl, FILE *f, int level, AVPacket *pkt, int dump_payload, AVRational time_base)
PRINT("stream #%d:\n", pkt->stream_index);
PRINT("  dts=");
PRINT("  pts=");
PRINT("N/A");
PRINT("%0.3f", pkt->pts * av_q2d(time_base));
PRINT("  size=%d\n", pkt->size);
av_hex_dump(f, pkt->data, pkt->size);
void av_pkt_dump2(FILE *f, AVPacket *pkt, int dump_payload, AVStream *st)
pkt_dump_internal(NULL, f, 0, pkt, dump_payload, st->time_base);
0

78 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 4746
const char *spec)
char *endptr;
sid = strtol(spec + 1, &endptr, 0);
0

79 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cppfunc 4746
const char *spec)
char *endptr;
sid = strtol(spec + 1, &endptr, 0);
0

83 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 4460
if (!(ptr = strchr(key, '=')))
ptr++;
for (; *ptr && !(isspace(*ptr) || *ptr == ','); ptr++)
key = ptr;
if (!(ptr = strchr(key, '=')))
0

93 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 1150
if(strcmp(s->iformat->name, "mov,mp4,m4a,3gp,3g2,mj2"))
!strcmp(s->iformat->name, "mpegts"))){
&& (!strcmp(s->iformat->name, "mpeg") ||
0

128 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 4726
const char *spec)
char *endptr;
spec += 2;
prog_id = strtol(spec, &endptr, 0);
0

129 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cppfunc 4726
const char *spec)
char *endptr;
spec += 2;
prog_id = strtol(spec, &endptr, 0);
0

152 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 2754
st = ic->streams[pkt->stream_index];
double dts= (is_relative(pkt->dts) ?  pkt->dts - RELATIVE_TS_BASE : pkt->dts) * av_q2d(st->time_base);
double sdts= dts*framerate/(1001*12);
int ticks= lrintf(sdts+j*0.5);
static int is_relative(int64_t ts) {
double dts= (is_relative(pkt->dts) ?  pkt->dts - RELATIVE_TS_BASE : pkt->dts) * av_q2d(st->time_base);
double sdts= dts*framerate/(1001*12);
int ticks= lrintf(sdts+j*0.5);
0

182 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 4122
return av_guess_format("image2", NULL, NULL);
return av_probe_input_buffer(s->pb, &s->iformat, filename, s, 0, s->probesize);
const char *filename, void *logctx,
if ((ret = avio_open2(&s->pb, filename, AVIO_FLAG_READ | s->avio_flags,
return av_probe_input_buffer(s->pb, &s->iformat, filename, s, 0, s->probesize);
const char *filename, void *logctx,
if (!av_filename_number_test(filename)) {
oformat = av_guess_format(format, NULL, NULL);
AVOutputFormat *oformat, const char *filename)
int ret = avformat_alloc_output_context2(&avctx, oformat, format, filename);
const char *format, const char *filename)
oformat = av_guess_format(NULL, filename, NULL);
nd = 0;
while (isdigit(*p)) {
c = *p++;
nd = nd * 10 + *p++ - '0';
snprintf(buf1, sizeof(buf1), "%0*d", nd, number);
len = strlen(buf1);
snprintf(buf1, sizeof(buf1), "%0*d", nd, number);
AVOutputFormat *av_guess_format(const char *short_name, const char *filename,
ff_guess_image2_codec(filename) != AV_CODEC_ID_NONE) {
av_filename_number_test(filename) &&
int av_filename_number_test(const char *filename)
return filename && (av_get_frame_filename(buf, sizeof(buf), filename, 1)>=0);
const char *path, int number)
p = path;
c = *p++;
nd = nd * 10 + *p++ - '0';
snprintf(buf1, sizeof(buf1), "%0*d", nd, number);
len = strlen(buf1);
snprintf(buf1, sizeof(buf1), "%0*d", nd, number);
int avformat_open_input(AVFormatContext **ps, const char *filename, AVInputFormat *fmt, AVDictionary **options)
if ((ret = init_input(s, filename, &tmp)) < 0)
static int init_input(AVFormatContext *s, const char *filename, AVDictionary **options)
if (!av_filename_number_test(filename)) {
0

184 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 4126
return av_guess_format("image2", NULL, NULL);
char buf[1024];
return filename && (av_get_frame_filename(buf, sizeof(buf), filename, 1)>=0);
return av_probe_input_buffer(s->pb, &s->iformat, filename, s, 0, s->probesize);
const char *filename, void *logctx,
if ((ret = avio_open2(&s->pb, filename, AVIO_FLAG_READ | s->avio_flags,
return av_probe_input_buffer(s->pb, &s->iformat, filename, s, 0, s->probesize);
const char *filename, void *logctx,
if (!av_filename_number_test(filename)) {
oformat = av_guess_format(format, NULL, NULL);
AVOutputFormat *oformat, const char *filename)
int ret = avformat_alloc_output_context2(&avctx, oformat, format, filename);
const char *format, const char *filename)
oformat = av_guess_format(NULL, filename, NULL);
char *q, buf1[20], c;
nd = 0;
while (isdigit(*p)) {
c = *p++;
nd = nd * 10 + *p++ - '0';
memcpy(q, buf1, len);
snprintf(buf1, sizeof(buf1), "%0*d", nd, number);
len = strlen(buf1);
memcpy(q, buf1, len);
int av_filename_number_test(const char *filename)
return filename && (av_get_frame_filename(buf, sizeof(buf), filename, 1)>=0);
const char *path, int number)
p = path;
c = *p++;
nd = nd * 10 + *p++ - '0';
snprintf(buf1, sizeof(buf1), "%0*d", nd, number);
len = strlen(buf1);
memcpy(q, buf1, len);
q += len;
memcpy(q, buf1, len);
*q++ = c;
memcpy(q, buf1, len);
AVOutputFormat *av_guess_format(const char *short_name, const char *filename,
ff_guess_image2_codec(filename) != AV_CODEC_ID_NONE) {
av_filename_number_test(filename) &&
int av_get_frame_filename(char *buf, int buf_size,
q = buf;
memcpy(q, buf1, len);
int avformat_open_input(AVFormatContext **ps, const char *filename, AVInputFormat *fmt, AVDictionary **options)
if ((ret = init_input(s, filename, &tmp)) < 0)
static int init_input(AVFormatContext *s, const char *filename, AVDictionary **options)
if (!av_filename_number_test(filename)) {
0

191 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 1752
ts_max=
ts_min= AV_NOPTS_VALUE;
e= &st->index_entries[index];
ts_min= e->timestamp;
ts_max= e->timestamp;
pos= ff_gen_search(s, stream_index, target_ts, pos_min, pos_max, pos_limit, ts_min, ts_max, flags, &ts, avif->read_timestamp);
int64_t ts_min, int64_t ts_max, int flags, int64_t *ts_ret,
pos_min = s->data_offset;
ts_min = read_timestamp(s, stream_index, &pos_min, INT64_MAX);
int step= 1024;
filesize = avio_size(s->pb);
pos_max = filesize - 1;
pos_max -= step;
step += step;
ts_max = read_timestamp(s, stream_index, &pos_max, pos_max + step);
int64_t tmp_ts= read_timestamp(s, stream_index, &tmp_pos, INT64_MAX);
ts_max= tmp_ts;
ts = read_timestamp(s, stream_index, &pos, INT64_MAX);
assert(ts != AV_NOPTS_VALUE);
ts_max = ts;
ts_min = ts;
pos = av_rescale(target_ts - ts_min, pos_max - pos_min, ts_max - ts_min)
pos_min = s->data_offset;
pos_max = avio_size(s->pb) - 1;
if     (pos < pos_min) pos= pos_min;
else if(pos > pos_max) pos= pos_max;
avio_seek(s->pb, pos, SEEK_SET);
index = av_index_search_timestamp(st, timestamp, flags);
if(s->iformat->read_seek(s, stream_index, timestamp, flags) >= 0)
return seek_frame_byte(s, stream_index, timestamp, flags);
timestamp = av_rescale(timestamp, st->time_base.den, AV_TIME_BASE * (int64_t)st->time_base.num);
ret = s->iformat->read_seek(s, stream_index, timestamp, flags);
return ff_seek_frame_binary(s, stream_index, timestamp, flags);
ret = av_seek_frame(s, stream_index, ts, flags | (dir^AVSEEK_FLAG_BACKWARD));
static int seek_frame_byte(AVFormatContext *s, int stream_index, int64_t pos, int flags){
avio_seek(s->pb, pos, SEEK_SET);
ret = av_seek_frame(s, stream_index, ts, flags | (dir^AVSEEK_FLAG_BACKWARD));
int av_seek_frame(AVFormatContext *s, int stream_index, int64_t timestamp, int flags)
int ret = seek_frame_internal(s, stream_index, timestamp, flags);
int64_t timestamp, int flags)
return ff_seek_frame_binary(s, stream_index, timestamp, flags);
int ff_seek_frame_binary(AVFormatContext *s, int stream_index, int64_t target_ts, int flags)
av_dlog(s, "read_seek: %d %s\n", stream_index, av_ts2str(target_ts));
index= av_index_search_timestamp(st, target_ts, flags | AVSEEK_FLAG_BACKWARD);
int av_index_search_timestamp(AVStream *st, int64_t wanted_timestamp,
wanted_timestamp, flags);
int64_t wanted_timestamp, int flags)
index= av_index_search_timestamp(st, target_ts, flags & ~AVSEEK_FLAG_BACKWARD);
assert(e->timestamp >= target_ts);
ret = av_seek_frame(s, stream_index, ts, flags | (dir^AVSEEK_FLAG_BACKWARD));
int av_index_search_timestamp(AVStream *st, int64_t wanted_timestamp,
wanted_timestamp, flags);
int64_t wanted_timestamp, int flags)
assert(e->timestamp >= target_ts);
int avformat_seek_file(AVFormatContext *s, int stream_index, int64_t min_ts, int64_t ts, int64_t max_ts, int flags)
int ret = av_seek_frame(s, stream_index, ts, flags | dir);
ret = av_seek_frame(s, stream_index, dir ? max_ts : min_ts, flags | dir);
int64_t ff_gen_search(AVFormatContext *s, int stream_index, int64_t target_ts,
av_dlog(s, "gen_seek: %d %s\n", stream_index, av_ts2str(target_ts));
ts_min = read_timestamp(s, stream_index, &pos_min, INT64_MAX);
pos = av_rescale(target_ts - ts_min, pos_max - pos_min, ts_max - ts_min)
ret = av_seek_frame(s, stream_index, ts, flags | (dir^AVSEEK_FLAG_BACKWARD));
0

192 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cppfunc 1752
ts_max=
ts_min= AV_NOPTS_VALUE;
e= &st->index_entries[index];
ts_min= e->timestamp;
ts_max= e->timestamp;
pos= ff_gen_search(s, stream_index, target_ts, pos_min, pos_max, pos_limit, ts_min, ts_max, flags, &ts, avif->read_timestamp);
int64_t ts_min, int64_t ts_max, int flags, int64_t *ts_ret,
pos_min = s->data_offset;
ts_min = read_timestamp(s, stream_index, &pos_min, INT64_MAX);
int step= 1024;
filesize = avio_size(s->pb);
pos_max = filesize - 1;
pos_max -= step;
step += step;
ts_max = read_timestamp(s, stream_index, &pos_max, pos_max + step);
int64_t tmp_ts= read_timestamp(s, stream_index, &tmp_pos, INT64_MAX);
ts_max= tmp_ts;
ts = read_timestamp(s, stream_index, &pos, INT64_MAX);
assert(ts != AV_NOPTS_VALUE);
ts_max = ts;
ts_min = ts;
pos = av_rescale(target_ts - ts_min, pos_max - pos_min, ts_max - ts_min)
pos_min = s->data_offset;
pos_max = avio_size(s->pb) - 1;
if     (pos < pos_min) pos= pos_min;
else if(pos > pos_max) pos= pos_max;
avio_seek(s->pb, pos, SEEK_SET);
index = av_index_search_timestamp(st, timestamp, flags);
if(s->iformat->read_seek(s, stream_index, timestamp, flags) >= 0)
return seek_frame_byte(s, stream_index, timestamp, flags);
timestamp = av_rescale(timestamp, st->time_base.den, AV_TIME_BASE * (int64_t)st->time_base.num);
ret = s->iformat->read_seek(s, stream_index, timestamp, flags);
return ff_seek_frame_binary(s, stream_index, timestamp, flags);
ret = av_seek_frame(s, stream_index, ts, flags | (dir^AVSEEK_FLAG_BACKWARD));
static int seek_frame_byte(AVFormatContext *s, int stream_index, int64_t pos, int flags){
avio_seek(s->pb, pos, SEEK_SET);
ret = av_seek_frame(s, stream_index, ts, flags | (dir^AVSEEK_FLAG_BACKWARD));
int av_seek_frame(AVFormatContext *s, int stream_index, int64_t timestamp, int flags)
int ret = seek_frame_internal(s, stream_index, timestamp, flags);
int64_t timestamp, int flags)
return ff_seek_frame_binary(s, stream_index, timestamp, flags);
int ff_seek_frame_binary(AVFormatContext *s, int stream_index, int64_t target_ts, int flags)
av_dlog(s, "read_seek: %d %s\n", stream_index, av_ts2str(target_ts));
index= av_index_search_timestamp(st, target_ts, flags | AVSEEK_FLAG_BACKWARD);
int av_index_search_timestamp(AVStream *st, int64_t wanted_timestamp,
wanted_timestamp, flags);
int64_t wanted_timestamp, int flags)
index= av_index_search_timestamp(st, target_ts, flags & ~AVSEEK_FLAG_BACKWARD);
assert(e->timestamp >= target_ts);
ret = av_seek_frame(s, stream_index, ts, flags | (dir^AVSEEK_FLAG_BACKWARD));
int av_index_search_timestamp(AVStream *st, int64_t wanted_timestamp,
wanted_timestamp, flags);
int64_t wanted_timestamp, int flags)
assert(e->timestamp >= target_ts);
int avformat_seek_file(AVFormatContext *s, int stream_index, int64_t min_ts, int64_t ts, int64_t max_ts, int flags)
int ret = av_seek_frame(s, stream_index, ts, flags | dir);
ret = av_seek_frame(s, stream_index, dir ? max_ts : min_ts, flags | dir);
int64_t ff_gen_search(AVFormatContext *s, int stream_index, int64_t target_ts,
av_dlog(s, "gen_seek: %d %s\n", stream_index, av_ts2str(target_ts));
ts_min = read_timestamp(s, stream_index, &pos_min, INT64_MAX);
pos = av_rescale(target_ts - ts_min, pos_max - pos_min, ts_max - ts_min)
ret = av_seek_frame(s, stream_index, ts, flags | (dir^AVSEEK_FLAG_BACKWARD));
0

212 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 4417
int ff_url_join(char *str, int size, const char *proto,
int port, const char *fmt, ...)
str[0] = '\0';
av_strlcatf(str, size, "%s:
av_strlcatf(str, size, "%s@", authorization);
av_strlcat(str, "[", size);
av_strlcat(str, hostname, size);
av_strlcat(str, "]", size);
av_strlcat(str, hostname, size);
av_strlcat(str, hostname, size);
av_strlcatf(str, size, ":%d", port);
int len = strlen(str);
va_start(vl, fmt);
vsnprintf(str + len, size > len ? size - len : 0, fmt, vl);
0

213 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 4559
void ff_make_absolute_url(char *buf, int size, const char *base,
av_strlcpy(buf, base, size);
path_query = strchr(buf, '?');
sep = strrchr(buf, '/');
buf[0] = '\0';
sep = strrchr(buf, '/');
if (!strcmp(sep ? &sep[1] : buf, "..")) {
av_strlcat(buf, "/", size);
sep = strrchr(buf, '/');
if (!strcmp(sep ? &sep[1] : buf, "..")) {
buf[0] = '\0';
sep = strrchr(buf, '/');
if (!strcmp(sep ? &sep[1] : buf, "..")) {
0

215 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 505
const char *filename, void *logctx,
if ((ret = avio_open2(&s->pb, filename, AVIO_FLAG_READ | s->avio_flags,
return av_probe_input_buffer(s->pb, &s->iformat, filename, s, 0, s->probesize);
return av_probe_input_buffer(s->pb, &s->iformat, filename, s, 0, s->probesize);
unsigned int offset, unsigned int max_probe_size)
AVProbeData pd = { filename ? filename : "", NULL, -offset };
memset(pd.buf + pd.buf_size, 0, AVPROBE_PADDING_SIZE);
return av_probe_input_buffer(s->pb, &s->iformat, filename, s, 0, s->probesize);
unsigned int offset, unsigned int max_probe_size)
AVProbeData pd = { filename ? filename : "", NULL, -offset };
max_probe_size = PROBE_BUF_MAX;
max_probe_size = PROBE_BUF_MAX;
for(probe_size= PROBE_BUF_MIN; probe_size<=max_probe_size && !*fmt;
int buf_offset = (probe_size == PROBE_BUF_MIN) ? 0 : probe_size>>1;
if ((ret = avio_read(pb, buf + buf_offset, probe_size - buf_offset)) < 0) {
av_log(logctx, AV_LOG_DEBUG, "Format %s probed with size=%d and score=%d\n", (*fmt)->name, probe_size, score);
probe_size = FFMIN(probe_size<<1, FFMAX(max_probe_size, probe_size+1))) {
buftmp = av_realloc(buf, probe_size + AVPROBE_PADDING_SIZE);
memset(pd.buf + pd.buf_size, 0, AVPROBE_PADDING_SIZE);
int avformat_open_input(AVFormatContext **ps, const char *filename, AVInputFormat *fmt, AVDictionary **options)
if ((ret = init_input(s, filename, &tmp)) < 0)
static int init_input(AVFormatContext *s, const char *filename, AVDictionary **options)
return av_probe_input_buffer(s->pb, &s->iformat, filename, s, 0, s->probesize);
const char *filename, void *logctx,
AVProbeData pd = { filename ? filename : "", NULL, -offset };
memset(pd.buf + pd.buf_size, 0, AVPROBE_PADDING_SIZE);
0

216 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 4418
va_list vl;
va_start(vl, fmt);
vsnprintf(str + len, size > len ? size - len : 0, fmt, vl);
va_end(vl);
0

217 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cppfunc 4418
va_list vl;
va_start(vl, fmt);
vsnprintf(str + len, size > len ? size - len : 0, fmt, vl);
va_end(vl);
0

250 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 4171
PRINT("%08x ", i);
PRINT(" ");
PRINT("\n");
hex_dump_internal(avcl, NULL, level, buf, size);
PRINT("  duration=%0.3f\n", pkt->duration * av_q2d(time_base));
PRINT("N/A");
PRINT("%0.3f", pkt->dts * av_q2d(time_base));
PRINT("  pts=");
PRINT("N/A");
PRINT("%0.3f", pkt->pts * av_q2d(time_base));
PRINT("\n");
PRINT("  size=%d\n", pkt->size);
av_hex_dump(f, pkt->data, pkt->size);
pkt_dump_internal(avcl, NULL, level, pkt, dump_payload, tb);
pkt_dump_internal(avcl, NULL, level, pkt, dump_payload, st->time_base);
void av_pkt_dump(FILE *f, AVPacket *pkt, int dump_payload)
pkt_dump_internal(NULL, f, 0, pkt, dump_payload, tb);
static void pkt_dump_internal(void *avcl, FILE *f, int level, AVPacket *pkt, int dump_payload, AVRational time_base)
PRINT("stream #%d:\n", pkt->stream_index);
PRINT("  keyframe=%d\n", ((pkt->flags & AV_PKT_FLAG_KEY) != 0));
PRINT("  dts=");
av_hex_dump(f, pkt->data, pkt->size);
void av_hex_dump(FILE *f, uint8_t *buf, int size)
hex_dump_internal(NULL, f, 0, buf, size);
static void hex_dump_internal(void *avcl, FILE *f, int level, uint8_t *buf, int size)
PRINT("\n");
void av_pkt_dump2(FILE *f, AVPacket *pkt, int dump_payload, AVStream *st)
pkt_dump_internal(NULL, f, 0, pkt, dump_payload, st->time_base);
0

261 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 4296
const char *p, *ls, *ls2, *at, *col, *brk;
av_strlcpy(proto, url, FFMIN(proto_size, p + 1 - url));
p++;
if (*p == '/') p++;
if (*p == '/') p++;
ls = strchr(p, '/');
ls2 = strchr(p, '?');
ls = ls2;
ls = FFMIN(ls, ls2);
av_strlcpy(path, ls, path_size);
ls = &p[strlen(p)];
if ((at = strchr(p, '@')) && at < ls) {
FFMIN(authorization_size, at + 1 - p));
p = at + 1;
if (*p == '[' && (brk = strchr(p, ']')) && brk < ls) {
} else if ((col = strchr(p, ':')) && col < ls) {
FFMIN(col + 1 - p, hostname_size));
if (port_ptr) *port_ptr = atoi(col + 1);
0

262 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cppfunc 4296
const char *p, *ls, *ls2, *at, *col, *brk;
av_strlcpy(proto, url, FFMIN(proto_size, p + 1 - url));
p++;
if (*p == '/') p++;
if (*p == '/') p++;
ls = strchr(p, '/');
ls2 = strchr(p, '?');
ls = ls2;
ls = FFMIN(ls, ls2);
av_strlcpy(path, ls, path_size);
ls = &p[strlen(p)];
if ((at = strchr(p, '@')) && at < ls) {
FFMIN(authorization_size, at + 1 - p));
p = at + 1;
if (*p == '[' && (brk = strchr(p, ']')) && brk < ls) {
} else if ((col = strchr(p, ':')) && col < ls) {
FFMIN(col + 1 - p, hostname_size));
if (port_ptr) *port_ptr = atoi(col + 1);
0

271 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 4292
const char *url)
const char *p, *ls, *ls2, *at, *col, *brk;
if ((p = strchr(url, ':'))) {
av_strlcpy(proto, url, FFMIN(proto_size, p + 1 - url));
p++;
if (*p == '/') p++;
if (*p == '/') p++;
ls = strchr(p, '/');
ls2 = strchr(p, '?');
ls = ls2;
ls = FFMIN(ls, ls2);
av_strlcpy(path, ls, path_size);
ls = &p[strlen(p)];
if ((at = strchr(p, '@')) && at < ls) {
FFMIN(authorization_size, at + 1 - p));
p = at + 1;
if (*p == '[' && (brk = strchr(p, ']')) && brk < ls) {
FFMIN(hostname_size, brk - p));
*port_ptr = atoi(brk + 2);
0

272 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cppfunc 4292
const char *url)
const char *p, *ls, *ls2, *at, *col, *brk;
if ((p = strchr(url, ':'))) {
av_strlcpy(proto, url, FFMIN(proto_size, p + 1 - url));
p++;
if (*p == '/') p++;
if (*p == '/') p++;
ls = strchr(p, '/');
ls2 = strchr(p, '?');
ls = ls2;
ls = FFMIN(ls, ls2);
av_strlcpy(path, ls, path_size);
ls = &p[strlen(p)];
if ((at = strchr(p, '@')) && at < ls) {
FFMIN(authorization_size, at + 1 - p));
p = at + 1;
if (*p == '[' && (brk = strchr(p, ']')) && brk < ls) {
FFMIN(hostname_size, brk - p));
*port_ptr = atoi(brk + 2);
0

287 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 4521
void ff_make_absolute_url(char *buf, int size, const char *base,
av_strlcpy(buf, base, size);
sep = strstr(buf, ":
sep += 3;
sep = strchr(sep, '/');
0

290 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 4486
void ff_parse_key_value(const char *str, ff_parse_key_val_cb callback_get_buf,
const char *ptr = str;
while (*ptr && (isspace(*ptr) || *ptr == ','))
ptr++;
key = ptr;
if (!(ptr = strchr(key, '=')))
ptr++;
ptr += 2;
ptr++;
ptr++;
key = ptr;
if (!(ptr = strchr(key, '=')))
ptr++;
for (; *ptr && !(isspace(*ptr) || *ptr == ','); ptr++)
0

291 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cppfunc 4486
void ff_parse_key_value(const char *str, ff_parse_key_val_cb callback_get_buf,
const char *ptr = str;
while (*ptr && (isspace(*ptr) || *ptr == ','))
ptr++;
key = ptr;
if (!(ptr = strchr(key, '=')))
ptr++;
ptr += 2;
ptr++;
ptr++;
key = ptr;
if (!(ptr = strchr(key, '=')))
ptr++;
for (; *ptr && !(isspace(*ptr) || *ptr == ','); ptr++)
0

297 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 4453
void ff_parse_key_value(const char *str, ff_parse_key_val_cb callback_get_buf,
const char *ptr = str;
while (*ptr && (isspace(*ptr) || *ptr == ','))
ptr++;
if (!(ptr = strchr(key, '=')))
while (*ptr && (isspace(*ptr) || *ptr == ','))
ptr++;
while (*ptr && (isspace(*ptr) || *ptr == ','))
ptr++;
ptr += 2;
ptr++;
ptr++;
for (; *ptr && !(isspace(*ptr) || *ptr == ','); ptr++)
while (*ptr && (isspace(*ptr) || *ptr == ','))
0

298 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cppfunc 4453
void ff_parse_key_value(const char *str, ff_parse_key_val_cb callback_get_buf,
const char *ptr = str;
while (*ptr && (isspace(*ptr) || *ptr == ','))
ptr++;
if (!(ptr = strchr(key, '=')))
while (*ptr && (isspace(*ptr) || *ptr == ','))
ptr++;
while (*ptr && (isspace(*ptr) || *ptr == ','))
ptr++;
ptr += 2;
ptr++;
ptr++;
for (; *ptr && !(isspace(*ptr) || *ptr == ','); ptr++)
while (*ptr && (isspace(*ptr) || *ptr == ','))
0

315 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 201
if (!av_strncasecmp(name, names, len))
return !av_strcasecmp(name, names);
return av_guess_format("image2", NULL, NULL);
if (fmt->name && short_name && match_format(short_name, fmt->name))
oformat = av_guess_format(NULL, filename, NULL);
static int match_format(const char *name, const char *names)
namelen = strlen(name);
AVOutputFormat *av_guess_format(const char *short_name, const char *filename,
if (fmt->name && short_name && match_format(short_name, fmt->name))
AVInputFormat *av_find_input_format(const char *short_name)
if (match_format(short_name, fmt->name))
AVFormatContext *avformat_alloc_output_context(const char *format,
int ret = avformat_alloc_output_context2(&avctx, oformat, format, filename);
const char *format, const char *filename)
oformat = av_guess_format(format, NULL, NULL);
0

332 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 2861
st = ic->streams[i];
av_reduce(&st->avg_frame_rate.num, &st->avg_frame_rate.den,
for (j = 1; j < MAX_STD_TIMEBASES; j++) {
AVRational std_fps = { get_std_framerate(j), 12*1001 };
av_reduce(&st->avg_frame_rate.num, &st->avg_frame_rate.den,
double error = fabs(av_q2d(st->avg_frame_rate) / av_q2d(std_fps) - 1);
static int get_std_framerate(int i){
if(i<60*12) return (i+1)*1001;
AVRational std_fps = { get_std_framerate(j), 12*1001 };
double error = fabs(av_q2d(st->avg_frame_rate) / av_q2d(std_fps) - 1);
0

349 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 4715
const char *spec)
switch (*spec++) {
if (*spec++ == ':') {
int i, index = strtol(spec, NULL, 0);
0

350 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cppfunc 4715
const char *spec)
switch (*spec++) {
if (*spec++ == ':') {
int i, index = strtol(spec, NULL, 0);
0

362 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 423
else  return first_iformat;
AVInputFormat *fmt1 = NULL, *fmt;
fmt = NULL;
while ((fmt1 = av_iformat_next(fmt1))) {
score = fmt1->read_probe(&lpd);
fmt = fmt1;
fmt = NULL;
return fmt;
AVInputFormat *fmt = av_probe_input_format3(pd, 1, &score);
pd->buf_size, MAX_PROBE_PACKETS - st->probe_packets, fmt->name, score);
if (!strcmp(fmt->name, fmt_id_type[i].name)) {
AVInputFormat  *av_iformat_next(AVInputFormat  *f)
if(f) return f->next;
while ((fmt1 = av_iformat_next(fmt1))) {
fmt = fmt1;
return fmt;
AVInputFormat *fmt = av_probe_input_format3(pd, 1, &score);
pd->buf_size, MAX_PROBE_PACKETS - st->probe_packets, fmt->name, score);
if (!strcmp(fmt->name, fmt_id_type[i].name)) {
0

378 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 2777
st = ic->streams[i];
st->codec->time_base= st->time_base;
st->parser = av_parser_init(st->codec->codec_id);
avcodec_get_name(st->codec->codec_id));
avcodec_find_decoder(st->codec->codec_id);
st = ic->streams[i];
if (!has_codec_parameters(st, NULL))
st->info->fps_first_dts = st->info->fps_last_dts = AV_NOPTS_VALUE;
if (!has_codec_parameters(st, NULL))
st->info->fps_first_dts = st->info->fps_last_dts = AV_NOPTS_VALUE;
if (!has_codec_parameters(st, NULL))
st->info->fps_first_dts     = pkt->dts;
if (!has_codec_parameters(st, NULL))
st->info->fps_first_dts_idx = st->codec_info_nb_frames;
if (!has_codec_parameters(st, NULL))
st->info->fps_last_dts_idx = st->codec_info_nb_frames;
t = av_rescale_q(st->info->codec_info_duration, st->time_base, AV_TIME_BASE_Q);
st->info->codec_info_duration += pkt->duration;
if (!has_codec_parameters(st, NULL))
int64_t last = st->info->last_dts;
double dts= (is_relative(pkt->dts) ?  pkt->dts - RELATIVE_TS_BASE : pkt->dts) * av_q2d(st->time_base);
int64_t duration= pkt->dts - last;
for (i=0; i<FF_ARRAY_ELEMS(st->info->duration_error[0][0]); i++) {
int framerate= get_std_framerate(i);
double sdts= dts*framerate/(1001*12);
for(j=0; j<2; j++){
int ticks= lrintf(sdts+j*0.5);
double error= sdts - ticks + j*0.5;
st->info->duration_error[j][0][i] += error;
for (i=0; i<FF_ARRAY_ELEMS(st->info->duration_error[0][0]); i++) {
if (!has_codec_parameters(st, NULL))
st->info->duration_error[j][1][i] += error*error;
for (i=0; i<FF_ARRAY_ELEMS(st->info->duration_error[0][0]); i++) {
if (!has_codec_parameters(st, NULL))
st->info->duration_count++;
if (!has_codec_parameters(st, NULL))
st->info->duration_gcd = av_gcd(st->info->duration_gcd, duration);
if (!has_codec_parameters(st, NULL))
st->info->last_dts = pkt->dts;
if (!has_codec_parameters(st, NULL))
st = ic->streams[pkt->stream_index];
st->codec->extradata= av_malloc(st->codec->extradata_size + FF_INPUT_BUFFER_PADDING_SIZE);
memcpy(st->codec->extradata, pkt->data, st->codec->extradata_size);
memset(st->codec->extradata + i, 0, FF_INPUT_BUFFER_PADDING_SIZE);
int i= st->parser->parser->split(st->codec, pkt->data, pkt->size);
st->codec->extradata_size= i;
st->codec->extradata= av_malloc(st->codec->extradata_size + FF_INPUT_BUFFER_PADDING_SIZE);
memset(st->codec->extradata + i, 0, FF_INPUT_BUFFER_PADDING_SIZE);
static int has_codec_parameters(AVStream *st, const char **errmsg_ptr)
if (!has_codec_parameters(st, NULL))
if(   tb_unreliable(st->codec) && !(st->r_frame_rate.num && st->avg_frame_rate.num)
static int tb_unreliable(AVCodecContext *c){
if(   tb_unreliable(st->codec) && !(st->r_frame_rate.num && st->avg_frame_rate.num)
int i= st->parser->parser->split(st->codec, pkt->data, pkt->size);
st->codec->extradata_size= i;
st->codec->extradata= av_malloc(st->codec->extradata_size + FF_INPUT_BUFFER_PADDING_SIZE);
memset(st->codec->extradata + i, 0, FF_INPUT_BUFFER_PADDING_SIZE);
static int is_relative(int64_t ts) {
st->info->fps_last_dts = pkt->dts;
if (!has_codec_parameters(st, NULL))
static int get_std_framerate(int i){
if(i<60*12) return (i+1)*1001;
int framerate= get_std_framerate(i);
double sdts= dts*framerate/(1001*12);
int ticks= lrintf(sdts+j*0.5);
double error= sdts - ticks + j*0.5;
st->info->duration_error[j][0][i] += error;
for (i=0; i<FF_ARRAY_ELEMS(st->info->duration_error[0][0]); i++) {
if (!has_codec_parameters(st, NULL))
0

386 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 3917
AVDictionaryEntry *tag=NULL;
while((tag=av_dict_get(m, "", tag, AV_DICT_IGNORE_SUFFIX))) {
if(strcmp("language", tag->key)){
av_log(ctx, AV_LOG_INFO, "%s  %-16s: ", indent, tag->key);
while((tag=av_dict_get(m, "", tag, AV_DICT_IGNORE_SUFFIX))) {
if(strcmp("language", tag->key)){
uint8_t *printed = ic->nb_streams ? av_mallocz(ic->nb_streams) : NULL;
dump_metadata(NULL, ic->metadata, "  ");
us = ic->duration % AV_TIME_BASE;
(100 * us) / AV_TIME_BASE);
us = abs(ic->start_time % AV_TIME_BASE);
AVChapter *ch = ic->chapters[i];
dump_metadata(NULL, ch->metadata, "    ");
dump_metadata(NULL, ic->programs[j]->metadata, "    ");
dump_stream_format(ic, ic->programs[j]->stream_index[k], index, is_output);
static void dump_stream_format(AVFormatContext *ic, int i, int index, int is_output)
AVStream *st = ic->streams[i];
AVDictionaryEntry *lang = av_dict_get(st->metadata, "language", NULL, 0);
dump_metadata(NULL, st->metadata, "    ");
dump_stream_format(ic, ic->programs[j]->stream_index[k], index, is_output);
static void dump_metadata(void *ctx, AVDictionary *m, const char *indent)
if(m && !(av_dict_count(m) == 1 && av_dict_get(m, "language", NULL, 0))){
while((tag=av_dict_get(m, "", tag, AV_DICT_IGNORE_SUFFIX))) {
if(strcmp("language", tag->key)){
0

388 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 1745
*pkt_buf_end = NULL;
free_packet_buffer(&s->raw_packet_buffer, &s->raw_packet_buffer_end);
a = - 1;
m = (a + b) >> 1;
b = m;
a = m;
m= (flags & AVSEEK_FLAG_BACKWARD) ? a : b;
m += (flags & AVSEEK_FLAG_BACKWARD) ? -1 : 1;
return -1;
return  m;
return ff_index_search_timestamp(st->index_entries, st->nb_index_entries,
index= av_index_search_timestamp(st, target_ts, flags | AVSEEK_FLAG_BACKWARD);
index= FFMAX(index, 0);
assert(index==0);
static void free_packet_buffer(AVPacketList **pkt_buf, AVPacketList **pkt_buf_end)
free_packet_buffer(&s->raw_packet_buffer, &s->raw_packet_buffer_end);
static void flush_packet_queue(AVFormatContext *s)
flush_packet_queue(s);
void ff_read_frame_flush(AVFormatContext *s)
ff_read_frame_flush(s);
return ff_seek_frame_binary(s, stream_index, timestamp, flags);
int ff_seek_frame_binary(AVFormatContext *s, int stream_index, int64_t target_ts, int flags)
st= s->streams[stream_index];
index= av_index_search_timestamp(st, target_ts, flags | AVSEEK_FLAG_BACKWARD);
int av_index_search_timestamp(AVStream *st, int64_t wanted_timestamp,
return ff_index_search_timestamp(st->index_entries, st->nb_index_entries,
int ff_index_search_timestamp(const AVIndexEntry *entries, int nb_entries,
b = nb_entries;
a= b-1;
m= (flags & AVSEEK_FLAG_BACKWARD) ? a : b;
return  m;
return ff_index_search_timestamp(st->index_entries, st->nb_index_entries,
index= av_index_search_timestamp(st, target_ts, flags | AVSEEK_FLAG_BACKWARD);
index= FFMAX(index, 0);
assert(index==0);
0

389 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cppfunc 1745
*pkt_buf_end = NULL;
free_packet_buffer(&s->raw_packet_buffer, &s->raw_packet_buffer_end);
a = - 1;
m = (a + b) >> 1;
b = m;
a = m;
m= (flags & AVSEEK_FLAG_BACKWARD) ? a : b;
m += (flags & AVSEEK_FLAG_BACKWARD) ? -1 : 1;
return -1;
return  m;
return ff_index_search_timestamp(st->index_entries, st->nb_index_entries,
index= av_index_search_timestamp(st, target_ts, flags | AVSEEK_FLAG_BACKWARD);
index= FFMAX(index, 0);
assert(index==0);
static void free_packet_buffer(AVPacketList **pkt_buf, AVPacketList **pkt_buf_end)
free_packet_buffer(&s->raw_packet_buffer, &s->raw_packet_buffer_end);
static void flush_packet_queue(AVFormatContext *s)
flush_packet_queue(s);
void ff_read_frame_flush(AVFormatContext *s)
ff_read_frame_flush(s);
return ff_seek_frame_binary(s, stream_index, timestamp, flags);
int ff_seek_frame_binary(AVFormatContext *s, int stream_index, int64_t target_ts, int flags)
st= s->streams[stream_index];
index= av_index_search_timestamp(st, target_ts, flags | AVSEEK_FLAG_BACKWARD);
int av_index_search_timestamp(AVStream *st, int64_t wanted_timestamp,
return ff_index_search_timestamp(st->index_entries, st->nb_index_entries,
int ff_index_search_timestamp(const AVIndexEntry *entries, int nb_entries,
b = nb_entries;
a= b-1;
m= (flags & AVSEEK_FLAG_BACKWARD) ? a : b;
return  m;
return ff_index_search_timestamp(st->index_entries, st->nb_index_entries,
index= av_index_search_timestamp(st, target_ts, flags | AVSEEK_FLAG_BACKWARD);
index= FFMAX(index, 0);
assert(index==0);
0

393 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 1749
*pkt_buf_end = NULL;
free_packet_buffer(&s->raw_packet_buffer, &s->raw_packet_buffer_end);
a = - 1;
m = (a + b) >> 1;
b = m;
a = m;
m= (flags & AVSEEK_FLAG_BACKWARD) ? a : b;
m += (flags & AVSEEK_FLAG_BACKWARD) ? -1 : 1;
return -1;
return  m;
return ff_index_search_timestamp(st->index_entries, st->nb_index_entries,
index= av_index_search_timestamp(st, target_ts, flags & ~AVSEEK_FLAG_BACKWARD);
assert(index < st->nb_index_entries);
static void free_packet_buffer(AVPacketList **pkt_buf, AVPacketList **pkt_buf_end)
free_packet_buffer(&s->raw_packet_buffer, &s->raw_packet_buffer_end);
static void flush_packet_queue(AVFormatContext *s)
flush_packet_queue(s);
void ff_read_frame_flush(AVFormatContext *s)
ff_read_frame_flush(s);
return ff_seek_frame_binary(s, stream_index, timestamp, flags);
int ff_seek_frame_binary(AVFormatContext *s, int stream_index, int64_t target_ts, int flags)
st= s->streams[stream_index];
index= av_index_search_timestamp(st, target_ts, flags | AVSEEK_FLAG_BACKWARD);
int av_index_search_timestamp(AVStream *st, int64_t wanted_timestamp,
return ff_index_search_timestamp(st->index_entries, st->nb_index_entries,
index= av_index_search_timestamp(st, target_ts, flags | AVSEEK_FLAG_BACKWARD);
index= av_index_search_timestamp(st, target_ts, flags & ~AVSEEK_FLAG_BACKWARD);
int av_index_search_timestamp(AVStream *st, int64_t wanted_timestamp,
return ff_index_search_timestamp(st->index_entries, st->nb_index_entries,
int ff_index_search_timestamp(const AVIndexEntry *entries, int nb_entries,
b = nb_entries;
a= b-1;
m= (flags & AVSEEK_FLAG_BACKWARD) ? a : b;
return  m;
return ff_index_search_timestamp(st->index_entries, st->nb_index_entries,
index= av_index_search_timestamp(st, target_ts, flags & ~AVSEEK_FLAG_BACKWARD);
assert(index < st->nb_index_entries);
0

394 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cppfunc 1749
*pkt_buf_end = NULL;
free_packet_buffer(&s->raw_packet_buffer, &s->raw_packet_buffer_end);
a = - 1;
m = (a + b) >> 1;
b = m;
a = m;
m= (flags & AVSEEK_FLAG_BACKWARD) ? a : b;
m += (flags & AVSEEK_FLAG_BACKWARD) ? -1 : 1;
return -1;
return  m;
return ff_index_search_timestamp(st->index_entries, st->nb_index_entries,
index= av_index_search_timestamp(st, target_ts, flags & ~AVSEEK_FLAG_BACKWARD);
assert(index < st->nb_index_entries);
static void free_packet_buffer(AVPacketList **pkt_buf, AVPacketList **pkt_buf_end)
free_packet_buffer(&s->raw_packet_buffer, &s->raw_packet_buffer_end);
static void flush_packet_queue(AVFormatContext *s)
flush_packet_queue(s);
void ff_read_frame_flush(AVFormatContext *s)
ff_read_frame_flush(s);
return ff_seek_frame_binary(s, stream_index, timestamp, flags);
int ff_seek_frame_binary(AVFormatContext *s, int stream_index, int64_t target_ts, int flags)
st= s->streams[stream_index];
index= av_index_search_timestamp(st, target_ts, flags | AVSEEK_FLAG_BACKWARD);
int av_index_search_timestamp(AVStream *st, int64_t wanted_timestamp,
return ff_index_search_timestamp(st->index_entries, st->nb_index_entries,
index= av_index_search_timestamp(st, target_ts, flags | AVSEEK_FLAG_BACKWARD);
index= av_index_search_timestamp(st, target_ts, flags & ~AVSEEK_FLAG_BACKWARD);
int av_index_search_timestamp(AVStream *st, int64_t wanted_timestamp,
return ff_index_search_timestamp(st->index_entries, st->nb_index_entries,
int ff_index_search_timestamp(const AVIndexEntry *entries, int nb_entries,
b = nb_entries;
a= b-1;
m= (flags & AVSEEK_FLAG_BACKWARD) ? a : b;
return  m;
return ff_index_search_timestamp(st->index_entries, st->nb_index_entries,
index= av_index_search_timestamp(st, target_ts, flags & ~AVSEEK_FLAG_BACKWARD);
assert(index < st->nb_index_entries);
0

406 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 4334
int ff_hex_to_data(uint8_t *data, const char *p)
p += strspn(p, SPACE_CHARS);
c = toupper((unsigned char) *p++);
0

407 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cppfunc 4334
int ff_hex_to_data(uint8_t *data, const char *p)
p += strspn(p, SPACE_CHARS);
c = toupper((unsigned char) *p++);
0

418 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 2776
if(i<60*12) return (i+1)*1001;
st = ic->streams[i];
st->codec->time_base= st->time_base;
st->parser = av_parser_init(st->codec->codec_id);
avcodec_get_name(st->codec->codec_id));
avcodec_find_decoder(st->codec->codec_id);
st = ic->streams[i];
if (!has_codec_parameters(st, NULL))
st->info->fps_first_dts = st->info->fps_last_dts = AV_NOPTS_VALUE;
if (!has_codec_parameters(st, NULL))
st->info->fps_first_dts = st->info->fps_last_dts = AV_NOPTS_VALUE;
if (!has_codec_parameters(st, NULL))
st->info->fps_first_dts     = pkt->dts;
if (!has_codec_parameters(st, NULL))
st->info->fps_first_dts_idx = st->codec_info_nb_frames;
if (!has_codec_parameters(st, NULL))
st->info->fps_last_dts_idx = st->codec_info_nb_frames;
if (!has_codec_parameters(st, NULL))
t = av_rescale_q(st->info->codec_info_duration, st->time_base, AV_TIME_BASE_Q);
st->info->codec_info_duration += pkt->duration;
if (!has_codec_parameters(st, NULL))
int64_t last = st->info->last_dts;
double dts= (is_relative(pkt->dts) ?  pkt->dts - RELATIVE_TS_BASE : pkt->dts) * av_q2d(st->time_base);
int64_t duration= pkt->dts - last;
for (i=0; i<FF_ARRAY_ELEMS(st->info->duration_error[0][0]); i++) {
int framerate= get_std_framerate(i);
double sdts= dts*framerate/(1001*12);
for(j=0; j<2; j++){
int ticks= lrintf(sdts+j*0.5);
double error= sdts - ticks + j*0.5;
st->info->duration_error[j][0][i] += error;
for (i=0; i<FF_ARRAY_ELEMS(st->info->duration_error[0][0]); i++) {
if (!has_codec_parameters(st, NULL))
st->info->duration_error[j][1][i] += error*error;
for (i=0; i<FF_ARRAY_ELEMS(st->info->duration_error[0][0]); i++) {
if (!has_codec_parameters(st, NULL))
st->info->duration_count++;
if (!has_codec_parameters(st, NULL))
st->info->duration_gcd = av_gcd(st->info->duration_gcd, duration);
if (!has_codec_parameters(st, NULL))
st->info->last_dts = pkt->dts;
if (!has_codec_parameters(st, NULL))
st = ic->streams[pkt->stream_index];
st->codec->extradata= av_malloc(st->codec->extradata_size + FF_INPUT_BUFFER_PADDING_SIZE);
memcpy(st->codec->extradata, pkt->data, st->codec->extradata_size);
memset(st->codec->extradata + i, 0, FF_INPUT_BUFFER_PADDING_SIZE);
int i= st->parser->parser->split(st->codec, pkt->data, pkt->size);
st->codec->extradata_size= i;
st->codec->extradata= av_malloc(st->codec->extradata_size + FF_INPUT_BUFFER_PADDING_SIZE);
memcpy(st->codec->extradata, pkt->data, st->codec->extradata_size);
static int has_codec_parameters(AVStream *st, const char **errmsg_ptr)
if (!has_codec_parameters(st, NULL))
if(   tb_unreliable(st->codec) && !(st->r_frame_rate.num && st->avg_frame_rate.num)
static int tb_unreliable(AVCodecContext *c){
if(   tb_unreliable(st->codec) && !(st->r_frame_rate.num && st->avg_frame_rate.num)
int i= st->parser->parser->split(st->codec, pkt->data, pkt->size);
st->codec->extradata_size= i;
st->codec->extradata= av_malloc(st->codec->extradata_size + FF_INPUT_BUFFER_PADDING_SIZE);
memcpy(st->codec->extradata, pkt->data, st->codec->extradata_size);
memset(st->codec->extradata + i, 0, FF_INPUT_BUFFER_PADDING_SIZE);
memcpy(st->codec->extradata, pkt->data, st->codec->extradata_size);
static int is_relative(int64_t ts) {
st->info->fps_last_dts = pkt->dts;
if (!has_codec_parameters(st, NULL))
static int get_std_framerate(int i){
if(i<60*12) return (i+1)*1001;
int framerate= get_std_framerate(i);
double sdts= dts*framerate/(1001*12);
int ticks= lrintf(sdts+j*0.5);
double error= sdts - ticks + j*0.5;
st->info->duration_error[j][0][i] += error;
for (i=0; i<FF_ARRAY_ELEMS(st->info->duration_error[0][0]); i++) {
if (!has_codec_parameters(st, NULL))
0

426 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 4206
PRINT("stream #%d:\n", pkt->stream_index);
PRINT("  keyframe=%d\n", ((pkt->flags & AV_PKT_FLAG_KEY) != 0));
PRINT("  duration=%0.3f\n", pkt->duration * av_q2d(time_base));
PRINT("  dts=");
PRINT("N/A");
PRINT("%0.3f", pkt->dts * av_q2d(time_base));
PRINT("  pts=");
PRINT("N/A");
PRINT("%0.3f", pkt->pts * av_q2d(time_base));
PRINT("\n");
PRINT("  size=%d\n", pkt->size);
pkt_dump_internal(avcl, NULL, level, pkt, dump_payload, tb);
pkt_dump_internal(avcl, NULL, level, pkt, dump_payload, st->time_base);
static void pkt_dump_internal(void *avcl, FILE *f, int level, AVPacket *pkt, int dump_payload, AVRational time_base)
PRINT("  size=%d\n", pkt->size);
void av_pkt_dump2(FILE *f, AVPacket *pkt, int dump_payload, AVStream *st)
pkt_dump_internal(NULL, f, 0, pkt, dump_payload, st->time_base);
void av_pkt_dump(FILE *f, AVPacket *pkt, int dump_payload)
pkt_dump_internal(NULL, f, 0, pkt, dump_payload, tb);
0

427 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 4205
pkt_dump_internal(avcl, NULL, level, pkt, dump_payload, tb);
pkt_dump_internal(avcl, NULL, level, pkt, dump_payload, st->time_base);
static void pkt_dump_internal(void *avcl, FILE *f, int level, AVPacket *pkt, int dump_payload, AVRational time_base)
PRINT("\n");
void av_pkt_dump2(FILE *f, AVPacket *pkt, int dump_payload, AVStream *st)
pkt_dump_internal(NULL, f, 0, pkt, dump_payload, st->time_base);
void av_pkt_dump(FILE *f, AVPacket *pkt, int dump_payload)
pkt_dump_internal(NULL, f, 0, pkt, dump_payload, tb);
0

430 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 4200
pkt_dump_internal(avcl, NULL, level, pkt, dump_payload, tb);
pkt_dump_internal(avcl, NULL, level, pkt, dump_payload, st->time_base);
void av_pkt_dump(FILE *f, AVPacket *pkt, int dump_payload)
pkt_dump_internal(NULL, f, 0, pkt, dump_payload, tb);
static void pkt_dump_internal(void *avcl, FILE *f, int level, AVPacket *pkt, int dump_payload, AVRational time_base)
PRINT("  pts=");
void av_pkt_dump2(FILE *f, AVPacket *pkt, int dump_payload, AVStream *st)
pkt_dump_internal(NULL, f, 0, pkt, dump_payload, st->time_base);
0

434 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 4198
PRINT("stream #%d:\n", pkt->stream_index);
PRINT("  keyframe=%d\n", ((pkt->flags & AV_PKT_FLAG_KEY) != 0));
PRINT("  duration=%0.3f\n", pkt->duration * av_q2d(time_base));
PRINT("  dts=");
PRINT("%0.3f", pkt->dts * av_q2d(time_base));
pkt_dump_internal(avcl, NULL, level, pkt, dump_payload, tb);
pkt_dump_internal(avcl, NULL, level, pkt, dump_payload, st->time_base);
static void pkt_dump_internal(void *avcl, FILE *f, int level, AVPacket *pkt, int dump_payload, AVRational time_base)
PRINT("%0.3f", pkt->dts * av_q2d(time_base));
void av_pkt_dump2(FILE *f, AVPacket *pkt, int dump_payload, AVStream *st)
pkt_dump_internal(NULL, f, 0, pkt, dump_payload, st->time_base);
void av_pkt_dump(FILE *f, AVPacket *pkt, int dump_payload)
pkt_dump_internal(NULL, f, 0, pkt, dump_payload, tb);
0

435 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 4196
pkt_dump_internal(avcl, NULL, level, pkt, dump_payload, tb);
pkt_dump_internal(avcl, NULL, level, pkt, dump_payload, st->time_base);
void av_pkt_dump2(FILE *f, AVPacket *pkt, int dump_payload, AVStream *st)
pkt_dump_internal(NULL, f, 0, pkt, dump_payload, st->time_base);
static void pkt_dump_internal(void *avcl, FILE *f, int level, AVPacket *pkt, int dump_payload, AVRational time_base)
PRINT("N/A");
void av_pkt_dump(FILE *f, AVPacket *pkt, int dump_payload)
pkt_dump_internal(NULL, f, 0, pkt, dump_payload, tb);
0

436 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 4194
pkt_dump_internal(avcl, NULL, level, pkt, dump_payload, tb);
pkt_dump_internal(avcl, NULL, level, pkt, dump_payload, st->time_base);
void av_pkt_dump(FILE *f, AVPacket *pkt, int dump_payload)
pkt_dump_internal(NULL, f, 0, pkt, dump_payload, tb);
static void pkt_dump_internal(void *avcl, FILE *f, int level, AVPacket *pkt, int dump_payload, AVRational time_base)
PRINT("  dts=");
void av_pkt_dump2(FILE *f, AVPacket *pkt, int dump_payload, AVStream *st)
pkt_dump_internal(NULL, f, 0, pkt, dump_payload, st->time_base);
0

437 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 4192
pkt_dump_internal(avcl, NULL, level, pkt, dump_payload, tb);
pkt_dump_internal(avcl, NULL, level, pkt, dump_payload, st->time_base);
static void pkt_dump_internal(void *avcl, FILE *f, int level, AVPacket *pkt, int dump_payload, AVRational time_base)
PRINT("  duration=%0.3f\n", pkt->duration * av_q2d(time_base));
void av_pkt_dump2(FILE *f, AVPacket *pkt, int dump_payload, AVStream *st)
pkt_dump_internal(NULL, f, 0, pkt, dump_payload, st->time_base);
void av_pkt_dump(FILE *f, AVPacket *pkt, int dump_payload)
pkt_dump_internal(NULL, f, 0, pkt, dump_payload, tb);
0

438 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 4191
pkt_dump_internal(avcl, NULL, level, pkt, dump_payload, tb);
pkt_dump_internal(avcl, NULL, level, pkt, dump_payload, st->time_base);
void av_pkt_dump(FILE *f, AVPacket *pkt, int dump_payload)
pkt_dump_internal(NULL, f, 0, pkt, dump_payload, tb);
static void pkt_dump_internal(void *avcl, FILE *f, int level, AVPacket *pkt, int dump_payload, AVRational time_base)
PRINT("  keyframe=%d\n", ((pkt->flags & AV_PKT_FLAG_KEY) != 0));
void av_pkt_dump2(FILE *f, AVPacket *pkt, int dump_payload, AVStream *st)
pkt_dump_internal(NULL, f, 0, pkt, dump_payload, st->time_base);
0

439 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 4190
pkt_dump_internal(avcl, NULL, level, pkt, dump_payload, tb);
pkt_dump_internal(avcl, NULL, level, pkt, dump_payload, st->time_base);
static void pkt_dump_internal(void *avcl, FILE *f, int level, AVPacket *pkt, int dump_payload, AVRational time_base)
PRINT("stream #%d:\n", pkt->stream_index);
void av_pkt_dump2(FILE *f, AVPacket *pkt, int dump_payload, AVStream *st)
pkt_dump_internal(NULL, f, 0, pkt, dump_payload, st->time_base);
void av_pkt_dump(FILE *f, AVPacket *pkt, int dump_payload)
pkt_dump_internal(NULL, f, 0, pkt, dump_payload, tb);
0

442 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 4293
ls = strchr(p, '/');
ls2 = strchr(p, '?');
ls = ls2;
ls = FFMIN(ls, ls2);
av_strlcpy(path, ls, path_size);
ls = &p[strlen(p)];
if ((at = strchr(p, '@')) && at < ls) {
FFMIN(authorization_size, at + 1 - p));
p = at + 1;
if (*p == '[' && (brk = strchr(p, ']')) && brk < ls) {
} else if ((col = strchr(p, ':')) && col < ls) {
0

450 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 4109
return av_guess_format("image2", NULL, NULL);
oformat = av_guess_format(format, NULL, NULL);
AVOutputFormat *oformat, const char *filename)
int ret = avformat_alloc_output_context2(&avctx, oformat, format, filename);
const char *format, const char *filename)
oformat = av_guess_format(NULL, filename, NULL);
int av_filename_number_test(const char *filename)
return filename && (av_get_frame_filename(buf, sizeof(buf), filename, 1)>=0);
const char *path, int number)
p = path;
c = *p++;
nd = 0;
while (isdigit(*p)) {
nd = nd * 10 + *p++ - '0';
while (isdigit(*p)) {
int avformat_open_input(AVFormatContext **ps, const char *filename, AVInputFormat *fmt, AVDictionary **options)
if ((ret = init_input(s, filename, &tmp)) < 0)
static int init_input(AVFormatContext *s, const char *filename, AVDictionary **options)
return av_probe_input_buffer(s->pb, &s->iformat, filename, s, 0, s->probesize);
const char *filename, void *logctx,
return av_probe_input_buffer(s->pb, &s->iformat, filename, s, 0, s->probesize);
if ((ret = avio_open2(&s->pb, filename, AVIO_FLAG_READ | s->avio_flags,
if (!av_filename_number_test(filename)) {
AVOutputFormat *av_guess_format(const char *short_name, const char *filename,
ff_guess_image2_codec(filename) != AV_CODEC_ID_NONE) {
av_filename_number_test(filename) &&
0

451 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cppfunc 4109
return av_guess_format("image2", NULL, NULL);
oformat = av_guess_format(format, NULL, NULL);
AVOutputFormat *oformat, const char *filename)
int ret = avformat_alloc_output_context2(&avctx, oformat, format, filename);
const char *format, const char *filename)
oformat = av_guess_format(NULL, filename, NULL);
int av_filename_number_test(const char *filename)
return filename && (av_get_frame_filename(buf, sizeof(buf), filename, 1)>=0);
const char *path, int number)
p = path;
c = *p++;
nd = 0;
while (isdigit(*p)) {
nd = nd * 10 + *p++ - '0';
while (isdigit(*p)) {
int avformat_open_input(AVFormatContext **ps, const char *filename, AVInputFormat *fmt, AVDictionary **options)
if ((ret = init_input(s, filename, &tmp)) < 0)
static int init_input(AVFormatContext *s, const char *filename, AVDictionary **options)
return av_probe_input_buffer(s->pb, &s->iformat, filename, s, 0, s->probesize);
const char *filename, void *logctx,
return av_probe_input_buffer(s->pb, &s->iformat, filename, s, 0, s->probesize);
if ((ret = avio_open2(&s->pb, filename, AVIO_FLAG_READ | s->avio_flags,
if (!av_filename_number_test(filename)) {
AVOutputFormat *av_guess_format(const char *short_name, const char *filename,
ff_guess_image2_codec(filename) != AV_CODEC_ID_NONE) {
av_filename_number_test(filename) &&
0

454 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 202
while ((p = strchr(names, ','))) {
len = FFMAX(p - names, namelen);
if (!av_strncasecmp(name, names, len))
names = p+1;
while ((p = strchr(names, ','))) {
return !av_strcasecmp(name, names);
if (fmt->name && short_name && match_format(short_name, fmt->name))
if (match_format(short_name, fmt->name))
static int match_format(const char *name, const char *names)
while ((p = strchr(names, ','))) {
0

481 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 4276
const char *url)
if ((p = strchr(url, ':'))) {
av_strlcpy(proto, url, FFMIN(proto_size, p + 1 - url));
p++;
if (*p == '/') p++;
if (*p == '/') p++;
ls = strchr(p, '/');
ls2 = strchr(p, '?');
ls = &p[strlen(p)];
0

482 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cppfunc 4036
us = ic->duration % AV_TIME_BASE;
(100 * us) / AV_TIME_BASE);
us = abs(ic->start_time % AV_TIME_BASE);
0

492 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 4204
PRINT("stream #%d:\n", pkt->stream_index);
PRINT("  keyframe=%d\n", ((pkt->flags & AV_PKT_FLAG_KEY) != 0));
PRINT("  duration=%0.3f\n", pkt->duration * av_q2d(time_base));
PRINT("  dts=");
PRINT("N/A");
PRINT("%0.3f", pkt->dts * av_q2d(time_base));
PRINT("  pts=");
PRINT("%0.3f", pkt->pts * av_q2d(time_base));
pkt_dump_internal(avcl, NULL, level, pkt, dump_payload, tb);
pkt_dump_internal(avcl, NULL, level, pkt, dump_payload, st->time_base);
static void pkt_dump_internal(void *avcl, FILE *f, int level, AVPacket *pkt, int dump_payload, AVRational time_base)
PRINT("%0.3f", pkt->pts * av_q2d(time_base));
void av_pkt_dump2(FILE *f, AVPacket *pkt, int dump_payload, AVStream *st)
pkt_dump_internal(NULL, f, 0, pkt, dump_payload, st->time_base);
void av_pkt_dump(FILE *f, AVPacket *pkt, int dump_payload)
pkt_dump_internal(NULL, f, 0, pkt, dump_payload, tb);
0

501 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 4157
PRINT(" %02x", buf[i+j]);
PRINT("   ");
PRINT(" ");
PRINT("\n");
PRINT("%08x ", i);
hex_dump_internal(avcl, NULL, level, buf, size);
PRINT("stream #%d:\n", pkt->stream_index);
PRINT("  keyframe=%d\n", ((pkt->flags & AV_PKT_FLAG_KEY) != 0));
PRINT("  duration=%0.3f\n", pkt->duration * av_q2d(time_base));
PRINT("  dts=");
PRINT("N/A");
PRINT("%0.3f", pkt->dts * av_q2d(time_base));
PRINT("  pts=");
PRINT("N/A");
PRINT("%0.3f", pkt->pts * av_q2d(time_base));
PRINT("\n");
PRINT("  size=%d\n", pkt->size);
av_hex_dump(f, pkt->data, pkt->size);
pkt_dump_internal(avcl, NULL, level, pkt, dump_payload, tb);
pkt_dump_internal(avcl, NULL, level, pkt, dump_payload, st->time_base);
static void pkt_dump_internal(void *avcl, FILE *f, int level, AVPacket *pkt, int dump_payload, AVRational time_base)
av_hex_dump(f, pkt->data, pkt->size);
void av_hex_dump(FILE *f, uint8_t *buf, int size)
hex_dump_internal(NULL, f, 0, buf, size);
static void hex_dump_internal(void *avcl, FILE *f, int level, uint8_t *buf, int size)
PRINT("%08x ", i);
void av_pkt_dump2(FILE *f, AVPacket *pkt, int dump_payload, AVStream *st)
pkt_dump_internal(NULL, f, 0, pkt, dump_payload, st->time_base);
void av_pkt_dump(FILE *f, AVPacket *pkt, int dump_payload)
pkt_dump_internal(NULL, f, 0, pkt, dump_payload, tb);
0

521 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 3922
AVDictionaryEntry *tag=NULL;
while((tag=av_dict_get(m, "", tag, AV_DICT_IGNORE_SUFFIX))) {
if(strcmp("language", tag->key)){
while((tag=av_dict_get(m, "", tag, AV_DICT_IGNORE_SUFFIX))) {
const char *p = tag->value;
av_log(ctx, AV_LOG_INFO, "%s  %-16s: ", indent, tag->key);
while((tag=av_dict_get(m, "", tag, AV_DICT_IGNORE_SUFFIX))) {
const char *p = tag->value;
size_t len = strcspn(p, "\x8\xa\xb\xc\xd");
av_strlcpy(tmp, p, FFMIN(sizeof(tmp), len+1));
p += len;
size_t len = strcspn(p, "\x8\xa\xb\xc\xd");
if (*p) p++;
size_t len = strcspn(p, "\x8\xa\xb\xc\xd");
uint8_t *printed = ic->nb_streams ? av_mallocz(ic->nb_streams) : NULL;
dump_metadata(NULL, ic->metadata, "  ");
us = ic->duration % AV_TIME_BASE;
(100 * us) / AV_TIME_BASE);
us = abs(ic->start_time % AV_TIME_BASE);
AVChapter *ch = ic->chapters[i];
dump_metadata(NULL, ch->metadata, "    ");
dump_metadata(NULL, ic->programs[j]->metadata, "    ");
dump_stream_format(ic, ic->programs[j]->stream_index[k], index, is_output);
static void dump_stream_format(AVFormatContext *ic, int i, int index, int is_output)
AVStream *st = ic->streams[i];
AVDictionaryEntry *lang = av_dict_get(st->metadata, "language", NULL, 0);
dump_metadata(NULL, st->metadata, "    ");
dump_stream_format(ic, ic->programs[j]->stream_index[k], index, is_output);
static void dump_stream_format(AVFormatContext *ic, int i, int index, int is_output)
AVStream *st = ic->streams[i];
AVDictionaryEntry *lang = av_dict_get(st->metadata, "language", NULL, 0);
dump_metadata(NULL, st->metadata, "    ");
static void dump_metadata(void *ctx, AVDictionary *m, const char *indent)
if(m && !(av_dict_count(m) == 1 && av_dict_get(m, "language", NULL, 0))){
while((tag=av_dict_get(m, "", tag, AV_DICT_IGNORE_SUFFIX))) {
const char *p = tag->value;
size_t len = strcspn(p, "\x8\xa\xb\xc\xd");
0

526 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 232
return av_guess_format("image2", NULL, NULL);
oformat = av_guess_format(format, NULL, NULL);
oformat = av_guess_format(NULL, filename, NULL);
const char *mime_type)
if (fmt->mime_type && mime_type && !strcmp(fmt->mime_type, mime_type))
0

531 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 1649
if ((frame_size = av_get_audio_frame_duration(enc, size)) > 0)
frame_size = get_audio_frame_size(st->codec, pkt->size, 0);
avpriv_h264_has_num_reorder_frames(st->codec) == st->codec->has_b_frames)
st  = s->streams[cur_pkt.stream_index];
compute_pkt_fields(s, st, NULL, pkt);
st = s->streams[pkt->stream_index];
st->skip_samples = 0;
av_add_index_entry(st, pkt->pos, pkt->dts, 0, 0, AVINDEX_KEYFRAME);
entries = av_fast_realloc(*index_entries,
(*nb_index_entries + 1) *
*index_entries= entries;
index= ff_index_search_timestamp(*index_entries, *nb_index_entries, timestamp, AVSEEK_FLAG_ANY);
return ff_add_index_entry(&st->index_entries, &st->nb_index_entries,
int *nb_index_entries,
&st->index_entries_allocated_size, pos,
unsigned int *index_entries_allocated_size,
if((unsigned)*nb_index_entries + 1 >= UINT_MAX / sizeof(AVIndexEntry))
index_entries_allocated_size,
(*nb_index_entries + 1) *
sizeof(AVIndexEntry));
entries = av_fast_realloc(*index_entries,
sizeof(AVIndexEntry));
(*nb_index_entries + 1) *
a = - 1;
a= b-1;
m = (a + b) >> 1;
b = m;
a = m;
m= (flags & AVSEEK_FLAG_BACKWARD) ? a : b;
m += (flags & AVSEEK_FLAG_BACKWARD) ? -1 : 1;
return -1;
return  m;
index= ff_index_search_timestamp(*index_entries, *nb_index_entries, timestamp, AVSEEK_FLAG_ANY);
memmove(entries + index + 1, entries + index, sizeof(AVIndexEntry)*(*nb_index_entries - index));
static void compute_pkt_fields(AVFormatContext *s, AVStream *st,
compute_pkt_fields(s, st, NULL, pkt);
av_add_index_entry(st, pkt->pos, pkt->dts, 0, 0, AVINDEX_KEYFRAME);
int av_add_index_entry(AVStream *st,
av_add_index_entry(st, pkt->pos, pkt->dts, 0, 0, AVINDEX_KEYFRAME);
av_add_index_entry(st, pkt->pos, pkt->dts, 0, 0, AVINDEX_KEYFRAME);
return ff_add_index_entry(&st->index_entries, &st->nb_index_entries,
int *nb_index_entries,
memmove(entries + index + 1, entries + index, sizeof(AVIndexEntry)*(*nb_index_entries - index));
int ff_add_index_entry(AVIndexEntry **index_entries,
entries = av_fast_realloc(*index_entries,
memmove(entries + index + 1, entries + index, sizeof(AVIndexEntry)*(*nb_index_entries - index));
static int has_decode_delay_been_guessed(AVStream *st)
if(pkt->pts != AV_NOPTS_VALUE && delay <= MAX_REORDER_DELAY && has_decode_delay_been_guessed(st)){
static void compute_frame_duration(int *pnum, int *pden, AVStream *st,
compute_frame_duration(&num, &den, st, pc, pkt);
if(pkt->pts != AV_NOPTS_VALUE && delay <= MAX_REORDER_DELAY && has_decode_delay_been_guessed(st)){
int ff_index_search_timestamp(const AVIndexEntry *entries, int nb_entries,
index= ff_index_search_timestamp(*index_entries, *nb_index_entries, timestamp, AVSEEK_FLAG_ANY);
return ff_add_index_entry(&st->index_entries, &st->nb_index_entries,
b = nb_entries;
m= (flags & AVSEEK_FLAG_BACKWARD) ? a : b;
return  m;
index= ff_index_search_timestamp(*index_entries, *nb_index_entries, timestamp, AVSEEK_FLAG_ANY);
memmove(entries + index + 1, entries + index, sizeof(AVIndexEntry)*(*nb_index_entries - index));
static int get_audio_frame_size(AVCodecContext *enc, int size, int mux)
frame_size = get_audio_frame_size(st->codec, pkt->size, 0);
0

559 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 4113
return av_guess_format("image2", NULL, NULL);
return av_probe_input_buffer(s->pb, &s->iformat, filename, s, 0, s->probesize);
const char *filename, void *logctx,
if ((ret = avio_open2(&s->pb, filename, AVIO_FLAG_READ | s->avio_flags,
return av_probe_input_buffer(s->pb, &s->iformat, filename, s, 0, s->probesize);
const char *filename, void *logctx,
if (!av_filename_number_test(filename)) {
oformat = av_guess_format(format, NULL, NULL);
AVOutputFormat *oformat, const char *filename)
int ret = avformat_alloc_output_context2(&avctx, oformat, format, filename);
const char *format, const char *filename)
oformat = av_guess_format(NULL, filename, NULL);
nd = 0;
while (isdigit(*p)) {
nd = nd * 10 + *p++ - '0';
c = *p++;
} while (isdigit(c));
AVOutputFormat *av_guess_format(const char *short_name, const char *filename,
ff_guess_image2_codec(filename) != AV_CODEC_ID_NONE) {
av_filename_number_test(filename) &&
int av_filename_number_test(const char *filename)
return filename && (av_get_frame_filename(buf, sizeof(buf), filename, 1)>=0);
const char *path, int number)
p = path;
c = *p++;
c = *p++;
} while (isdigit(c));
int avformat_open_input(AVFormatContext **ps, const char *filename, AVInputFormat *fmt, AVDictionary **options)
if ((ret = init_input(s, filename, &tmp)) < 0)
static int init_input(AVFormatContext *s, const char *filename, AVDictionary **options)
if (!av_filename_number_test(filename)) {
0

560 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cppfunc 4113
return av_guess_format("image2", NULL, NULL);
return av_probe_input_buffer(s->pb, &s->iformat, filename, s, 0, s->probesize);
const char *filename, void *logctx,
if ((ret = avio_open2(&s->pb, filename, AVIO_FLAG_READ | s->avio_flags,
return av_probe_input_buffer(s->pb, &s->iformat, filename, s, 0, s->probesize);
const char *filename, void *logctx,
if (!av_filename_number_test(filename)) {
oformat = av_guess_format(format, NULL, NULL);
AVOutputFormat *oformat, const char *filename)
int ret = avformat_alloc_output_context2(&avctx, oformat, format, filename);
const char *format, const char *filename)
oformat = av_guess_format(NULL, filename, NULL);
nd = 0;
while (isdigit(*p)) {
nd = nd * 10 + *p++ - '0';
c = *p++;
} while (isdigit(c));
AVOutputFormat *av_guess_format(const char *short_name, const char *filename,
ff_guess_image2_codec(filename) != AV_CODEC_ID_NONE) {
av_filename_number_test(filename) &&
int av_filename_number_test(const char *filename)
return filename && (av_get_frame_filename(buf, sizeof(buf), filename, 1)>=0);
const char *path, int number)
p = path;
c = *p++;
c = *p++;
} while (isdigit(c));
int avformat_open_input(AVFormatContext **ps, const char *filename, AVInputFormat *fmt, AVDictionary **options)
if ((ret = init_input(s, filename, &tmp)) < 0)
static int init_input(AVFormatContext *s, const char *filename, AVDictionary **options)
if (!av_filename_number_test(filename)) {
0

572 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 4202
pkt_dump_internal(avcl, NULL, level, pkt, dump_payload, tb);
pkt_dump_internal(avcl, NULL, level, pkt, dump_payload, st->time_base);
void av_pkt_dump2(FILE *f, AVPacket *pkt, int dump_payload, AVStream *st)
pkt_dump_internal(NULL, f, 0, pkt, dump_payload, st->time_base);
static void pkt_dump_internal(void *avcl, FILE *f, int level, AVPacket *pkt, int dump_payload, AVRational time_base)
PRINT("N/A");
void av_pkt_dump(FILE *f, AVPacket *pkt, int dump_payload)
pkt_dump_internal(NULL, f, 0, pkt, dump_payload, tb);
0

573 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 694
uint8_t *new_buf = av_realloc(pd->buf, pd->buf_size+pkt->size+AVPROBE_PADDING_SIZE);
pd->buf = new_buf;
memcpy(pd->buf+pd->buf_size, pkt->data, pkt->size);
memset(pd->buf+pd->buf_size, 0, AVPROBE_PADDING_SIZE);
if(end || av_log2(pd->buf_size) != av_log2(pd->buf_size - pkt->size)){
av_init_packet(pkt);
ret= s->iformat->read_packet(s, pkt);
probe_codec(s, st, NULL);
av_free_packet(pkt);
av_packet_merge_side_data(pkt);
add_to_pktbuf(&s->raw_packet_buffer, pkt, &s->raw_packet_buffer_end);
AVPacket cur_pkt;
ret = ff_read_packet(s, &cur_pkt);
AVPacket pkt1, *pkt = &pkt1;
av_free_packet(pkt);
ret = ff_read_packet(ic, pkt);
int ff_read_packet(AVFormatContext *s, AVPacket *pkt)
*pkt = pktl->pkt;
av_init_packet(pkt);
add_to_pktbuf(&s->raw_packet_buffer, pkt, &s->raw_packet_buffer_end);
static AVPacket *add_to_pktbuf(AVPacketList **packet_buffer, AVPacket *pkt,
add_to_pktbuf(&s->raw_packet_buffer, pkt, &s->raw_packet_buffer_end);
probe_codec(s, st, pkt);
*pkt = pktl->pkt;
av_init_packet(pkt);
add_to_pktbuf(&s->raw_packet_buffer, pkt, &s->raw_packet_buffer_end);
static void probe_codec(AVFormatContext *s, AVStream *st, const AVPacket *pkt)
uint8_t *new_buf = av_realloc(pd->buf, pd->buf_size+pkt->size+AVPROBE_PADDING_SIZE);
pd->buf = new_buf;
memcpy(pd->buf+pd->buf_size, pkt->data, pkt->size);
memset(pd->buf+pd->buf_size, 0, AVPROBE_PADDING_SIZE);
if(end || av_log2(pd->buf_size) != av_log2(pd->buf_size - pkt->size)){
probe_codec(s, st, pkt);
*pkt = pktl->pkt;
av_init_packet(pkt);
add_to_pktbuf(&s->raw_packet_buffer, pkt, &s->raw_packet_buffer_end);
int av_read_packet(AVFormatContext *s, AVPacket *pkt)
return ff_read_packet(s, pkt);
0

576 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 692
static AVPacket *add_to_pktbuf(AVPacketList **packet_buffer, AVPacket *pkt,
uint8_t *new_buf = av_realloc(pd->buf, pd->buf_size+pkt->size+AVPROBE_PADDING_SIZE);
pd->buf = new_buf;
memcpy(pd->buf+pd->buf_size, pkt->data, pkt->size);
pd->buf_size += pkt->size;
memset(pd->buf+pd->buf_size, 0, AVPROBE_PADDING_SIZE);
if(end || av_log2(pd->buf_size) != av_log2(pd->buf_size - pkt->size)){
probe_codec(s, st, NULL);
av_free_packet(pkt);
add_to_pktbuf(&s->raw_packet_buffer, pkt, &s->raw_packet_buffer_end);
probe_codec(s, st, pkt);
*pkt = pktl->pkt;
av_init_packet(pkt);
add_to_pktbuf(&s->raw_packet_buffer, pkt, &s->raw_packet_buffer_end);
AVPacket cur_pkt;
ret = ff_read_packet(s, &cur_pkt);
AVPacket pkt1, *pkt = &pkt1;
ret = ff_read_packet(ic, pkt);
av_free_packet(pkt);
ret = ff_read_packet(ic, pkt);
static AVPacket *add_to_pktbuf(AVPacketList **packet_buffer, AVPacket *pkt,
add_to_pktbuf(&s->raw_packet_buffer, pkt, &s->raw_packet_buffer_end);
probe_codec(s, st, pkt);
static void probe_codec(AVFormatContext *s, AVStream *st, const AVPacket *pkt)
uint8_t *new_buf = av_realloc(pd->buf, pd->buf_size+pkt->size+AVPROBE_PADDING_SIZE);
pd->buf = new_buf;
memcpy(pd->buf+pd->buf_size, pkt->data, pkt->size);
memset(pd->buf+pd->buf_size, 0, AVPROBE_PADDING_SIZE);
if(end || av_log2(pd->buf_size) != av_log2(pd->buf_size - pkt->size)){
av_init_packet(pkt);
ret= s->iformat->read_packet(s, pkt);
av_packet_merge_side_data(pkt);
add_to_pktbuf(&s->raw_packet_buffer, pkt, &s->raw_packet_buffer_end);
probe_codec(s, st, pkt);
*pkt = pktl->pkt;
av_init_packet(pkt);
add_to_pktbuf(&s->raw_packet_buffer, pkt, &s->raw_packet_buffer_end);
int ff_read_packet(AVFormatContext *s, AVPacket *pkt)
*pkt = pktl->pkt;
av_init_packet(pkt);
add_to_pktbuf(&s->raw_packet_buffer, pkt, &s->raw_packet_buffer_end);
int av_read_packet(AVFormatContext *s, AVPacket *pkt)
return ff_read_packet(s, pkt);
0

582 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 1643
if ((frame_size = av_get_audio_frame_duration(enc, size)) > 0)
frame_size = get_audio_frame_size(st->codec, pkt->size, 0);
avpriv_h264_has_num_reorder_frames(st->codec) == st->codec->has_b_frames)
st  = s->streams[cur_pkt.stream_index];
compute_pkt_fields(s, st, NULL, pkt);
av_add_index_entry(st, pkt->pos, pkt->dts, 0, 0, AVINDEX_KEYFRAME);
st = s->streams[pkt->stream_index];
st->skip_samples = 0;
av_add_index_entry(st, pkt->pos, pkt->dts, 0, 0, AVINDEX_KEYFRAME);
timestamp -= RELATIVE_TS_BASE;
entries = av_fast_realloc(*index_entries,
(*nb_index_entries + 1) *
*index_entries= entries;
index= ff_index_search_timestamp(*index_entries, *nb_index_entries, timestamp, AVSEEK_FLAG_ANY);
assert(index==0 || ie[-1].timestamp < timestamp);
av_add_index_entry(st, pkt->pos, pkt->dts, 0, 0, AVINDEX_KEYFRAME);
return ff_add_index_entry(&st->index_entries, &st->nb_index_entries,
int *nb_index_entries,
&st->index_entries_allocated_size, pos,
unsigned int *index_entries_allocated_size,
int64_t pos, int64_t timestamp, int size, int distance, int flags)
timestamp, size, distance, flags);
int64_t pos, int64_t timestamp, int size, int distance, int flags)
if((unsigned)*nb_index_entries + 1 >= UINT_MAX / sizeof(AVIndexEntry))
if (is_relative(timestamp))
index_entries_allocated_size,
(*nb_index_entries + 1) *
sizeof(AVIndexEntry));
entries = av_fast_realloc(*index_entries,
a = - 1;
a= b-1;
m = (a + b) >> 1;
b = m;
a = m;
m= (flags & AVSEEK_FLAG_BACKWARD) ? a : b;
m += (flags & AVSEEK_FLAG_BACKWARD) ? -1 : 1;
return -1;
return  m;
index= ff_index_search_timestamp(*index_entries, *nb_index_entries, timestamp, AVSEEK_FLAG_ANY);
index= (*nb_index_entries)++;
ie= &entries[index];
int64_t wanted_timestamp, int flags)
assert(index==0 || ie[-1].timestamp < timestamp);
static int is_relative(int64_t ts) {
index= ff_index_search_timestamp(*index_entries, *nb_index_entries, timestamp, AVSEEK_FLAG_ANY);
int64_t wanted_timestamp, int flags)
assert(index==0 || ie[-1].timestamp < timestamp);
static void compute_pkt_fields(AVFormatContext *s, AVStream *st,
compute_pkt_fields(s, st, NULL, pkt);
av_add_index_entry(st, pkt->pos, pkt->dts, 0, 0, AVINDEX_KEYFRAME);
int av_add_index_entry(AVStream *st,
av_add_index_entry(st, pkt->pos, pkt->dts, 0, 0, AVINDEX_KEYFRAME);
av_add_index_entry(st, pkt->pos, pkt->dts, 0, 0, AVINDEX_KEYFRAME);
return ff_add_index_entry(&st->index_entries, &st->nb_index_entries,
int ff_add_index_entry(AVIndexEntry **index_entries,
entries = av_fast_realloc(*index_entries,
ie= &entries[index];
assert(index==0 || ie[-1].timestamp < timestamp);
static void compute_frame_duration(int *pnum, int *pden, AVStream *st,
compute_frame_duration(&num, &den, st, pc, pkt);
if(pkt->pts != AV_NOPTS_VALUE && delay <= MAX_REORDER_DELAY && has_decode_delay_been_guessed(st)){
static int has_decode_delay_been_guessed(AVStream *st)
if(pkt->pts != AV_NOPTS_VALUE && delay <= MAX_REORDER_DELAY && has_decode_delay_been_guessed(st)){
int ff_index_search_timestamp(const AVIndexEntry *entries, int nb_entries,
index= ff_index_search_timestamp(*index_entries, *nb_index_entries, timestamp, AVSEEK_FLAG_ANY);
return ff_add_index_entry(&st->index_entries, &st->nb_index_entries,
b = nb_entries;
m= (flags & AVSEEK_FLAG_BACKWARD) ? a : b;
return  m;
index= ff_index_search_timestamp(*index_entries, *nb_index_entries, timestamp, AVSEEK_FLAG_ANY);
assert(index==0 || ie[-1].timestamp < timestamp);
static int get_audio_frame_size(AVCodecContext *enc, int size, int mux)
frame_size = get_audio_frame_size(st->codec, pkt->size, 0);
0

583 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cppfunc 1643
if ((frame_size = av_get_audio_frame_duration(enc, size)) > 0)
frame_size = get_audio_frame_size(st->codec, pkt->size, 0);
avpriv_h264_has_num_reorder_frames(st->codec) == st->codec->has_b_frames)
st  = s->streams[cur_pkt.stream_index];
compute_pkt_fields(s, st, NULL, pkt);
av_add_index_entry(st, pkt->pos, pkt->dts, 0, 0, AVINDEX_KEYFRAME);
st = s->streams[pkt->stream_index];
st->skip_samples = 0;
av_add_index_entry(st, pkt->pos, pkt->dts, 0, 0, AVINDEX_KEYFRAME);
timestamp -= RELATIVE_TS_BASE;
entries = av_fast_realloc(*index_entries,
(*nb_index_entries + 1) *
*index_entries= entries;
index= ff_index_search_timestamp(*index_entries, *nb_index_entries, timestamp, AVSEEK_FLAG_ANY);
assert(index==0 || ie[-1].timestamp < timestamp);
av_add_index_entry(st, pkt->pos, pkt->dts, 0, 0, AVINDEX_KEYFRAME);
return ff_add_index_entry(&st->index_entries, &st->nb_index_entries,
int *nb_index_entries,
&st->index_entries_allocated_size, pos,
unsigned int *index_entries_allocated_size,
int64_t pos, int64_t timestamp, int size, int distance, int flags)
timestamp, size, distance, flags);
int64_t pos, int64_t timestamp, int size, int distance, int flags)
if((unsigned)*nb_index_entries + 1 >= UINT_MAX / sizeof(AVIndexEntry))
if (is_relative(timestamp))
index_entries_allocated_size,
(*nb_index_entries + 1) *
sizeof(AVIndexEntry));
entries = av_fast_realloc(*index_entries,
a = - 1;
a= b-1;
m = (a + b) >> 1;
b = m;
a = m;
m= (flags & AVSEEK_FLAG_BACKWARD) ? a : b;
m += (flags & AVSEEK_FLAG_BACKWARD) ? -1 : 1;
return -1;
return  m;
index= ff_index_search_timestamp(*index_entries, *nb_index_entries, timestamp, AVSEEK_FLAG_ANY);
index= (*nb_index_entries)++;
ie= &entries[index];
int64_t wanted_timestamp, int flags)
assert(index==0 || ie[-1].timestamp < timestamp);
static int is_relative(int64_t ts) {
index= ff_index_search_timestamp(*index_entries, *nb_index_entries, timestamp, AVSEEK_FLAG_ANY);
int64_t wanted_timestamp, int flags)
assert(index==0 || ie[-1].timestamp < timestamp);
static void compute_pkt_fields(AVFormatContext *s, AVStream *st,
compute_pkt_fields(s, st, NULL, pkt);
av_add_index_entry(st, pkt->pos, pkt->dts, 0, 0, AVINDEX_KEYFRAME);
int av_add_index_entry(AVStream *st,
av_add_index_entry(st, pkt->pos, pkt->dts, 0, 0, AVINDEX_KEYFRAME);
av_add_index_entry(st, pkt->pos, pkt->dts, 0, 0, AVINDEX_KEYFRAME);
return ff_add_index_entry(&st->index_entries, &st->nb_index_entries,
int ff_add_index_entry(AVIndexEntry **index_entries,
entries = av_fast_realloc(*index_entries,
ie= &entries[index];
assert(index==0 || ie[-1].timestamp < timestamp);
static void compute_frame_duration(int *pnum, int *pden, AVStream *st,
compute_frame_duration(&num, &den, st, pc, pkt);
if(pkt->pts != AV_NOPTS_VALUE && delay <= MAX_REORDER_DELAY && has_decode_delay_been_guessed(st)){
static int has_decode_delay_been_guessed(AVStream *st)
if(pkt->pts != AV_NOPTS_VALUE && delay <= MAX_REORDER_DELAY && has_decode_delay_been_guessed(st)){
int ff_index_search_timestamp(const AVIndexEntry *entries, int nb_entries,
index= ff_index_search_timestamp(*index_entries, *nb_index_entries, timestamp, AVSEEK_FLAG_ANY);
return ff_add_index_entry(&st->index_entries, &st->nb_index_entries,
b = nb_entries;
m= (flags & AVSEEK_FLAG_BACKWARD) ? a : b;
return  m;
index= ff_index_search_timestamp(*index_entries, *nb_index_entries, timestamp, AVSEEK_FLAG_ANY);
assert(index==0 || ie[-1].timestamp < timestamp);
static int get_audio_frame_size(AVCodecContext *enc, int size, int mux)
frame_size = get_audio_frame_size(st->codec, pkt->size, 0);
0

584 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c cfunc 3904
int g = av_gcd(st->time_base.num, st->time_base.den);
av_log(NULL, AV_LOG_DEBUG, ", %d, %d/%d", st->codec_info_nb_frames, st->time_base.num/g, st->time_base.den/g);
print_fps(av_q2d(st->avg_frame_rate), "fps");
print_fps(1/av_q2d(st->time_base), "tbn");
print_fps(1/av_q2d(st->codec->time_base), "tbc");
uint8_t *printed = ic->nb_streams ? av_mallocz(ic->nb_streams) : NULL;
us = ic->duration % AV_TIME_BASE;
(100 * us) / AV_TIME_BASE);
us = abs(ic->start_time % AV_TIME_BASE);
dump_stream_format(ic, ic->programs[j]->stream_index[k], index, is_output);
static void print_fps(double d, const char *postfix){
uint64_t v= lrintf(d*100);
static void dump_stream_format(AVFormatContext *ic, int i, int index, int is_output)
AVStream *st = ic->streams[i];
print_fps(av_q2d(st->r_frame_rate), "tbr");
dump_stream_format(ic, ic->programs[j]->stream_index[k], index, is_output);
0

13040 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c String_Termination_Error 174
unsigned char *buf = NULL;
int ret = 0, probe_size;
buftmp = av_realloc(buf, probe_size + AVPROBE_PADDING_SIZE);
if(!buftmp)
av_free(buf);
return AVERROR(ENOMEM);
buf=buftmp;
if ((ret = avio_read(pb, buf + buf_offset, probe_size - buf_offset)) < 0)
if (ret != AVERROR_EOF)
av_free(buf);
return ret;
score = 0;
ret = 0;
pd.buf_size += ret;
pd.buf = &buf[offset];
memset(pd.buf + pd.buf_size, 0, AVPROBE_PADDING_SIZE);
1

13041 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c String_Termination_Error 174
unsigned char *buf = NULL;
int ret = 0, probe_size, buf_offset = 0;
buftmp = av_realloc(buf, probe_size + AVPROBE_PADDING_SIZE);
if(!buftmp)
av_free(buf);
return AVERROR(ENOMEM);
buf=buftmp;
if ((ret = avio_read(pb, buf + buf_offset, probe_size - buf_offset)) < 0)
if (ret != AVERROR_EOF)
av_free(buf);
return ret;
score = 0;
ret = 0;
pd.buf_size = buf_offset += ret;
pd.buf = &buf[offset];
memset(pd.buf + pd.buf_size, 0, AVPROBE_PADDING_SIZE);
0

13674 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c String_Termination_Error 174
unsigned char *buf = NULL;
int ret = 0, probe_size;
buftmp = func(buftmp);
static void * func(const void * buftmp)
buftmp = av_realloc(buf, probe_size + AVPROBE_PADDING_SIZE);
return buftmp;
buftmp = func(buftmp);
if(!buftmp)
av_free(buf);
return AVERROR(ENOMEM);
buf=buftmp;
if ((ret = avio_read(pb, buf + buf_offset, probe_size - buf_offset)) < 0)
if (ret != AVERROR_EOF)
av_free(buf);
return ret;
score = 0;
ret = 0;
pd.buf_size += ret;
pd.buf = &buf[offset];
memset(pd.buf + pd.buf_size, 0, AVPROBE_PADDING_SIZE);
1

13675 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c String_Termination_Error 174
unsigned char *buf = NULL;
int ret = 0, probe_size, buf_offset = 0;
buftmp = func(buftmp);
static void * func(const void * buftmp)
buftmp = av_realloc(buf, probe_size + AVPROBE_PADDING_SIZE);
return buftmp;
buftmp = func(buftmp);
if(!buftmp)
av_free(buf);
return AVERROR(ENOMEM);
buf=buftmp;
if ((ret = avio_read(pb, buf + buf_offset, probe_size - buf_offset)) < 0)
if (ret != AVERROR_EOF)
av_free(buf);
return ret;
score = 0;
ret = 0;
pd.buf_size = buf_offset += ret;
pd.buf = &buf[offset];
memset(pd.buf + pd.buf_size, 0, AVPROBE_PADDING_SIZE);
0

13676 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c String_Termination_Error 174
unsigned char *buf = NULL;
int ret = 0, probe_size;
buftmp = func(&buftmp);
static void * func(void * * ptr)
void * buftmp = * ptr;
buftmp = av_realloc(buf, probe_size + AVPROBE_PADDING_SIZE);
return buftmp;
buftmp = func(&buftmp);
if(!buftmp)
av_free(buf);
return AVERROR(ENOMEM);
buf=buftmp;
if ((ret = avio_read(pb, buf + buf_offset, probe_size - buf_offset)) < 0)
if (ret != AVERROR_EOF)
av_free(buf);
return ret;
score = 0;
ret = 0;
pd.buf_size += ret;
pd.buf = &buf[offset];
memset(pd.buf + pd.buf_size, 0, AVPROBE_PADDING_SIZE);
1

13677 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c String_Termination_Error 174
unsigned char *buf = NULL;
int ret = 0, probe_size, buf_offset = 0;
buftmp = func(&buftmp);
static void * func(void * * ptr)
void * buftmp = * ptr;
buftmp = av_realloc(buf, probe_size + AVPROBE_PADDING_SIZE);
return buftmp;
buftmp = func(&buftmp);
if(!buftmp)
av_free(buf);
return AVERROR(ENOMEM);
buf=buftmp;
if ((ret = avio_read(pb, buf + buf_offset, probe_size - buf_offset)) < 0)
if (ret != AVERROR_EOF)
av_free(buf);
return ret;
score = 0;
ret = 0;
pd.buf_size = buf_offset += ret;
pd.buf = &buf[offset];
memset(pd.buf + pd.buf_size, 0, AVPROBE_PADDING_SIZE);
0

13678 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c String_Termination_Error 174
unsigned char *buf = NULL;
int ret = 0, probe_size;
void (*funcPtr) = badSource;
funcPtr(buftmp)
void badSource(void * buftmp)
buftmp = av_realloc(buf, probe_size + AVPROBE_PADDING_SIZE);
if(!buftmp)
av_free(buf);
return AVERROR(ENOMEM);
buf=buftmp;
if ((ret = avio_read(pb, buf + buf_offset, probe_size - buf_offset)) < 0)
if (ret != AVERROR_EOF)
av_free(buf);
return ret;
score = 0;
ret = 0;
pd.buf_size += ret;
pd.buf = &buf[offset];
memset(pd.buf + pd.buf_size, 0, AVPROBE_PADDING_SIZE);
1

13679 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c String_Termination_Error 174
unsigned char *buf = NULL;
int ret = 0, probe_size, buf_offset = 0;
void (*funcPtr) = badSource;
funcPtr(buftmp)
void badSource(void * buftmp)
buftmp = av_realloc(buf, probe_size + AVPROBE_PADDING_SIZE);
if(!buftmp)
av_free(buf);
return AVERROR(ENOMEM);
buf=buftmp;
if ((ret = avio_read(pb, buf + buf_offset, probe_size - buf_offset)) < 0)
if (ret != AVERROR_EOF)
av_free(buf);
return ret;
score = 0;
ret = 0;
pd.buf_size = buf_offset += ret;
pd.buf = &buf[offset];
memset(pd.buf + pd.buf_size, 0, AVPROBE_PADDING_SIZE);
0

13680 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c String_Termination_Error 174
unsigned char *buf = NULL;
int ret = 0, probe_size;
buftmp = av_realloc(buf, probe_size + AVPROBE_PADDING_SIZE);
void * dataCopy = buftmp;
voi * buftmp = dataCopy;
if(!buftmp)
av_free(buf);
return AVERROR(ENOMEM);
buf=buftmp;
if ((ret = avio_read(pb, buf + buf_offset, probe_size - buf_offset)) < 0)
if (ret != AVERROR_EOF)
av_free(buf);
return ret;
score = 0;
ret = 0;
pd.buf_size += ret;
pd.buf = &buf[offset];
memset(pd.buf + pd.buf_size, 0, AVPROBE_PADDING_SIZE);
1

13681 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c String_Termination_Error 174
unsigned char *buf = NULL;
int ret = 0, probe_size, buf_offset = 0;
buftmp = av_realloc(buf, probe_size + AVPROBE_PADDING_SIZE);
void * dataCopy = buftmp;
voi * buftmp = dataCopy;
if(!buftmp)
av_free(buf);
return AVERROR(ENOMEM);
buf=buftmp;
if ((ret = avio_read(pb, buf + buf_offset, probe_size - buf_offset)) < 0)
if (ret != AVERROR_EOF)
av_free(buf);
return ret;
score = 0;
ret = 0;
pd.buf_size = buf_offset += ret;
pd.buf = &buf[offset];
memset(pd.buf + pd.buf_size, 0, AVPROBE_PADDING_SIZE);
0

13682 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c String_Termination_Error 174
unsigned char *buf = NULL;
int ret = 0, probe_size;
buftmp = av_realloc(buf, probe_size + AVPROBE_PADDING_SIZE);
if(!buftmp)
av_free(buf);
return AVERROR(ENOMEM);
buf=buftmp;
if ((ret = avio_read(pb, buf + buf_offset, probe_size - buf_offset)) < 0)
if (ret != AVERROR_EOF)
av_free(buf);
return ret;
score = 0;
ret = 0;
pd.buf_size += ret;
pd.buf = &buf[offset];
s = pd.buf + pd.buf_size;
memset(s, 0, AVPROBE_PADDING_SIZE);
1

13683 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c String_Termination_Error 174
unsigned char *buf = NULL;
int ret = 0, probe_size, buf_offset = 0;
buftmp = av_realloc(buf, probe_size + AVPROBE_PADDING_SIZE);
if(!buftmp)
av_free(buf);
return AVERROR(ENOMEM);
buf=buftmp;
if ((ret = avio_read(pb, buf + buf_offset, probe_size - buf_offset)) < 0)
if (ret != AVERROR_EOF)
av_free(buf);
return ret;
score = 0;
ret = 0;
pd.buf_size = buf_offset += ret;
pd.buf = &buf[offset];
s = pd.buf + pd.buf_size;
memset(s, 0, AVPROBE_PADDING_SIZE);
0

13684 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c String_Termination_Error 174
unsigned char *buf = NULL;
int ret = 0, probe_size;
buftmp = av_realloc(buf, probe_size + AVPROBE_PADDING_SIZE);
buf=buftmp;
if(!buftmp)
av_free(buf);
return AVERROR(ENOMEM);
if ((ret = avio_read(pb, buf + buf_offset, probe_size - buf_offset)) < 0)
if (ret != AVERROR_EOF)
av_free(buf);
return ret;
score = 0;
ret = 0;
pd.buf_size += ret;
pd.buf = &buf[offset];
memset(pd.buf + pd.buf_size, 0, AVPROBE_PADDING_SIZE);
1

13685 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c String_Termination_Error 174
unsigned char *buf = NULL;
int ret = 0, probe_size, buf_offset = 0;
buftmp = av_realloc(buf, probe_size + AVPROBE_PADDING_SIZE);
buf=buftmp;
if(!buftmp)
av_free(buf);
return AVERROR(ENOMEM);
if ((ret = avio_read(pb, buf + buf_offset, probe_size - buf_offset)) < 0)
if (ret != AVERROR_EOF)
av_free(buf);
return ret;
score = 0;
ret = 0;
pd.buf_size = buf_offset += ret;
pd.buf = &buf[offset];
memset(pd.buf + pd.buf_size, 0, AVPROBE_PADDING_SIZE);
0

13686 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c String_Termination_Error 174
unsigned char *buf = NULL;
int ret = 0, probe_size;
void * dataArray[5];
dataArray[2] = buftmp;
buftmp = badSource(dataArray)
void badSource(void * dataArray[])
void * buftmp = dataArray[2];
buftmp = av_realloc(buf, probe_size + AVPROBE_PADDING_SIZE);
return buftmp;
if(!buftmp)
av_free(buf);
return AVERROR(ENOMEM);
buf=buftmp;
if ((ret = avio_read(pb, buf + buf_offset, probe_size - buf_offset)) < 0)
if (ret != AVERROR_EOF)
av_free(buf);
return ret;
score = 0;
ret = 0;
pd.buf_size += ret;
pd.buf = &buf[offset];
memset(pd.buf + pd.buf_size, 0, AVPROBE_PADDING_SIZE);
1

13687 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c String_Termination_Error 174
unsigned char *buf = NULL;
int ret = 0, probe_size, buf_offset = 0;
void * dataArray[5];
dataArray[2] = buftmp;
buftmp = badSource(dataArray)
void badSource(void * dataArray[])
void * buftmp = dataArray[2];
buftmp = av_realloc(buf, probe_size + AVPROBE_PADDING_SIZE);
return buftmp;
if(!buftmp)
av_free(buf);
return AVERROR(ENOMEM);
buf=buftmp;
if ((ret = avio_read(pb, buf + buf_offset, probe_size - buf_offset)) < 0)
if (ret != AVERROR_EOF)
av_free(buf);
return ret;
score = 0;
ret = 0;
pd.buf_size = buf_offset += ret;
pd.buf = &buf[offset];
memset(pd.buf + pd.buf_size, 0, AVPROBE_PADDING_SIZE);
0

13688 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c String_Termination_Error 174
unsigned char *buf = NULL;
int ret = 0, probe_size;
unionType myUnion;
buftmp = av_realloc(buf, probe_size + AVPROBE_PADDING_SIZE);
myUnion.unionFirst = buftmp;
void * buftmp = myUnion.unionSecond;
if(!buftmp)
av_free(buf);
return AVERROR(ENOMEM);
buf=buftmp;
if ((ret = avio_read(pb, buf + buf_offset, probe_size - buf_offset)) < 0)
if (ret != AVERROR_EOF)
av_free(buf);
return ret;
score = 0;
ret = 0;
pd.buf_size += ret;
pd.buf = &buf[offset];
memset(pd.buf + pd.buf_size, 0, AVPROBE_PADDING_SIZE);
1

13689 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c String_Termination_Error 174
unsigned char *buf = NULL;
int ret = 0, probe_size, buf_offset = 0;
unionType myUnion;
buftmp = av_realloc(buf, probe_size + AVPROBE_PADDING_SIZE);
myUnion.unionFirst = buftmp;
void * buftmp = myUnion.unionSecond;
if(!buftmp)
av_free(buf);
return AVERROR(ENOMEM);
buf=buftmp;
if ((ret = avio_read(pb, buf + buf_offset, probe_size - buf_offset)) < 0)
if (ret != AVERROR_EOF)
av_free(buf);
return ret;
score = 0;
ret = 0;
pd.buf_size = buf_offset += ret;
pd.buf = &buf[offset];
memset(pd.buf + pd.buf_size, 0, AVPROBE_PADDING_SIZE);
0

13690 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c String_Termination_Error 174
unsigned char *buf = NULL;
int ret = 0, probe_size;
structType myStruct;
myStruct.structFirst = buftmp;
buftmp = badSource(myStruct);
void badSource(structType myStruct)
void * buftmp = myStruct.structFirst;
buftmp = av_realloc(buf, probe_size + AVPROBE_PADDING_SIZE);
return buftmp;
if(!buftmp)
av_free(buf);
return AVERROR(ENOMEM);
buf=buftmp;
if ((ret = avio_read(pb, buf + buf_offset, probe_size - buf_offset)) < 0)
if (ret != AVERROR_EOF)
av_free(buf);
return ret;
score = 0;
ret = 0;
pd.buf_size += ret;
pd.buf = &buf[offset];
memset(pd.buf + pd.buf_size, 0, AVPROBE_PADDING_SIZE);
1

13691 CVE-2012-6618/Ffmpeg_1.0_CVE_2012_6618_libavformat_utils.c String_Termination_Error 174
unsigned char *buf = NULL;
int ret = 0, probe_size, buf_offset = 0;
structType myStruct;
myStruct.structFirst = buftmp;
buftmp = badSource(myStruct);
void badSource(structType myStruct)
void * buftmp = myStruct.structFirst;
buftmp = av_realloc(buf, probe_size + AVPROBE_PADDING_SIZE);
return buftmp;
if(!buftmp)
av_free(buf);
return AVERROR(ENOMEM);
buf=buftmp;
if ((ret = avio_read(pb, buf + buf_offset, probe_size - buf_offset)) < 0)
if (ret != AVERROR_EOF)
av_free(buf);
return ret;
score = 0;
ret = 0;
pd.buf_size = buf_offset += ret;
pd.buf = &buf[offset];
memset(pd.buf + pd.buf_size, 0, AVPROBE_PADDING_SIZE);
0

