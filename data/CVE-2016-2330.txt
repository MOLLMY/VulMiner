14274 CVE-2016-2330/Ffmpeg_2.8.2_CVE_2016_2330_libavcodec_gif.c Buffer_Overflow_boundedcpy 186
int len = 0, height = avctx->height, width = avctx->width, x, y;
int x_start = 0, y_start = 0, trans = s->transparent_index;
int x_end = avctx->width  - 1,
y_end = avctx->height - 1;
while (y_start < y_end)
if (memcmp(ref + y_start*ref_linesize, buf + y_start*linesize, width))
break;
y_start++;
while (y_end > y_start)
if (memcmp(ref + y_end*ref_linesize, buf + y_end*linesize, width))
break;
y_end--;
height = y_end + 1 - y_start;
width = x_end + 1 - x_start;
av_log(avctx, AV_LOG_DEBUG,"%dx%d image at pos (%d;%d) [area:%dx%d]\n",
width, height, x_start, y_start, avctx->width, avctx->height);
bytestream_put_le16(bytestream, x_start);
bytestream_put_le16(bytestream, y_start);
bytestream_put_le16(bytestream, width);
bytestream_put_le16(bytestream, height);
if (honor_transparency && trans < 0)
trans = pick_palette_entry(buf + y_start*linesize + x_start,
linesize, width, height);
ff_lzw_encode_init(s->lzw, s->buf, 2 * width * height,
ptr = buf + y_start*linesize + x_start;
if (honor_transparency)
for (y = 0; y < height; y++)
memcpy(s->tmpl, ptr, width);
len += ff_lzw_encode(s->lzw, s->tmpl, width);
ptr += linesize;
else
for (y = 0; y < height; y++)
len += ff_lzw_encode(s->lzw, ptr, width);
ptr += linesize;
return 0;
static av_cold int gif_encode_init(AVCodecContext *avctx)
s->lzw = av_mallocz(ff_lzw_encode_state_size);
s->buf = av_malloc(avctx->width*avctx->height*2);
s->tmpl = av_malloc(avctx->width);
if (!s->tmpl || !s->buf || !s->lzw)
return AVERROR(ENOMEM);
static int gif_encode_close(AVCodecContext *avctx)
GIFContext *s = avctx->priv_data;
av_freep(&s->lzw);
av_freep(&s->buf);
av_frame_free(&s->last_frame);
av_freep(&s->tmpl);
return 0;
1

14275 CVE-2016-2330/Ffmpeg_2.8.2_CVE_2016_2330_libavcodec_gif.c Buffer_Overflow_boundedcpy 186
int buf_size;
int len = 0, height = avctx->height, width = avctx->width, x, y;
int x_start = 0, y_start = 0, trans = s->transparent_index;
int x_end = avctx->width  - 1,
y_end = avctx->height - 1;
while (y_start < y_end)
if (memcmp(ref + y_start*ref_linesize, buf + y_start*linesize, width))
break;
y_start++;
while (y_end > y_start)
if (memcmp(ref + y_end*ref_linesize, buf + y_end*linesize, width))
break;
y_end--;
height = y_end + 1 - y_start;
width = x_end + 1 - x_start;
av_log(avctx, AV_LOG_DEBUG,"%dx%d image at pos (%d;%d) [area:%dx%d]\n",
width, height, x_start, y_start, avctx->width, avctx->height);
bytestream_put_le16(bytestream, x_start);
bytestream_put_le16(bytestream, y_start);
bytestream_put_le16(bytestream, width);
bytestream_put_le16(bytestream, height);
if (honor_transparency && trans < 0)
trans = pick_palette_entry(buf + y_start*linesize + x_start,
linesize, width, height);
ff_lzw_encode_init(s->lzw, s->buf, s->buf_size,
12, FF_LZW_GIF, put_bits);
ptr = buf + y_start*linesize + x_start;
if (honor_transparency)
for (y = 0; y < height; y++)
memcpy(s->tmpl, ptr, width);
len += ff_lzw_encode(s->lzw, s->tmpl, width);
ptr += linesize;
else
for (y = 0; y < height; y++)
len += ff_lzw_encode(s->lzw, ptr, width);
ptr += linesize;
return 0;
static av_cold int gif_encode_init(AVCodecContext *avctx)
s->lzw = av_mallocz(ff_lzw_encode_state_size);
s->buf_size = avctx->width*avctx->height*2 + 1000;
s->buf = av_malloc(s->buf_size);
s->tmpl = av_malloc(avctx->width);
if (!s->tmpl || !s->buf || !s->lzw)
return AVERROR(ENOMEM);
static int gif_encode_close(AVCodecContext *avctx)
GIFContext *s = avctx->priv_data;
av_freep(&s->lzw);
av_freep(&s->buf);
s->buf_size = 0;
av_frame_free(&s->last_frame);
av_freep(&s->tmpl);
return 0;
0

