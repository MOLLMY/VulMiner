1 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c cfunc 449
ZIP_FILENAME_LEN, NULL, 0, NULL, 0 )
char *psz_fileName = calloc( ZIP_FILENAME_LEN, 1 );
if( unzGetCurrentFileInfo( file, p_fileInfo, psz_fileName,
vlc_array_append( p_filenames, strdup( psz_fileName ) );
free( psz_fileName );
0

2 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c cppfunc 449
char *psz_fileName = calloc( ZIP_FILENAME_LEN, 1 );
ZIP_FILENAME_LEN, NULL, 0, NULL, 0 )
if( unzGetCurrentFileInfo( file, p_fileInfo, psz_fileName,
vlc_array_append( p_filenames, strdup( psz_fileName ) );
free( psz_fileName );
0

30 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c cfunc 179
const uint8_t *p_peek;
if( stream_Peek( s->p_source, &p_peek, i_zip_marker ) < i_zip_marker )
if( memcmp( p_peek, p_zip_marker, i_zip_marker ) )
0

70 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c cfunc 454
unz_file_info *p_fileInfo = calloc( 1, sizeof( unz_file_info ) );
if( unzGetCurrentFileInfo( file, p_fileInfo, psz_fileName,
free( p_fileInfo );
0

71 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c cppfunc 454
unz_file_info *p_fileInfo = calloc( 1, sizeof( unz_file_info ) );
if( unzGetCurrentFileInfo( file, p_fileInfo, psz_fileName,
free( p_fileInfo );
0

99 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c cfunc 149
va_list args;
va_start( args, psz_fmt_src );
char *psz_tmp;
int i_ret = vasprintf( &psz_tmp, psz_fmt_src, args );
int i_len = strlen( *ppsz_dest ) + strlen( psz_tmp ) + 1;
char *psz_out = realloc( *ppsz_dest, i_len );
strcat( psz_out, psz_tmp );
*ppsz_dest = psz_out;
if( astrcatf( &psz_pathtozip, "%s", ZIP_SEP ) < 0 ) return -1;
"  <track>\n"
if( astrcatf( pp_buffer,
" </trackList>\n"
if( astrcatf( pp_buffer, " </extension>\n</playlist>\n" ) < 0 ) return -1;
if( astrcatf( pp_buffer, "  <vlc:node title=\"%s\">\n", n->name ) < 0 )
if( astrcatf( pp_buffer, "   <vlc:item tid=\"%d\" />\n", i->id ) < 0 )
if( astrcatf( pp_buffer, "  </vlc:node>\n" ) < 0 )
static int astrcatf( char **ppsz_dest, const char *psz_fmt_src, ... )
va_start( args, psz_fmt_src );
int i_ret = vasprintf( &psz_tmp, psz_fmt_src, args );
int i_len = strlen( *ppsz_dest ) + strlen( psz_tmp ) + 1;
strcat( psz_out, psz_tmp );
*ppsz_dest = psz_out;
if( astrcatf( &psz_pathtozip, "%s", ZIP_SEP ) < 0 ) return -1;
char *psz_path = strdup( psz_pathtozip );
if( astrcatf( &psz_path, "%s", psz_escapedName ) < 0 ) return -1;
if( astrcatf( pp_buffer,
if( astrcatf( pp_buffer, " </extension>\n</playlist>\n" ) < 0 ) return -1;
if( astrcatf( pp_buffer, "  </vlc:node>\n" ) < 0 )
static int astrcatf( char **ppsz_dest, const char *psz_fmt_src, ... )
int i_len = strlen( *ppsz_dest ) + strlen( psz_tmp ) + 1;
0

100 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c cfunc 147
va_list args;
va_start( args, psz_fmt_src );
int i_ret = vasprintf( &psz_tmp, psz_fmt_src, args );
va_end( args );
0

101 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c cppfunc 147
va_list args;
va_start( args, psz_fmt_src );
int i_ret = vasprintf( &psz_tmp, psz_fmt_src, args );
va_end( args );
0

108 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c cfunc 616
va_list args;
va_start( args, psz_fmt_src );
char *psz_tmp;
int i_ret = vasprintf( &psz_tmp, psz_fmt_src, args );
int i_len = strlen( *ppsz_dest ) + strlen( psz_tmp ) + 1;
char *psz_out = realloc( *ppsz_dest, i_len );
strcat( psz_out, psz_tmp );
*ppsz_dest = psz_out;
size_t i_num = 0, i_len = 0;
i_len++;
i_len++;
i_num++;
*ppsz_encoded = malloc( i_len + 1 );
memcpy( *ppsz_encoded, psz_url, i_len + 1 );
char *psz_ret = malloc( i_len + 3*i_num + 2 );
*ppsz_encoded = psz_ret;
char *psz_pathtozip;
escapeToXml( &psz_pathtozip, psz_zippath );
if( astrcatf( &psz_pathtozip, "%s", ZIP_SEP ) < 0 ) return -1;
int i_track = 0;
psz_file = convert_xml_special_chars( psz_file ?
char *psz_path = strdup( psz_pathtozip );
if( astrcatf( &psz_path, "%s", psz_escapedName ) < 0 ) return -1;
psz_path, psz_file, i_track ) < 0 ) return -1;
parent->media = new_item( i_track );
tmp->next = new_item( i_track );
inline static item* new_item( int id )
psz_path, psz_file, i_track ) < 0 ) return -1;
static int astrcatf( char **ppsz_dest, const char *psz_fmt_src, ... )
va_start( args, psz_fmt_src );
int i_ret = vasprintf( &psz_tmp, psz_fmt_src, args );
int i_len = strlen( *ppsz_dest ) + strlen( psz_tmp ) + 1;
strcat( psz_out, psz_tmp );
*ppsz_dest = psz_out;
if( astrcatf( &psz_pathtozip, "%s", ZIP_SEP ) < 0 ) return -1;
char *psz_path = strdup( psz_pathtozip );
if( astrcatf( &psz_path, "%s", psz_escapedName ) < 0 ) return -1;
psz_path, psz_file, i_track ) < 0 ) return -1;
free( psz_path );
static int escapeToXml( char **ppsz_encoded, const char *psz_url )
escapeToXml( &psz_pathtozip, psz_zippath );
char *psz_path = strdup( psz_pathtozip );
psz_path, psz_file, i_track ) < 0 ) return -1;
0

109 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c cppfunc 616
va_list args;
va_start( args, psz_fmt_src );
char *psz_tmp;
int i_ret = vasprintf( &psz_tmp, psz_fmt_src, args );
int i_len = strlen( *ppsz_dest ) + strlen( psz_tmp ) + 1;
char *psz_out = realloc( *ppsz_dest, i_len );
strcat( psz_out, psz_tmp );
*ppsz_dest = psz_out;
size_t i_num = 0, i_len = 0;
i_len++;
i_len++;
i_num++;
*ppsz_encoded = malloc( i_len + 1 );
memcpy( *ppsz_encoded, psz_url, i_len + 1 );
char *psz_ret = malloc( i_len + 3*i_num + 2 );
*ppsz_encoded = psz_ret;
char *psz_pathtozip;
escapeToXml( &psz_pathtozip, psz_zippath );
if( astrcatf( &psz_pathtozip, "%s", ZIP_SEP ) < 0 ) return -1;
int i_track = 0;
psz_file = convert_xml_special_chars( psz_file ?
char *psz_path = strdup( psz_pathtozip );
if( astrcatf( &psz_path, "%s", psz_escapedName ) < 0 ) return -1;
psz_path, psz_file, i_track ) < 0 ) return -1;
parent->media = new_item( i_track );
tmp->next = new_item( i_track );
inline static item* new_item( int id )
psz_path, psz_file, i_track ) < 0 ) return -1;
static int astrcatf( char **ppsz_dest, const char *psz_fmt_src, ... )
va_start( args, psz_fmt_src );
int i_ret = vasprintf( &psz_tmp, psz_fmt_src, args );
int i_len = strlen( *ppsz_dest ) + strlen( psz_tmp ) + 1;
strcat( psz_out, psz_tmp );
*ppsz_dest = psz_out;
if( astrcatf( &psz_pathtozip, "%s", ZIP_SEP ) < 0 ) return -1;
char *psz_path = strdup( psz_pathtozip );
if( astrcatf( &psz_path, "%s", psz_escapedName ) < 0 ) return -1;
psz_path, psz_file, i_track ) < 0 ) return -1;
free( psz_path );
static int escapeToXml( char **ppsz_encoded, const char *psz_url )
escapeToXml( &psz_pathtozip, psz_zippath );
char *psz_path = strdup( psz_pathtozip );
psz_path, psz_file, i_track ) < 0 ) return -1;
0

122 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c cfunc 703
folder = path;
char *sep = strchr( folder, '/' );
*sep = '\0';
return findOrCreateParentNode( current, sep );
ret = findOrCreateParentNode( ret, sep );
static node* findOrCreateParentNode( node *root, const char *fullpath )
char *path = strdup( fullpath );
free( path );
0

123 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c cppfunc 703
folder = path;
char *sep = strchr( folder, '/' );
*sep = '\0';
return findOrCreateParentNode( current, sep );
ret = findOrCreateParentNode( ret, sep );
static node* findOrCreateParentNode( node *root, const char *fullpath )
char *path = strdup( fullpath );
free( path );
0

132 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c cfunc 242
void StreamClose( vlc_object_t *p_this )
stream_sys_t *p_sys = s->p_sys;
unzClose( p_sys->zipFile );
free( p_sys->fileFunctions );
free( p_sys->psz_xspf );
free( p_sys->psz_path );
free( p_sys );
0

133 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c cppfunc 242
void StreamClose( vlc_object_t *p_this )
stream_sys_t *p_sys = s->p_sys;
unzClose( p_sys->zipFile );
free( p_sys->fileFunctions );
free( p_sys->psz_xspf );
free( p_sys->psz_path );
free( p_sys );
0

173 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c cfunc 347
if( CreatePlaylist( s, &p_sys->psz_xspf ) < 0 )
static int CreatePlaylist( stream_t *s, char **pp_buffer );
if( CreatePlaylist( s, &p_sys->psz_xspf ) < 0 )
p_sys->i_len = strlen( p_sys->psz_xspf );
0

174 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c cfunc 209
int StreamOpen( vlc_object_t *p_this )
stream_t *s = (stream_t*) p_this;
stream_sys_t *p_sys;
if( stream_Peek( s->p_source, &p_peek, i_zip_marker ) < i_zip_marker )
s->p_sys = p_sys = calloc( 1, sizeof( *p_sys ) );
s->pf_read = Read;
s->pf_peek = Peek;
s->pf_control = Control;
calloc( 1, sizeof( zlib_filefunc_def ) );
p_sys->fileFunctions = ( zlib_filefunc_def * )
p_sys->fileFunctions->zopen_file   = ZipIO_Open;
p_sys->fileFunctions->zread_file   = ZipIO_Read;
p_sys->fileFunctions->zwrite_file  = ZipIO_Write;
p_sys->fileFunctions->ztell_file   = ZipIO_Tell;
p_sys->fileFunctions->zseek_file   = ZipIO_Seek;
p_sys->fileFunctions->zclose_file  = ZipIO_Close;
p_sys->fileFunctions->zerror_file  = ZipIO_Error;
p_sys->fileFunctions->opaque       = ( void * ) s;
p_sys->zipFile = unzOpen2( NULL
free( p_sys->fileFunctions );
0

175 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c cppfunc 209
int StreamOpen( vlc_object_t *p_this )
stream_t *s = (stream_t*) p_this;
stream_sys_t *p_sys;
if( stream_Peek( s->p_source, &p_peek, i_zip_marker ) < i_zip_marker )
s->p_sys = p_sys = calloc( 1, sizeof( *p_sys ) );
s->pf_read = Read;
s->pf_peek = Peek;
s->pf_control = Control;
calloc( 1, sizeof( zlib_filefunc_def ) );
p_sys->fileFunctions = ( zlib_filefunc_def * )
p_sys->fileFunctions->zopen_file   = ZipIO_Open;
p_sys->fileFunctions->zread_file   = ZipIO_Read;
p_sys->fileFunctions->zwrite_file  = ZipIO_Write;
p_sys->fileFunctions->ztell_file   = ZipIO_Tell;
p_sys->fileFunctions->zseek_file   = ZipIO_Seek;
p_sys->fileFunctions->zclose_file  = ZipIO_Close;
p_sys->fileFunctions->zerror_file  = ZipIO_Error;
p_sys->fileFunctions->opaque       = ( void * ) s;
p_sys->zipFile = unzOpen2( NULL
free( p_sys->fileFunctions );
0

204 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c cfunc 525
size_t i_num = 0, i_len = 0;
i_len++;
i_len++;
*ppsz_encoded = malloc( i_len + 1 );
memcpy( *ppsz_encoded, psz_url, i_len + 1 );
const char *psz_zippath )
char *psz_zip = strrchr( psz_zippath, DIR_SEP_CHAR );
char *psz_pathtozip;
escapeToXml( &psz_pathtozip, psz_zippath );
char *psz_escapedName;
escapeToXml( &psz_escapedName, psz_name );
static int escapeToXml( char **ppsz_encoded, const char *psz_url )
memcpy( *ppsz_encoded, psz_url, i_len + 1 );
static int WriteXSPF( char **pp_buffer, vlc_array_t *p_filenames,
for( int i = 0; i < vlc_array_count( p_filenames ); ++i )
char *psz_name = (char*) vlc_array_item_at_index( p_filenames, i );
int i_len = strlen( psz_name );
char *psz_file = strrchr( psz_name, '/' );
escapeToXml( &psz_escapedName, psz_name );
0

230 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c cfunc 154
va_list args;
va_start( args, psz_fmt_src );
char *psz_tmp;
int i_ret = vasprintf( &psz_tmp, psz_fmt_src, args );
int i_len = strlen( *ppsz_dest ) + strlen( psz_tmp ) + 1;
strcat( psz_out, psz_tmp );
free( psz_tmp );
if( astrcatf( &psz_pathtozip, "%s", ZIP_SEP ) < 0 ) return -1;
if( astrcatf( &psz_path, "%s", psz_escapedName ) < 0 ) return -1;
"  <track>\n"
" </trackList>\n"
if( astrcatf( pp_buffer, " </extension>\n</playlist>\n" ) < 0 ) return -1;
if( astrcatf( pp_buffer, "  <vlc:node title=\"%s\">\n", n->name ) < 0 )
if( astrcatf( pp_buffer, "   <vlc:item tid=\"%d\" />\n", i->id ) < 0 )
if( astrcatf( pp_buffer, "  </vlc:node>\n" ) < 0 )
static int astrcatf( char **ppsz_dest, const char *psz_fmt_src, ... )
va_start( args, psz_fmt_src );
int i_ret = vasprintf( &psz_tmp, psz_fmt_src, args );
int i_len = strlen( *ppsz_dest ) + strlen( psz_tmp ) + 1;
strcat( psz_out, psz_tmp );
free( psz_tmp );
0

231 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c cppfunc 154
va_list args;
va_start( args, psz_fmt_src );
char *psz_tmp;
int i_ret = vasprintf( &psz_tmp, psz_fmt_src, args );
int i_len = strlen( *ppsz_dest ) + strlen( psz_tmp ) + 1;
strcat( psz_out, psz_tmp );
free( psz_tmp );
if( astrcatf( &psz_pathtozip, "%s", ZIP_SEP ) < 0 ) return -1;
if( astrcatf( &psz_path, "%s", psz_escapedName ) < 0 ) return -1;
"  <track>\n"
" </trackList>\n"
if( astrcatf( pp_buffer, " </extension>\n</playlist>\n" ) < 0 ) return -1;
if( astrcatf( pp_buffer, "  <vlc:node title=\"%s\">\n", n->name ) < 0 )
if( astrcatf( pp_buffer, "   <vlc:item tid=\"%d\" />\n", i->id ) < 0 )
if( astrcatf( pp_buffer, "  </vlc:node>\n" ) < 0 )
static int astrcatf( char **ppsz_dest, const char *psz_fmt_src, ... )
va_start( args, psz_fmt_src );
int i_ret = vasprintf( &psz_tmp, psz_fmt_src, args );
int i_len = strlen( *ppsz_dest ) + strlen( psz_tmp ) + 1;
strcat( psz_out, psz_tmp );
free( psz_tmp );
0

232 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c cfunc 150
va_list args;
va_start( args, psz_fmt_src );
char *psz_tmp;
int i_ret = vasprintf( &psz_tmp, psz_fmt_src, args );
int i_len = strlen( *ppsz_dest ) + strlen( psz_tmp ) + 1;
char *psz_out = realloc( *ppsz_dest, i_len );
strcat( psz_out, psz_tmp );
*ppsz_dest = psz_out;
size_t i_num = 0, i_len = 0;
i_len++;
i_len++;
i_num++;
*ppsz_encoded = malloc( i_len + 1 );
memcpy( *ppsz_encoded, psz_url, i_len + 1 );
char *psz_ret = malloc( i_len + 3*i_num + 2 );
*ppsz_encoded = psz_ret;
psz_zip = convert_xml_special_chars( psz_zip ? (psz_zip+1) : psz_zippath );
" <trackList>\n", psz_zip ) == -1)
char *psz_pathtozip;
escapeToXml( &psz_pathtozip, psz_zippath );
if( astrcatf( &psz_pathtozip, "%s", ZIP_SEP ) < 0 ) return -1;
char *psz_path = strdup( psz_pathtozip );
if( astrcatf( &psz_path, "%s", psz_escapedName ) < 0 ) return -1;
if( astrcatf( pp_buffer,
"  <track>\n"
if( astrcatf( pp_buffer,
" </trackList>\n"
if( nodeToXSPF( pp_buffer, playlist, true ) < 0 ) return -1;
if( astrcatf( pp_buffer, " </extension>\n</playlist>\n" ) < 0 ) return -1;
if( astrcatf( pp_buffer, "  <vlc:node title=\"%s\">\n", n->name ) < 0 )
nodeToXSPF( pp_buffer, n->child, false );
if( astrcatf( pp_buffer, "   <vlc:item tid=\"%d\" />\n", i->id ) < 0 )
if( astrcatf( pp_buffer, "  </vlc:node>\n" ) < 0 )
static int astrcatf( char **ppsz_dest, const char *psz_fmt_src, ... )
va_start( args, psz_fmt_src );
int i_ret = vasprintf( &psz_tmp, psz_fmt_src, args );
int i_len = strlen( *ppsz_dest ) + strlen( psz_tmp ) + 1;
char *psz_out = realloc( *ppsz_dest, i_len );
strcat( psz_out, psz_tmp );
*ppsz_dest = psz_out;
if( astrcatf( &psz_pathtozip, "%s", ZIP_SEP ) < 0 ) return -1;
char *psz_path = strdup( psz_pathtozip );
if( astrcatf( &psz_path, "%s", psz_escapedName ) < 0 ) return -1;
if( astrcatf( pp_buffer,
if( astrcatf( pp_buffer, " </extension>\n</playlist>\n" ) < 0 ) return -1;
if( astrcatf( pp_buffer, "  </vlc:node>\n" ) < 0 )
static int astrcatf( char **ppsz_dest, const char *psz_fmt_src, ... )
char *psz_out = realloc( *ppsz_dest, i_len );
static int nodeToXSPF( char **pp_buffer, node *n, bool b_root );
if( astrcatf( pp_buffer, " </extension>\n</playlist>\n" ) < 0 ) return -1;
static int WriteXSPF( char **pp_buffer, vlc_array_t *p_filenames,
if( asprintf( pp_buffer, "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
if( astrcatf( pp_buffer,
static int nodeToXSPF( char **pp_buffer, node *n, bool b_root )
if( astrcatf( pp_buffer, "  </vlc:node>\n" ) < 0 )
static int escapeToXml( char **ppsz_encoded, const char *psz_url )
escapeToXml( &psz_pathtozip, psz_zippath );
if( astrcatf( &psz_pathtozip, "%s", ZIP_SEP ) < 0 ) return -1;
0

233 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c cppfunc 150
va_list args;
va_start( args, psz_fmt_src );
char *psz_tmp;
int i_ret = vasprintf( &psz_tmp, psz_fmt_src, args );
int i_len = strlen( *ppsz_dest ) + strlen( psz_tmp ) + 1;
char *psz_out = realloc( *ppsz_dest, i_len );
strcat( psz_out, psz_tmp );
*ppsz_dest = psz_out;
size_t i_num = 0, i_len = 0;
i_len++;
i_len++;
i_num++;
*ppsz_encoded = malloc( i_len + 1 );
memcpy( *ppsz_encoded, psz_url, i_len + 1 );
char *psz_ret = malloc( i_len + 3*i_num + 2 );
*ppsz_encoded = psz_ret;
psz_zip = convert_xml_special_chars( psz_zip ? (psz_zip+1) : psz_zippath );
" <trackList>\n", psz_zip ) == -1)
char *psz_pathtozip;
escapeToXml( &psz_pathtozip, psz_zippath );
if( astrcatf( &psz_pathtozip, "%s", ZIP_SEP ) < 0 ) return -1;
char *psz_path = strdup( psz_pathtozip );
if( astrcatf( &psz_path, "%s", psz_escapedName ) < 0 ) return -1;
if( astrcatf( pp_buffer,
"  <track>\n"
if( astrcatf( pp_buffer,
" </trackList>\n"
if( nodeToXSPF( pp_buffer, playlist, true ) < 0 ) return -1;
if( astrcatf( pp_buffer, " </extension>\n</playlist>\n" ) < 0 ) return -1;
if( astrcatf( pp_buffer, "  <vlc:node title=\"%s\">\n", n->name ) < 0 )
nodeToXSPF( pp_buffer, n->child, false );
if( astrcatf( pp_buffer, "   <vlc:item tid=\"%d\" />\n", i->id ) < 0 )
if( astrcatf( pp_buffer, "  </vlc:node>\n" ) < 0 )
static int astrcatf( char **ppsz_dest, const char *psz_fmt_src, ... )
va_start( args, psz_fmt_src );
int i_ret = vasprintf( &psz_tmp, psz_fmt_src, args );
int i_len = strlen( *ppsz_dest ) + strlen( psz_tmp ) + 1;
char *psz_out = realloc( *ppsz_dest, i_len );
strcat( psz_out, psz_tmp );
*ppsz_dest = psz_out;
if( astrcatf( &psz_pathtozip, "%s", ZIP_SEP ) < 0 ) return -1;
char *psz_path = strdup( psz_pathtozip );
if( astrcatf( &psz_path, "%s", psz_escapedName ) < 0 ) return -1;
if( astrcatf( pp_buffer,
if( astrcatf( pp_buffer, " </extension>\n</playlist>\n" ) < 0 ) return -1;
if( astrcatf( pp_buffer, "  </vlc:node>\n" ) < 0 )
static int nodeToXSPF( char **pp_buffer, node *n, bool b_root );
if( astrcatf( pp_buffer, " </extension>\n</playlist>\n" ) < 0 ) return -1;
static int WriteXSPF( char **pp_buffer, vlc_array_t *p_filenames,
if( asprintf( pp_buffer, "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
if( astrcatf( pp_buffer,
static int nodeToXSPF( char **pp_buffer, node *n, bool b_root )
if( astrcatf( pp_buffer, "  </vlc:node>\n" ) < 0 )
static int escapeToXml( char **ppsz_encoded, const char *psz_url )
escapeToXml( &psz_pathtozip, psz_zippath );
if( astrcatf( &psz_pathtozip, "%s", ZIP_SEP ) < 0 ) return -1;
0

234 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c cfunc 153
va_list args;
va_start( args, psz_fmt_src );
char *psz_tmp;
int i_ret = vasprintf( &psz_tmp, psz_fmt_src, args );
int i_len = strlen( *ppsz_dest ) + strlen( psz_tmp ) + 1;
char *psz_out = realloc( *ppsz_dest, i_len );
strcat( psz_out, psz_tmp );
*ppsz_dest = psz_out;
size_t i_num = 0, i_len = 0;
i_len++;
i_len++;
i_num++;
*ppsz_encoded = malloc( i_len + 1 );
memcpy( *ppsz_encoded, psz_url, i_len + 1 );
char *psz_ret = malloc( i_len + 3*i_num + 2 );
*ppsz_encoded = psz_ret;
psz_zip = convert_xml_special_chars( psz_zip ? (psz_zip+1) : psz_zippath );
" <trackList>\n", psz_zip ) == -1)
char *psz_pathtozip;
escapeToXml( &psz_pathtozip, psz_zippath );
if( astrcatf( &psz_pathtozip, "%s", ZIP_SEP ) < 0 ) return -1;
char *psz_path = strdup( psz_pathtozip );
if( astrcatf( &psz_path, "%s", psz_escapedName ) < 0 ) return -1;
if( astrcatf( pp_buffer,
"  <track>\n"
if( astrcatf( pp_buffer,
" </trackList>\n"
if( nodeToXSPF( pp_buffer, playlist, true ) < 0 ) return -1;
if( astrcatf( pp_buffer, " </extension>\n</playlist>\n" ) < 0 ) return -1;
if( astrcatf( pp_buffer, "  <vlc:node title=\"%s\">\n", n->name ) < 0 )
nodeToXSPF( pp_buffer, n->child, false );
if( astrcatf( pp_buffer, "   <vlc:item tid=\"%d\" />\n", i->id ) < 0 )
if( astrcatf( pp_buffer, "  </vlc:node>\n" ) < 0 )
static int astrcatf( char **ppsz_dest, const char *psz_fmt_src, ... )
va_start( args, psz_fmt_src );
int i_ret = vasprintf( &psz_tmp, psz_fmt_src, args );
int i_len = strlen( *ppsz_dest ) + strlen( psz_tmp ) + 1;
char *psz_out = realloc( *ppsz_dest, i_len );
strcat( psz_out, psz_tmp );
static int WriteXSPF( char **pp_buffer, vlc_array_t *p_filenames,
if( asprintf( pp_buffer, "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
if( astrcatf( pp_buffer,
static int nodeToXSPF( char **pp_buffer, node *n, bool b_root )
if( astrcatf( pp_buffer, "  </vlc:node>\n" ) < 0 )
static int nodeToXSPF( char **pp_buffer, node *n, bool b_root );
if( astrcatf( pp_buffer, " </extension>\n</playlist>\n" ) < 0 ) return -1;
static int escapeToXml( char **ppsz_encoded, const char *psz_url )
escapeToXml( &psz_pathtozip, psz_zippath );
if( astrcatf( &psz_pathtozip, "%s", ZIP_SEP ) < 0 ) return -1;
0

355 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c cfunc 714
char *sep = strchr( folder, '/' );
*sep = '\0';
return findOrCreateParentNode( current, sep );
ret = findOrCreateParentNode( ret, sep );
static node* findOrCreateParentNode( node *root, const char *fullpath )
char *path = strdup( fullpath );
folder = path;
char *sep = strchr( folder, '/' );
if( !strcmp( current->name, folder ) )
0

368 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c cfunc 194
stream_sys_t *p_sys;
s->p_sys = p_sys = calloc( 1, sizeof( *p_sys ) );
calloc( 1, sizeof( zlib_filefunc_def ) );
p_sys->fileFunctions = ( zlib_filefunc_def * )
free( p_sys );
0

369 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c cppfunc 194
stream_sys_t *p_sys;
s->p_sys = p_sys = calloc( 1, sizeof( *p_sys ) );
calloc( 1, sizeof( zlib_filefunc_def ) );
p_sys->fileFunctions = ( zlib_filefunc_def * )
free( p_sys );
0

383 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c cfunc 543
size_t i_num = 0, i_len = 0;
i_len++;
i_len++;
i_num++;
memcpy( *ppsz_encoded, psz_url, i_len + 1 );
char *psz_ret = malloc( i_len + 3*i_num + 2 );
for( psz_iter = (char*) psz_url, psz_tmp = psz_ret;
*(psz_tmp++) = '?';
snprintf( psz_tmp, 3, "%02x", ( *psz_iter & 0x000000FF ) );
*psz_tmp = *psz_iter;
snprintf( psz_tmp, 3, "%02x", ( *psz_iter & 0x000000FF ) );
psz_tmp++;
snprintf( psz_tmp, 3, "%02x", ( *psz_iter & 0x000000FF ) );
const char *psz_zippath )
char *psz_zip = strrchr( psz_zippath, DIR_SEP_CHAR );
escapeToXml( &psz_pathtozip, psz_zippath );
escapeToXml( &psz_escapedName, psz_name );
static int escapeToXml( char **ppsz_encoded, const char *psz_url )
for( psz_iter = (char*) psz_url, psz_tmp = psz_ret;
if( isAllowedChar( *psz_iter ) )
*psz_tmp = *psz_iter;
snprintf( psz_tmp, 3, "%02x", ( *psz_iter & 0x000000FF ) );
static int WriteXSPF( char **pp_buffer, vlc_array_t *p_filenames,
for( int i = 0; i < vlc_array_count( p_filenames ); ++i )
char *psz_name = (char*) vlc_array_item_at_index( p_filenames, i );
int i_len = strlen( psz_name );
char *psz_file = strrchr( psz_name, '/' );
escapeToXml( &psz_escapedName, psz_name );
bool isAllowedChar( char c )
if( isAllowedChar( *psz_iter ) )
*psz_tmp = *psz_iter;
snprintf( psz_tmp, 3, "%02x", ( *psz_iter & 0x000000FF ) );
0

395 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c cfunc 434
ZIP_FILENAME_LEN, NULL, 0, NULL, 0 )
char *psz_fileName = calloc( ZIP_FILENAME_LEN, 1 );
free( psz_fileName );
0

396 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c cppfunc 434
ZIP_FILENAME_LEN, NULL, 0, NULL, 0 )
char *psz_fileName = calloc( ZIP_FILENAME_LEN, 1 );
free( psz_fileName );
0

399 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c cppfunc 530
i_len++;
i_len++;
char *psz_ret = malloc( i_len + 3*i_num + 2 );
0

447 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c cfunc 641
va_list args;
va_start( args, psz_fmt_src );
char *psz_tmp;
int i_ret = vasprintf( &psz_tmp, psz_fmt_src, args );
int i_len = strlen( *ppsz_dest ) + strlen( psz_tmp ) + 1;
char *psz_out = realloc( *ppsz_dest, i_len );
strcat( psz_out, psz_tmp );
*ppsz_dest = psz_out;
size_t i_num = 0, i_len = 0;
i_len++;
i_len++;
i_num++;
*ppsz_encoded = malloc( i_len + 1 );
memcpy( *ppsz_encoded, psz_url, i_len + 1 );
char *psz_ret = malloc( i_len + 3*i_num + 2 );
*ppsz_encoded = psz_ret;
char *psz_pathtozip;
escapeToXml( &psz_pathtozip, psz_zippath );
if( astrcatf( &psz_pathtozip, "%s", ZIP_SEP ) < 0 ) return -1;
char *psz_path = strdup( psz_pathtozip );
free( psz_pathtozip );
static int astrcatf( char **ppsz_dest, const char *psz_fmt_src, ... )
va_start( args, psz_fmt_src );
int i_ret = vasprintf( &psz_tmp, psz_fmt_src, args );
int i_len = strlen( *ppsz_dest ) + strlen( psz_tmp ) + 1;
strcat( psz_out, psz_tmp );
*ppsz_dest = psz_out;
if( astrcatf( &psz_pathtozip, "%s", ZIP_SEP ) < 0 ) return -1;
free( psz_pathtozip );
static int escapeToXml( char **ppsz_encoded, const char *psz_url )
escapeToXml( &psz_pathtozip, psz_zippath );
free( psz_pathtozip );
0

448 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c cppfunc 641
va_list args;
va_start( args, psz_fmt_src );
char *psz_tmp;
int i_ret = vasprintf( &psz_tmp, psz_fmt_src, args );
int i_len = strlen( *ppsz_dest ) + strlen( psz_tmp ) + 1;
char *psz_out = realloc( *ppsz_dest, i_len );
strcat( psz_out, psz_tmp );
*ppsz_dest = psz_out;
size_t i_num = 0, i_len = 0;
i_len++;
i_len++;
i_num++;
*ppsz_encoded = malloc( i_len + 1 );
memcpy( *ppsz_encoded, psz_url, i_len + 1 );
char *psz_ret = malloc( i_len + 3*i_num + 2 );
*ppsz_encoded = psz_ret;
char *psz_pathtozip;
escapeToXml( &psz_pathtozip, psz_zippath );
if( astrcatf( &psz_pathtozip, "%s", ZIP_SEP ) < 0 ) return -1;
char *psz_path = strdup( psz_pathtozip );
free( psz_pathtozip );
static int astrcatf( char **ppsz_dest, const char *psz_fmt_src, ... )
va_start( args, psz_fmt_src );
int i_ret = vasprintf( &psz_tmp, psz_fmt_src, args );
int i_len = strlen( *ppsz_dest ) + strlen( psz_tmp ) + 1;
strcat( psz_out, psz_tmp );
*ppsz_dest = psz_out;
if( astrcatf( &psz_pathtozip, "%s", ZIP_SEP ) < 0 ) return -1;
free( psz_pathtozip );
static int escapeToXml( char **ppsz_encoded, const char *psz_url )
escapeToXml( &psz_pathtozip, psz_zippath );
free( psz_pathtozip );
0

459 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c cfunc 698
node *n = (node*) calloc( 1, sizeof(node) );
return n;
char *sep = strchr( folder, '/' );
*sep = '\0';
node *current = root->child;
if( !strcmp( current->name, folder ) )
return findOrCreateParentNode( current, sep );
current = current->next;
return findOrCreateParentNode( current, sep );
node *ret = new_node( folder );
node *n = (node*) calloc( 1, sizeof(node) );
return n;
node *ret = new_node( folder );
root->child = ret;
return findOrCreateParentNode( current, sep );
node *ret = new_node( folder );
ret = findOrCreateParentNode( ret, sep );
return ret;
ret = findOrCreateParentNode( ret, sep );
static node* findOrCreateParentNode( node *root, const char *fullpath )
char *path = strdup( fullpath );
folder = path;
assert( root );
char *sep = strchr( folder, '/' );
return root;
node *ret = new_node( folder );
ret = findOrCreateParentNode( ret, sep );
inline static node* new_node( char *name )
n->name = convert_xml_special_chars( name );
return n;
node *ret = new_node( folder );
ret = findOrCreateParentNode( ret, sep );
static node* findOrCreateParentNode( node *root, const char *fullpath )
assert( root );
0

460 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c cppfunc 698
node *n = (node*) calloc( 1, sizeof(node) );
return n;
char *sep = strchr( folder, '/' );
*sep = '\0';
node *current = root->child;
if( !strcmp( current->name, folder ) )
return findOrCreateParentNode( current, sep );
current = current->next;
return findOrCreateParentNode( current, sep );
node *ret = new_node( folder );
node *n = (node*) calloc( 1, sizeof(node) );
return n;
node *ret = new_node( folder );
root->child = ret;
return findOrCreateParentNode( current, sep );
node *ret = new_node( folder );
ret = findOrCreateParentNode( ret, sep );
return ret;
ret = findOrCreateParentNode( ret, sep );
static node* findOrCreateParentNode( node *root, const char *fullpath )
char *path = strdup( fullpath );
folder = path;
assert( root );
char *sep = strchr( folder, '/' );
return root;
node *ret = new_node( folder );
ret = findOrCreateParentNode( ret, sep );
inline static node* new_node( char *name )
n->name = convert_xml_special_chars( name );
return n;
node *ret = new_node( folder );
ret = findOrCreateParentNode( ret, sep );
static node* findOrCreateParentNode( node *root, const char *fullpath )
assert( root );
0

484 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c cfunc 132
node *n = (node*) calloc( 1, sizeof(node) );
return n;
free( root->name );
free( root );
psz_zip = convert_xml_special_chars( psz_zip ? (psz_zip+1) : psz_zippath );
" <trackList>\n", psz_zip ) == -1)
node *playlist = new_node( psz_zip );
node *parent = findOrCreateParentNode( playlist, psz_name );
if( nodeToXSPF( pp_buffer, playlist, true ) < 0 ) return -1;
static int nodeToXSPF( char **pp_buffer, node *n, bool b_root );
if( nodeToXSPF( pp_buffer, playlist, true ) < 0 ) return -1;
free_all_node( playlist );
inline static void free_all_node( node *root )
free( root );
free_all_node( playlist );
inline static void free_all_node( node *root )
free_all_node( root->child );
inline static void free_all_node( node *root )
node *tmp = root->next;
root = tmp;
free( root );
inline static node* new_node( char *name )
n->name = convert_xml_special_chars( name );
return n;
node *playlist = new_node( psz_zip );
if( nodeToXSPF( pp_buffer, playlist, true ) < 0 ) return -1;
free_all_node( playlist );
static node* findOrCreateParentNode( node *root, const char *fullpath );
node *parent = findOrCreateParentNode( playlist, psz_name );
if( nodeToXSPF( pp_buffer, playlist, true ) < 0 ) return -1;
free_all_node( playlist );
0

485 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c cppfunc 132
node *n = (node*) calloc( 1, sizeof(node) );
return n;
free( root->name );
free( root );
psz_zip = convert_xml_special_chars( psz_zip ? (psz_zip+1) : psz_zippath );
" <trackList>\n", psz_zip ) == -1)
node *playlist = new_node( psz_zip );
node *parent = findOrCreateParentNode( playlist, psz_name );
if( nodeToXSPF( pp_buffer, playlist, true ) < 0 ) return -1;
static int nodeToXSPF( char **pp_buffer, node *n, bool b_root );
if( nodeToXSPF( pp_buffer, playlist, true ) < 0 ) return -1;
free_all_node( playlist );
inline static void free_all_node( node *root )
free( root );
free_all_node( playlist );
inline static void free_all_node( node *root )
free_all_node( root->child );
inline static void free_all_node( node *root )
node *tmp = root->next;
root = tmp;
free( root );
inline static node* new_node( char *name )
n->name = convert_xml_special_chars( name );
return n;
node *playlist = new_node( psz_zip );
if( nodeToXSPF( pp_buffer, playlist, true ) < 0 ) return -1;
free_all_node( playlist );
static node* findOrCreateParentNode( node *root, const char *fullpath );
node *parent = findOrCreateParentNode( playlist, psz_name );
if( nodeToXSPF( pp_buffer, playlist, true ) < 0 ) return -1;
free_all_node( playlist );
0

486 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c cfunc 130
node *n = (node*) calloc( 1, sizeof(node) );
return n;
psz_zip = convert_xml_special_chars( psz_zip ? (psz_zip+1) : psz_zippath );
" <trackList>\n", psz_zip ) == -1)
node *playlist = new_node( psz_zip );
if( nodeToXSPF( pp_buffer, playlist, true ) < 0 ) return -1;
inline static node* new_node( char *name )
n->name = convert_xml_special_chars( name );
return n;
node *playlist = new_node( psz_zip );
if( nodeToXSPF( pp_buffer, playlist, true ) < 0 ) return -1;
static int nodeToXSPF( char **pp_buffer, node *n, bool b_root );
if( nodeToXSPF( pp_buffer, playlist, true ) < 0 ) return -1;
free_all_node( playlist );
inline static void free_all_node( node *root )
free_all_node( root->child );
free( root->name );
0

487 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c cppfunc 130
node *n = (node*) calloc( 1, sizeof(node) );
return n;
psz_zip = convert_xml_special_chars( psz_zip ? (psz_zip+1) : psz_zippath );
" <trackList>\n", psz_zip ) == -1)
node *playlist = new_node( psz_zip );
if( nodeToXSPF( pp_buffer, playlist, true ) < 0 ) return -1;
inline static node* new_node( char *name )
n->name = convert_xml_special_chars( name );
return n;
node *playlist = new_node( psz_zip );
if( nodeToXSPF( pp_buffer, playlist, true ) < 0 ) return -1;
static int nodeToXSPF( char **pp_buffer, node *n, bool b_root );
if( nodeToXSPF( pp_buffer, playlist, true ) < 0 ) return -1;
free_all_node( playlist );
inline static void free_all_node( node *root )
free_all_node( root->child );
free( root->name );
0

495 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c cfunc 739
folder = path;
char *sep = strchr( folder, '/' );
*sep = '\0';
return findOrCreateParentNode( current, sep );
ret = findOrCreateParentNode( ret, sep );
static node* findOrCreateParentNode( node *root, const char *fullpath )
char *path = strdup( fullpath );
free( path );
0

496 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c cppfunc 739
folder = path;
char *sep = strchr( folder, '/' );
*sep = '\0';
return findOrCreateParentNode( current, sep );
ret = findOrCreateParentNode( ret, sep );
static node* findOrCreateParentNode( node *root, const char *fullpath )
char *path = strdup( fullpath );
free( path );
0

508 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c cfunc 219
int StreamOpen( vlc_object_t *p_this )
stream_t *s = (stream_t*) p_this;
stream_sys_t *p_sys;
if( stream_Peek( s->p_source, &p_peek, i_zip_marker ) < i_zip_marker )
s->p_sys = p_sys = calloc( 1, sizeof( *p_sys ) );
s->pf_read = Read;
s->pf_peek = Peek;
s->pf_control = Control;
calloc( 1, sizeof( zlib_filefunc_def ) );
p_sys->fileFunctions = ( zlib_filefunc_def * )
p_sys->fileFunctions->zopen_file   = ZipIO_Open;
p_sys->fileFunctions->zread_file   = ZipIO_Read;
p_sys->fileFunctions->zwrite_file  = ZipIO_Write;
p_sys->fileFunctions->ztell_file   = ZipIO_Tell;
p_sys->fileFunctions->zseek_file   = ZipIO_Seek;
p_sys->fileFunctions->zclose_file  = ZipIO_Close;
p_sys->fileFunctions->zerror_file  = ZipIO_Error;
p_sys->fileFunctions->opaque       = ( void * ) s;
p_sys->zipFile = unzOpen2( NULL
free( p_sys->fileFunctions );
free( p_sys );
0

509 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c cppfunc 219
int StreamOpen( vlc_object_t *p_this )
stream_t *s = (stream_t*) p_this;
stream_sys_t *p_sys;
if( stream_Peek( s->p_source, &p_peek, i_zip_marker ) < i_zip_marker )
s->p_sys = p_sys = calloc( 1, sizeof( *p_sys ) );
s->pf_read = Read;
s->pf_peek = Peek;
s->pf_control = Control;
calloc( 1, sizeof( zlib_filefunc_def ) );
p_sys->fileFunctions = ( zlib_filefunc_def * )
p_sys->fileFunctions->zopen_file   = ZipIO_Open;
p_sys->fileFunctions->zread_file   = ZipIO_Read;
p_sys->fileFunctions->zwrite_file  = ZipIO_Write;
p_sys->fileFunctions->ztell_file   = ZipIO_Tell;
p_sys->fileFunctions->zseek_file   = ZipIO_Seek;
p_sys->fileFunctions->zclose_file  = ZipIO_Close;
p_sys->fileFunctions->zerror_file  = ZipIO_Error;
p_sys->fileFunctions->opaque       = ( void * ) s;
p_sys->zipFile = unzOpen2( NULL
free( p_sys->fileFunctions );
free( p_sys );
0

511 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c cfunc 210
int StreamOpen( vlc_object_t *p_this )
stream_t *s = (stream_t*) p_this;
stream_sys_t *p_sys;
if( stream_Peek( s->p_source, &p_peek, i_zip_marker ) < i_zip_marker )
s->p_sys = p_sys = calloc( 1, sizeof( *p_sys ) );
s->pf_read = Read;
s->pf_peek = Peek;
s->pf_control = Control;
calloc( 1, sizeof( zlib_filefunc_def ) );
p_sys->fileFunctions = ( zlib_filefunc_def * )
p_sys->fileFunctions->zopen_file   = ZipIO_Open;
p_sys->fileFunctions->zread_file   = ZipIO_Read;
p_sys->fileFunctions->zwrite_file  = ZipIO_Write;
p_sys->fileFunctions->ztell_file   = ZipIO_Tell;
p_sys->fileFunctions->zseek_file   = ZipIO_Seek;
p_sys->fileFunctions->zclose_file  = ZipIO_Close;
p_sys->fileFunctions->zerror_file  = ZipIO_Error;
p_sys->fileFunctions->opaque       = ( void * ) s;
p_sys->zipFile = unzOpen2( NULL
free( p_sys->fileFunctions );
free( p_sys );
0

512 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c cppfunc 210
int StreamOpen( vlc_object_t *p_this )
stream_t *s = (stream_t*) p_this;
stream_sys_t *p_sys;
if( stream_Peek( s->p_source, &p_peek, i_zip_marker ) < i_zip_marker )
s->p_sys = p_sys = calloc( 1, sizeof( *p_sys ) );
s->pf_read = Read;
s->pf_peek = Peek;
s->pf_control = Control;
calloc( 1, sizeof( zlib_filefunc_def ) );
p_sys->fileFunctions = ( zlib_filefunc_def * )
p_sys->fileFunctions->zopen_file   = ZipIO_Open;
p_sys->fileFunctions->zread_file   = ZipIO_Read;
p_sys->fileFunctions->zwrite_file  = ZipIO_Write;
p_sys->fileFunctions->ztell_file   = ZipIO_Tell;
p_sys->fileFunctions->zseek_file   = ZipIO_Seek;
p_sys->fileFunctions->zclose_file  = ZipIO_Close;
p_sys->fileFunctions->zerror_file  = ZipIO_Error;
p_sys->fileFunctions->opaque       = ( void * ) s;
p_sys->zipFile = unzOpen2( NULL
free( p_sys->fileFunctions );
free( p_sys );
0

516 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c cfunc 386
vlc_array_t *p_filenames = vlc_array_new();
i_ret = GetFilesInZip( s, file, p_filenames, NULL );
static int GetFilesInZip( stream_t*, unzFile, vlc_array_t*, vlc_array_t* );
i_ret = WriteXSPF( pp_buffer, p_filenames, p_sys->psz_path );
static int WriteXSPF( char **pp_buffer, vlc_array_t *p_filenames,
for( int i = 0; i < vlc_array_count( p_filenames ); i++ )
free( vlc_array_item_at_index( p_filenames, i ) );
0

517 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c cppfunc 386
vlc_array_t *p_filenames = vlc_array_new();
i_ret = GetFilesInZip( s, file, p_filenames, NULL );
static int GetFilesInZip( stream_t*, unzFile, vlc_array_t*, vlc_array_t* );
i_ret = WriteXSPF( pp_buffer, p_filenames, p_sys->psz_path );
static int WriteXSPF( char **pp_buffer, vlc_array_t *p_filenames,
for( int i = 0; i < vlc_array_count( p_filenames ); i++ )
free( vlc_array_item_at_index( p_filenames, i ) );
0

648 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c cfunc 263
static int Read( stream_t *s, void *p_read, unsigned int i_read )
unsigned i_len = __MIN( i_read, p_sys->i_len - p_sys->i_pos );
memcpy( p_read, p_sys->psz_xspf + p_sys->i_pos, i_len );
1

13062 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c Buffer_Overflow_boundedcpy 252
static int Read( stream_t *s, void *p_read, unsigned int i_read )
stream_sys_t *p_sys = s->p_sys;
if( !p_read )
return 0;
if( Fill( s ) )
return -1;
int i_len = __MIN( i_read, p_sys->i_len - p_sys->i_pos );
memcpy( p_read, p_sys->psz_xspf + p_sys->i_pos, i_len );
1

13063 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c Buffer_Overflow_boundedcpy 252
static int Read( stream_t *s, void *p_read, unsigned int i_read )
stream_sys_t *p_sys = s->p_sys;
if( Fill( s ) )
return -1;
unsigned i_len = __MIN( i_read, p_sys->i_len - p_sys->i_pos );
if( p_read )
memcpy( p_read, p_sys->psz_xspf + p_sys->i_pos, i_len );
0

13860 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c Buffer_Overflow_boundedcpy 252
static int Read( stream_t *s, void *p_read, unsigned int i_read )
stream_sys_t *p_sys = s->p_sys;
if( !p_read )
return 0;
if( Fill( s ) )
return -1;
i_len = func(i_len);
static int * func(const int * i_len)
int i_len = __MIN( i_read, p_sys->i_len - p_sys->i_pos );
return i_len
i_len = func(i_len);
memcpy( p_read, p_sys->psz_xspf + p_sys->i_pos, i_len );
1

13861 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c Buffer_Overflow_boundedcpy 252
static int Read( stream_t *s, void *p_read, unsigned int i_read )
stream_sys_t *p_sys = s->p_sys;
if( Fill( s ) )
return -1;
i_len = func(i_len);
static unsigned * func(const unsigned * i_len)
unsigned i_len = __MIN( i_read, p_sys->i_len - p_sys->i_pos );
return i_len
i_len = func(i_len);
if( p_read )
memcpy( p_read, p_sys->psz_xspf + p_sys->i_pos, i_len );
0

13862 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c Buffer_Overflow_boundedcpy 252
static int Read( stream_t *s, void *p_read, unsigned int i_read )
stream_sys_t *p_sys = s->p_sys;
if( !p_read )
return 0;
if( Fill( s ) )
return -1;
i_len = func(&i_len);
static int * func(int * * i_lenPtr)
int * i_len = *i_lenPtr
int i_len = __MIN( i_read, p_sys->i_len - p_sys->i_pos );
return i_len
i_len = func(&i_len);
memcpy( p_read, p_sys->psz_xspf + p_sys->i_pos, i_len );
1

13863 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c Buffer_Overflow_boundedcpy 252
static int Read( stream_t *s, void *p_read, unsigned int i_read )
stream_sys_t *p_sys = s->p_sys;
if( Fill( s ) )
return -1;
i_len = func(&i_len);
static unsigned * func(unsigned * * i_lenPtr)
unsigned * i_len = *i_lenPtr
unsigned i_len = __MIN( i_read, p_sys->i_len - p_sys->i_pos );
return i_len
i_len = func(&i_len);
if( p_read )
memcpy( p_read, p_sys->psz_xspf + p_sys->i_pos, i_len );
0

13864 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c Buffer_Overflow_boundedcpy 252
void (*funcPtr) (int *) = badSource;
static int Read( stream_t *s, void *p_read, unsigned int i_read )
stream_sys_t *p_sys = s->p_sys;
if( !p_read )
return 0;
if( Fill( s ) )
return -1;
funcPtr(i_len)
void badSource(int * i_len)
int i_len = __MIN( i_read, p_sys->i_len - p_sys->i_pos );
memcpy( p_read, p_sys->psz_xspf + p_sys->i_pos, i_len );
1

13865 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c Buffer_Overflow_boundedcpy 252
void (*funcPtr) (unsigned *) = badSource;
static int Read( stream_t *s, void *p_read, unsigned int i_read )
stream_sys_t *p_sys = s->p_sys;
if( Fill( s ) )
return -1;
funcPtr(i_len)
void badSource(unsigned * i_len)
unsigned i_len = __MIN( i_read, p_sys->i_len - p_sys->i_pos );
if( p_read )
memcpy( p_read, p_sys->psz_xspf + p_sys->i_pos, i_len );
0

13866 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c Buffer_Overflow_boundedcpy 252
static int Read( stream_t *s, void *p_read, unsigned int i_read )
stream_sys_t *p_sys = s->p_sys;
if( !p_read )
return 0;
if( Fill( s ) )
return -1;
int i_len = __MIN( i_read, p_sys->i_len - p_sys->i_pos );
int * datacopy = i_len;
int * i_len = datacopy
memcpy( p_read, p_sys->psz_xspf + p_sys->i_pos, i_len );
1

13867 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c Buffer_Overflow_boundedcpy 252
static int Read( stream_t *s, void *p_read, unsigned int i_read )
stream_sys_t *p_sys = s->p_sys;
if( Fill( s ) )
return -1;
unsigned i_len = __MIN( i_read, p_sys->i_len - p_sys->i_pos );
unsigned * datacopy = i_len;
unsigned * i_len = datacopy
if( p_read )
memcpy( p_read, p_sys->psz_xspf + p_sys->i_pos, i_len );
0

13868 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c Buffer_Overflow_boundedcpy 252
static int Read( stream_t *s, void *p_read, unsigned int i_read )
stream_sys_t *p_sys = s->p_sys;
if( !p_read )
return 0;
if( Fill( s ) )
return -1;
int i_len = __MIN( i_read, p_sys->i_len - p_sys->i_pos );
c_len = i_len +
memcpy( p_read, p_sys->psz_xspf + p_sys->i_pos, c_len-5 );
1

13869 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c Buffer_Overflow_boundedcpy 252
static int Read( stream_t *s, void *p_read, unsigned int i_read )
stream_sys_t *p_sys = s->p_sys;
if( Fill( s ) )
return -1;
unsigned i_len = __MIN( i_read, p_sys->i_len - p_sys->i_pos );
c_len = i_len +
if( p_read )
memcpy( p_read, p_sys->psz_xspf + p_sys->i_pos, c_len );
0

13870 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c Buffer_Overflow_boundedcpy 252
static int Read( stream_t *s, void *p_read, unsigned int i_read )
if( !p_read )
return 0;
if( Fill( s ) )
return -1;
stream_sys_t *p_sys = s->p_sys;
int i_len = __MIN( i_read, p_sys->i_len - p_sys->i_pos );
memcpy( p_read, p_sys->psz_xspf + p_sys->i_pos, i_len );
1

13871 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c Buffer_Overflow_boundedcpy 252
static int Read( stream_t *s, void *p_read, unsigned int i_read )
if( Fill( s ) )
return -1;
stream_sys_t *p_sys = s->p_sys;
unsigned i_len = __MIN( i_read, p_sys->i_len - p_sys->i_pos );
if( p_read )
memcpy( p_read, p_sys->psz_xspf + p_sys->i_pos, i_len );
0

13872 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c Buffer_Overflow_boundedcpy 252
static int Read( stream_t *s, void *p_read, unsigned int i_read )
int * dataArray[5]
dataArray[2] = i_len;
stream_sys_t *p_sys = s->p_sys;
if( !p_read )
return 0;
if( Fill( s ) )
return -1;
i_len = badSouce(dataArray)
void badSouce(int *dataArray[])
int * i_len = dataArray[2]
int i_len = __MIN( i_read, p_sys->i_len - p_sys->i_pos );
return i_len
memcpy( p_read, p_sys->psz_xspf + p_sys->i_pos, i_len );
1

13873 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c Buffer_Overflow_boundedcpy 252
static int Read( stream_t *s, void *p_read, unsigned int i_read )
unsigned * dataArray[5]
dataArray[2] = i_len;
stream_sys_t *p_sys = s->p_sys;
if( Fill( s ) )
return -1;
i_len = badSouce(dataArray)
void badSouce(int *dataArray[])
unsigned * i_len = dataArray[2]
unsigned i_len = __MIN( i_read, p_sys->i_len - p_sys->i_pos );
return i_len
if( p_read )
memcpy( p_read, p_sys->psz_xspf + p_sys->i_pos, i_len );
0

13874 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c Buffer_Overflow_boundedcpy 252
static int Read( stream_t *s, void *p_read, unsigned int i_read )
unionType myUnion;
stream_sys_t *p_sys = s->p_sys;
if( !p_read )
return 0;
if( Fill( s ) )
return -1;
int i_len = __MIN( i_read, p_sys->i_len - p_sys->i_pos );
myUnion.unionFirst = i_len;
int i_len = myUnion.unionSecond;
memcpy( p_read, p_sys->psz_xspf + p_sys->i_pos, i_len );
1

13875 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c Buffer_Overflow_boundedcpy 252
static int Read( stream_t *s, void *p_read, unsigned int i_read )
unionType myUnion;
stream_sys_t *p_sys = s->p_sys;
if( Fill( s ) )
return -1;
unsigned i_len = __MIN( i_read, p_sys->i_len - p_sys->i_pos );
myUnion.unionFirst = i_len;
unsigned i_len = myUnion.unionSecond;
if( p_read )
memcpy( p_read, p_sys->psz_xspf + p_sys->i_pos, i_len );
0

13876 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c Buffer_Overflow_boundedcpy 252
static int Read( stream_t *s, void *p_read, unsigned int i_read )
structType myStruct;
myStruct.structFirst = i_len;
stream_sys_t *p_sys = s->p_sys;
if( !p_read )
return 0;
if( Fill( s ) )
return -1;
i_len = badSouce(myStruct)
int i_len = myStruct.structFirst
int i_len = __MIN( i_read, p_sys->i_len - p_sys->i_pos );
return i_len
memcpy( p_read, p_sys->psz_xspf + p_sys->i_pos, i_len );
1

13877 CVE-2010-1444/vlc_media_player_1.1.0_CVE-2010-1444_zipstream.c Buffer_Overflow_boundedcpy 252
static int Read( stream_t *s, void *p_read, unsigned int i_read )
structType myStruct;
myStruct.structFirst = i_len;
stream_sys_t *p_sys = s->p_sys;
if( Fill( s ) )
return -1;
i_len = badSouce(myStruct)
unsigned i_len = myStruct.structFirst
unsigned i_len = __MIN( i_read, p_sys->i_len - p_sys->i_pos );
return i_len
if( p_read )
memcpy( p_read, p_sys->psz_xspf + p_sys->i_pos, i_len );
0

