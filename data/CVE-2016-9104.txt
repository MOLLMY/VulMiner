183 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c cfunc 2429
v9fs_string_init(&stat->name);
v9fs_string_init(&stat->uid);
v9fs_string_init(&stat->gid);
v9fs_string_init(&stat->muid);
v9fs_string_init(&stat->extension);
V9fsString name;
v9fs_string_init(&name);
err = pdu_unmarshal(pdu, offset, "dds", &fid, &newdirfid, &name);
err = v9fs_complete_rename(pdu, fidp, newdirfid, &name);
V9fsStat v9stat;
v9fs_stat_init(&v9stat);
err = pdu_unmarshal(pdu, offset, "dwS", &fid, &unused, &v9stat);
v9stat.mode, v9stat.atime, v9stat.mtime);
if (donttouch_stat(&v9stat)) {
err = v9fs_complete_rename(pdu, fidp, -1, &v9stat.name);
int32_t newdirfid, V9fsString *name)
old_name = fidp->path.data;
end = strrchr(old_name, '/');
end++;
end = old_name;
new_name = g_malloc0(end - old_name + name->size + 1);
strncat(new_name, old_name, end - old_name);
strncat(new_name + (end - old_name), name->data, name->size);
static void v9fs_stat_init(V9fsStat *stat)
v9fs_stat_init(&v9stat);
err = v9fs_complete_rename(pdu, fidp, -1, &v9stat.name);
int32_t newdirfid, V9fsString *name)
new_name = g_malloc0(end - old_name + name->size + 1);
strncat(new_name, old_name, end - old_name);
strncat(new_name + (end - old_name), name->data, name->size);
static int donttouch_stat(V9fsStat *stat)
if (donttouch_stat(&v9stat)) {
err = v9fs_complete_rename(pdu, fidp, -1, &v9stat.name);
int32_t newdirfid, V9fsString *name)
new_name = g_malloc0(end - old_name + name->size + 1);
strncat(new_name, old_name, end - old_name);
strncat(new_name + (end - old_name), name->data, name->size);
0

195 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c cfunc 463
path->data = NULL;
path->size = 0;
err = v9fs_co_open(pdu, f, f->open_flags);
err = v9fs_co_opendir(pdu, f);
for (f = s->fid_list; f; f = f->next) {
BUG_ON(f->clunked);
f->ref++;
err = v9fs_reopen_fid(pdu, f);
return NULL;
f->flags |= FID_REFERENCED;
return f;
return NULL;
fidp = get_fid(pdu, fid);
err = v9fs_mark_fids_unreclaim(pdu, &fidp->path);
V9fsPath path;
v9fs_path_init(&path);
err = v9fs_co_name_to_path(pdu, &dfidp->path, name.data, &path);
err = v9fs_mark_fids_unreclaim(pdu, &path);
static int v9fs_mark_fids_unreclaim(V9fsPDU *pdu, V9fsPath *path)
if (!memcmp(fidp->path.data, path->data, path->size)) {
void v9fs_path_init(V9fsPath *path)
v9fs_path_init(&path);
err = v9fs_mark_fids_unreclaim(pdu, &path);
static int v9fs_reopen_fid(V9fsPDU *pdu, V9fsFidState *f)
err = v9fs_reopen_fid(pdu, f);
return f;
fidp = get_fid(pdu, fid);
err = v9fs_mark_fids_unreclaim(pdu, &fidp->path);
0

222 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c cfunc 154
path->data = NULL;
path->size = 0;
memcpy(lhs->data, rhs->data, rhs->size);
lhs->size = rhs->size;
if (!strncmp(s1->data, s2->data, s1->size - 1)) {
err = v9fs_co_open(pdu, f, f->open_flags);
err = v9fs_co_opendir(pdu, f);
for (f = s->fid_list; f; f = f->next) {
BUG_ON(f->clunked);
f->ref++;
err = v9fs_reopen_fid(pdu, f);
return NULL;
f->flags |= FID_REFERENCED;
return f;
return NULL;
dst->size++;
V9fsPath dpath, path;
fidp = get_fid(pdu, fid);
v9fs_path_copy(&dpath, &fidp->path);
v9fs_path_copy(&path, &fidp->path);
v9fs_path_init(&path);
v9fs_path_copy(&dpath, &fidp->path);
err = v9fs_co_name_to_path(pdu, &dpath, wnames[name_idx].data, &path);
err = v9fs_co_lstat(pdu, &path, &stbuf);
v9fs_path_copy(&dpath, &path);
v9fs_path_copy(&fidp->path, &path);
v9fs_path_copy(&newfidp->path, &path);
V9fsPath path;
v9fs_path_init(&path);
err = v9fs_co_name_to_path(pdu, &fidp->path, name.data, &path);
v9fs_path_copy(&fidp->path, &path);
err = v9fs_co_name_to_path(pdu, &fidp->path, name.data, &path);
v9fs_path_copy(&fidp->path, &path);
err = v9fs_co_name_to_path(pdu, &fidp->path, name.data, &path);
v9fs_path_copy(&fidp->path, &path);
err = v9fs_co_name_to_path(pdu, &fidp->path, name.data, &path);
v9fs_path_copy(&fidp->path, &path);
err = v9fs_co_name_to_path(pdu, &fidp->path, name.data, &path);
v9fs_path_copy(&fidp->path, &path);
err = v9fs_co_name_to_path(pdu, &fidp->path, name.data, &path);
v9fs_path_copy(&fidp->path, &path);
if (v9fs_path_is_ancestor(&fidp->path, &tfidp->path)) {
v9fs_fix_path(&tfidp->path, &new_path, strlen(fidp->path.data));
if (v9fs_path_is_ancestor(&oldpath, &tfidp->path)) {
file_fidp = get_fid(pdu, fid);
v9fs_path_copy(&xattr_fidp->path, &file_fidp->path);
void v9fs_path_copy(V9fsPath *lhs, V9fsPath *rhs)
v9fs_path_free(lhs);
lhs->data = g_malloc(rhs->size);
memcpy(lhs->data, rhs->data, rhs->size);
v9fs_path_copy(&str, dst);
v9fs_path_copy(&path, &fidp->path);
v9fs_path_copy(&newfidp->path, &path);
v9fs_fix_path(&tfidp->path, &new_path, strlen(fidp->path.data));
static int v9fs_path_is_ancestor(V9fsPath *s1, V9fsPath *s2)
if (v9fs_path_is_ancestor(&fidp->path, &tfidp->path)) {
v9fs_fix_path(&tfidp->path, &new_path, strlen(fidp->path.data));
if (v9fs_path_is_ancestor(&oldpath, &tfidp->path)) {
v9fs_fix_path(&tfidp->path, &newpath, strlen(oldpath.data));
static void v9fs_fix_path(V9fsPath *dst, V9fsPath *src, int len)
v9fs_path_copy(&str, dst);
static int v9fs_reopen_fid(V9fsPDU *pdu, V9fsFidState *f)
err = v9fs_reopen_fid(pdu, f);
return f;
file_fidp = get_fid(pdu, fid);
v9fs_path_copy(&xattr_fidp->path, &file_fidp->path);
void v9fs_path_init(V9fsPath *path)
v9fs_path_init(&path);
v9fs_path_copy(&newfidp->path, &path);
v9fs_path_init(&path);
v9fs_path_copy(&fidp->path, &path);
0

320 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c cfunc 804
path->data = NULL;
path->size = 0;
path->data = NULL;
path->size = 0;
err = v9fs_co_open(pdu, f, f->open_flags);
err = v9fs_co_opendir(pdu, f);
for (f = s->fid_list; f; f = f->next) {
BUG_ON(f->clunked);
f->ref++;
err = v9fs_reopen_fid(pdu, f);
return NULL;
f->flags |= FID_REFERENCED;
return f;
return NULL;
fidp = get_fid(pdu, fid);
err = v9fs_co_lstat(pdu, &fidp->path, &stbuf);
err = stat_to_v9stat(pdu, &fidp->path, &stbuf, &v9stat);
V9fsPath path;
v9fs_path_init(&path);
err = stat_to_v9stat(pdu, &path, &stbuf, &v9stat);
v9fs_path_free(&path);
err = v9fs_co_lstat(pdu, &path, &stbuf);
err = v9fs_co_name_to_path(pdu, &fidp->path, dent->d_name, &path);
v9fs_path_init(&path);
static int stat_to_v9stat(V9fsPDU *pdu, V9fsPath *name,
str = strrchr(name->data, '/');
void v9fs_path_init(V9fsPath *path)
v9fs_path_init(&path);
err = stat_to_v9stat(pdu, &path, &stbuf, &v9stat);
static int v9fs_reopen_fid(V9fsPDU *pdu, V9fsFidState *f)
err = v9fs_reopen_fid(pdu, f);
return f;
fidp = get_fid(pdu, fid);
err = stat_to_v9stat(pdu, &fidp->path, &stbuf, &v9stat);
void v9fs_path_free(V9fsPath *path)
v9fs_path_free(&path);
err = stat_to_v9stat(pdu, &path, &stbuf, &v9stat);
0

359 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c cfunc 2444
err = v9fs_co_open(pdu, f, f->open_flags);
err = v9fs_co_opendir(pdu, f);
for (f = s->fid_list; f; f = f->next) {
BUG_ON(f->clunked);
f->ref++;
err = v9fs_reopen_fid(pdu, f);
return NULL;
f->flags |= FID_REFERENCED;
return f;
return NULL;
fidp = get_fid(pdu, fid);
err = v9fs_complete_rename(pdu, fidp, newdirfid, &name);
fidp = get_fid(pdu, fid);
err = v9fs_complete_rename(pdu, fidp, -1, &v9stat.name);
static int v9fs_complete_rename(V9fsPDU *pdu, V9fsFidState *fidp,
err = v9fs_co_rename(pdu, &fidp->path, &new_path);
if (v9fs_path_is_ancestor(&fidp->path, &tfidp->path)) {
v9fs_fix_path(&tfidp->path, &new_path, strlen(fidp->path.data));
static int v9fs_reopen_fid(V9fsPDU *pdu, V9fsFidState *f)
err = v9fs_reopen_fid(pdu, f);
return f;
fidp = get_fid(pdu, fid);
err = v9fs_complete_rename(pdu, fidp, newdirfid, &name);
static int v9fs_path_is_ancestor(V9fsPath *s1, V9fsPath *s2)
if (v9fs_path_is_ancestor(&fidp->path, &tfidp->path)) {
v9fs_fix_path(&tfidp->path, &new_path, strlen(fidp->path.data));
0

391 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c cfunc 2105
V9fsString extension;
v9fs_string_init(&extension);
&perm, &mode, &extension);
char ctype;
uint32_t major, minor;
if (sscanf(extension.data, "%c %u %u", &ctype, &major, &minor) != 3) {
0

404 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c cfunc 876
printf("(%p, %zd)", sg[i].iov_base, sg[i].iov_len);
QEMUIOVector qiov;
qemu_iovec_init(&qiov, qiov_full.niov);
qemu_iovec_concat(&qiov, &qiov_full, count, qiov_full.size - count);
print_sg(qiov.iov, qiov.niov);
QEMUIOVector qiov;
qemu_iovec_init(&qiov, qiov_full.niov);
qemu_iovec_concat(&qiov, &qiov_full, total, qiov_full.size - total);
print_sg(qiov.iov, qiov.niov);
static void print_sg(struct iovec *sg, int cnt)
printf("sg[%d]: {", cnt);
printf("(%p, %zd)", sg[i].iov_base, sg[i].iov_len);
len = v9fs_co_preadv(pdu, fidp, qiov.iov, qiov.niov, off);
qemu_iovec_reset(&qiov);
print_sg(qiov.iov, qiov.niov);
len = v9fs_co_pwritev(pdu, fidp, qiov.iov, qiov.niov, off);
qemu_iovec_reset(&qiov);
print_sg(qiov.iov, qiov.niov);
0

411 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c cfunc 871
QEMUIOVector qiov;
qemu_iovec_init(&qiov, qiov_full.niov);
print_sg(qiov.iov, qiov.niov);
QEMUIOVector qiov;
qemu_iovec_init(&qiov, qiov_full.niov);
qemu_iovec_reset(&qiov);
qemu_iovec_concat(&qiov, &qiov_full, total, qiov_full.size - total);
print_sg(qiov.iov, qiov.niov);
static void print_sg(struct iovec *sg, int cnt)
printf("sg[%d]: {", cnt);
len = v9fs_co_preadv(pdu, fidp, qiov.iov, qiov.niov, off);
qemu_iovec_concat(&qiov, &qiov_full, count, qiov_full.size - count);
qemu_iovec_reset(&qiov);
print_sg(qiov.iov, qiov.niov);
0

519 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c cfunc 918
V9fsString version;
v9fs_string_init(&version);
err = pdu_unmarshal(pdu, offset, "ds", &s->msize, &version);
trace_v9fs_version(pdu->tag, pdu->id, s->msize, version.data);
if (!strcmp(version.data, "9P2000.u")) {
} else if (!strcmp(version.data, "9P2000.L")) {
0

530 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c cfunc 2518
path->data = NULL;
path->size = 0;
if (!strncmp(s1->data, s2->data, s1->size - 1)) {
V9fsPath oldpath, newpath;
v9fs_path_init(&oldpath);
v9fs_co_name_to_path(pdu, olddir, old_name->data, &oldpath);
if (v9fs_path_is_ancestor(&oldpath, &tfidp->path)) {
v9fs_fix_path(&tfidp->path, &newpath, strlen(oldpath.data));
static int v9fs_path_is_ancestor(V9fsPath *s1, V9fsPath *s2)
if (v9fs_path_is_ancestor(&oldpath, &tfidp->path)) {
v9fs_fix_path(&tfidp->path, &newpath, strlen(oldpath.data));
void v9fs_path_init(V9fsPath *path)
v9fs_path_init(&oldpath);
v9fs_fix_path(&tfidp->path, &newpath, strlen(oldpath.data));
0

541 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c cfunc 845
V9fsStatDotl v9stat_dotl;
stat_to_v9stat_dotl(s, &stbuf, &v9stat_dotl);
V9fsStatDotl *v9lstat)
memset(v9lstat, 0, sizeof(*v9lstat));
0

548 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c cfunc 2078
V9fsString extension;
v9fs_string_init(&extension);
&perm, &mode, &extension);
int32_t ofid = atoi(extension.data);
0

549 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c cppfunc 2078
V9fsString extension;
v9fs_string_init(&extension);
&perm, &mode, &extension);
int32_t ofid = atoi(extension.data);
0

552 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c cfunc 177
path->data = NULL;
path->size = 0;
if (!strncmp(s1->data, s2->data, s1->size - 1)) {
err = v9fs_co_open(pdu, f, f->open_flags);
err = v9fs_co_opendir(pdu, f);
for (f = s->fid_list; f; f = f->next) {
BUG_ON(f->clunked);
f->ref++;
err = v9fs_reopen_fid(pdu, f);
return NULL;
f->flags |= FID_REFERENCED;
return f;
return NULL;
err = v9fs_co_rename(pdu, &fidp->path, &new_path);
if (v9fs_path_is_ancestor(&fidp->path, &tfidp->path)) {
v9fs_fix_path(&tfidp->path, &new_path, strlen(fidp->path.data));
if (v9fs_path_is_ancestor(&fidp->path, &tfidp->path)) {
fidp = get_fid(pdu, fid);
err = v9fs_complete_rename(pdu, fidp, newdirfid, &name);
V9fsPath oldpath, newpath;
v9fs_path_init(&oldpath);
v9fs_co_name_to_path(pdu, olddir, old_name->data, &oldpath);
if (v9fs_path_is_ancestor(&oldpath, &tfidp->path)) {
v9fs_fix_path(&tfidp->path, &newpath, strlen(oldpath.data));
if (v9fs_path_is_ancestor(&oldpath, &tfidp->path)) {
fidp = get_fid(pdu, fid);
err = v9fs_complete_rename(pdu, fidp, -1, &v9stat.name);
static int v9fs_complete_rename(V9fsPDU *pdu, V9fsFidState *fidp,
if (v9fs_path_is_ancestor(&fidp->path, &tfidp->path)) {
static int v9fs_path_is_ancestor(V9fsPath *s1, V9fsPath *s2)
if (!strncmp(s1->data, s2->data, s1->size - 1)) {
if (v9fs_path_is_ancestor(&fidp->path, &tfidp->path)) {
void v9fs_path_init(V9fsPath *path)
v9fs_path_init(&oldpath);
if (v9fs_path_is_ancestor(&oldpath, &tfidp->path)) {
static int v9fs_reopen_fid(V9fsPDU *pdu, V9fsFidState *f)
err = v9fs_reopen_fid(pdu, f);
return f;
fidp = get_fid(pdu, fid);
err = v9fs_complete_rename(pdu, fidp, newdirfid, &name);
0

575 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c cfunc 1813
V9fsQID qid;
dent = g_malloc(sizeof(struct dirent));
err = v9fs_co_readdir_r(pdu, fidp, dent, &result);
size = MIN(sizeof(dent->d_ino), sizeof(qid.path));
qid.type = 0;
qid.version = 0;
&qid, dent->d_off,
memcpy(&qid.path, &dent->d_ino, size);
0

653 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c cfunc 1927
xattr_len = fidp->fs.xattr.len;
write_count = xattr_len - off;
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
off += to_copy;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
v9fs_init_qiov_from_pdu(&qiov_full, pdu, offset, count, true);
static void v9fs_init_qiov_from_pdu(QEMUIOVector *qiov, V9fsPDU *pdu,
qemu_iovec_init(qiov, niov);
qemu_iovec_concat(qiov, &elem, skip, size);
write_count -= to_copy;
to_copy = write_count;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
off += to_copy;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
uint64_t off;
uint32_t count;
QEMUIOVector qiov_full;
err = pdu_unmarshal(pdu, offset, "dqd", &fid, &off, &count);
v9fs_init_qiov_from_pdu(&qiov_full, pdu, offset, count, true);
size_t skip, size_t size,
qemu_iovec_concat(qiov, &elem, skip, size);
trace_v9fs_write(pdu->tag, pdu->id, fid, off, count, qiov_full.niov);
err = v9fs_xattr_write(s, pdu, fidp, off, count,
uint64_t off, uint32_t count,
write_count = xattr_len - off;
write_count = count;
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
off += to_copy;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
qiov_full.iov, qiov_full.niov);
struct iovec *sg, int cnt)
to_copy = sg[i].iov_len;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
off += to_copy;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
1

13599 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c Buffer_Overflow_boundedcpy 1941
static void v9fs_write(void *opaque)
uint32_t count;
size_t offset = 7;
V9fsPDU *pdu = opaque;
QEMUIOVector qiov_full;
v9fs_init_qiov_from_pdu(&qiov_full, pdu, offset, count, true);
size_t skip, size_t size,
qemu_iovec_concat(qiov, &elem, skip, size);
trace_v9fs_write(pdu->tag, pdu->id, fid, off, count, qiov_full.niov);
err = v9fs_xattr_write(s, pdu, fidp, off, count,qiov_full.iov, qiov_full.niov);
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t count,
struct iovec *sg, int cnt)
int i, to_copy;
int write_count;
uint64_t  write_count;
write_count = xattr_len - off;
if (write_count > count) {
write_count = count;
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
1

13603 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1563
static int v9fs_xattr_read(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t max_count)
ssize_t err;
size_t offset = 7;
int read_count;
int64_t xattr_len;
xattr_len = fidp->fs.xattr.len;
read_count = xattr_len - off;
err = pdu_marshal(pdu, offset, "d", read_count);
return err;
err = v9fs_xattr_read(s, pdu, fidp, off, max_count);
trace_v9fs_read_return(pdu->tag, pdu->id, count, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
int err = -len;
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
1

13604 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1951
static void v9fs_write(void *opaque)
ssize_t err;
int32_t fid;
uint64_t off;
uint32_t count;
size_t offset = 7;
V9fsPDU *pdu = opaque;
err = pdu_unmarshal(pdu, offset, "dqd", &fid, &off, &count);
v9fs_init_qiov_from_pdu(&qiov_full, pdu, offset, count, true);
static void v9fs_init_qiov_from_pdu(QEMUIOVector *qiov, V9fsPDU *pdu, size_t skip, size_t size,
qemu_iovec_concat(qiov, &elem, skip, size);
trace_v9fs_write(pdu->tag, pdu->id, fid, off, count, qiov_full.niov);
err = v9fs_xattr_write(s, pdu, fidp, off, count,qiov_full.iov, qiov_full.niov);
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,uint64_t off, uint32_t count,
int write_count;
int64_t xattr_len;
xattr_len = fidp->fs.xattr.len;
write_count = xattr_len - off;
write_count = count;
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
off += to_copy;
err = v9fs_xattr_write(s, pdu, fidp, off, count,
len = v9fs_co_pwritev(pdu, fidp, qiov.iov, qiov.niov, off);
total += len;
err = pdu_marshal(pdu, offset, "d", total);
trace_v9fs_write_return(pdu->tag, pdu->id, total, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
int err = -len;
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
1

13605 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1900
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t count,
struct iovec *sg, int cnt)
int i, to_copy;
ssize_t err = 0;
int write_count;
int64_t xattr_len;
size_t offset = 7;
xattr_len = fidp->fs.xattr.len;
write_count = xattr_len - off;
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
off += to_copy;
len = v9fs_co_pwritev(pdu, fidp, qiov.iov, qiov.niov, off);
total += len;
qemu_iovec_concat(&qiov, &qiov_full, total, qiov_full.size - total);
err = pdu_marshal(pdu, offset, "d", total);
trace_v9fs_write_return(pdu->tag, pdu->id, total, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
int err = -len;
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
1

13613 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c Buffer_Overflow_boundedcpy 1941
static void v9fs_write(void *opaque)
uint32_t count;
size_t offset = 7;
V9fsPDU *pdu = opaque;
QEMUIOVector qiov_full;
v9fs_init_qiov_from_pdu(&qiov_full, pdu, offset, count, true);
size_t skip, size_t size,
qemu_iovec_concat(qiov, &elem, skip, size);
trace_v9fs_write(pdu->tag, pdu->id, fid, off, count, qiov_full.niov);
err = v9fs_xattr_write(s, pdu, fidp, off, count,qiov_full.iov, qiov_full.niov);
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t count,
struct iovec *sg, int cnt)
int i, to_copy;
uint64_t  write_count;
write_count = fidp->fs.xattr.len - off;
if (write_count > count) {
write_count = count;
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
0

13617 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1563
static int v9fs_xattr_read(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t max_count)
ssize_t err;
size_t offset = 7;
uint64_t read_count;
if (fidp->fs.xattr.len < off) {
read_count = 0;
} else {
read_count = fidp->fs.xattr.len - off;
err = pdu_marshal(pdu, offset, "d", read_count);
return err;
err = v9fs_xattr_read(s, pdu, fidp, off, max_count);
trace_v9fs_read_return(pdu->tag, pdu->id, count, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
int err = -len;
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
0

13618 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1951
static void v9fs_write(void *opaque)
ssize_t err;
int32_t fid;
uint64_t off;
uint32_t count;
size_t offset = 7;
V9fsPDU *pdu = opaque;
err = pdu_unmarshal(pdu, offset, "dqd", &fid, &off, &count);
v9fs_init_qiov_from_pdu(&qiov_full, pdu, offset, count, true);
static void v9fs_init_qiov_from_pdu(QEMUIOVector *qiov, V9fsPDU *pdu, size_t skip, size_t size,
qemu_iovec_concat(qiov, &elem, skip, size);
trace_v9fs_write(pdu->tag, pdu->id, fid, off, count, qiov_full.niov);
err = v9fs_xattr_write(s, pdu, fidp, off, count,qiov_full.iov, qiov_full.niov);
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,uint64_t off, uint32_t count,
uint64_t write_count;
if (fidp->fs.xattr.len < off) {
err = -ENOSPC;
goto out;
write_count = fidp->fs.xattr.len - off;
if (write_count > count) {
write_count = count;  }
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
off += to_copy;
err = v9fs_xattr_write(s, pdu, fidp, off, count,
len = v9fs_co_pwritev(pdu, fidp, qiov.iov, qiov.niov, off);
total += len;
err = pdu_marshal(pdu, offset, "d", total);
trace_v9fs_write_return(pdu->tag, pdu->id, total, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
int err = -len;
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
0

13619 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1900
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t count,
struct iovec *sg, int cnt)
int i, to_copy;
ssize_t err = 0;
uint64_t write_count;
size_t offset = 7;
if (fidp->fs.xattr.len < off) {
err = -ENOSPC;
goto out;
write_count = fidp->fs.xattr.len - off;
if (write_count > count) {
write_count = count;
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
off += to_copy;
len = v9fs_co_pwritev(pdu, fidp, qiov.iov, qiov.niov, off);
total += len;
qemu_iovec_concat(&qiov, &qiov_full, total, qiov_full.size - total);
err = pdu_marshal(pdu, offset, "d", total);
trace_v9fs_write_return(pdu->tag, pdu->id, total, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
int err = -len;
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
0

14033 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c Buffer_Overflow_boundedcpy 1941
static void v9fs_write(void *opaque)
uint32_t count;
size_t offset = 7;
V9fsPDU *pdu = opaque;
QEMUIOVector qiov_full;
v9fs_init_qiov_from_pdu(&qiov_full, pdu, offset, count, true);
size_t skip, size_t size,
qemu_iovec_concat(qiov, &elem, skip, size);
trace_v9fs_write(pdu->tag, pdu->id, fid, off, count, qiov_full.niov);
err = v9fs_xattr_write(s, pdu, fidp, off, count,qiov_full.iov, qiov_full.niov);
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t count,
struct iovec *sg, int cnt)
int i, to_copy;
uint64_t  write_count;
write_count = fidp->fs.xattr.len - off;
if (write_count > count) {
write_count = count;
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
componet_len = (char *)fidp->fs.xattr.value + off;
memcpy(componet_len, sg[i].iov_base, componet_len);
0

14037 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1563
static int v9fs_xattr_read(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t max_count)
ssize_t err;
size_t offset = 7;
uint64_t read_count;
if (fidp->fs.xattr.len < off) {
read_count = 0;
} else {
read_count = fidp->fs.xattr.len - off;
err = pdu_marshal(pdu, offset, "d", read_count);
return err;
err = v9fs_xattr_read(s, pdu, fidp, off, max_count);
trace_v9fs_read_return(pdu->tag, pdu->id, count, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
int err = -len;
V9fsString str;
str.data = strerror(err);
componet_data = str.data;
str.size = strlen(componet_data);
0

14038 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1951
static void v9fs_write(void *opaque)
ssize_t err;
int32_t fid;
uint64_t off;
uint32_t count;
size_t offset = 7;
V9fsPDU *pdu = opaque;
err = pdu_unmarshal(pdu, offset, "dqd", &fid, &off, &count);
v9fs_init_qiov_from_pdu(&qiov_full, pdu, offset, count, true);
static void v9fs_init_qiov_from_pdu(QEMUIOVector *qiov, V9fsPDU *pdu, size_t skip, size_t size,
qemu_iovec_concat(qiov, &elem, skip, size);
trace_v9fs_write(pdu->tag, pdu->id, fid, off, count, qiov_full.niov);
err = v9fs_xattr_write(s, pdu, fidp, off, count,qiov_full.iov, qiov_full.niov);
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,uint64_t off, uint32_t count,
uint64_t write_count;
if (fidp->fs.xattr.len < off) {
err = -ENOSPC;
goto out;
write_count = fidp->fs.xattr.len - off;
if (write_count > count) {
write_count = count;  }
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
off += to_copy;
err = v9fs_xattr_write(s, pdu, fidp, off, count,
len = v9fs_co_pwritev(pdu, fidp, qiov.iov, qiov.niov, off);
total += len;
err = pdu_marshal(pdu, offset, "d", total);
trace_v9fs_write_return(pdu->tag, pdu->id, total, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
int err = -len;
V9fsString str;
str.data = strerror(err);
componet_data = str.data;
str.size = strlen(componet_data);
0

14039 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1900
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t count,
struct iovec *sg, int cnt)
int i, to_copy;
ssize_t err = 0;
uint64_t write_count;
size_t offset = 7;
if (fidp->fs.xattr.len < off) {
err = -ENOSPC;
goto out;
write_count = fidp->fs.xattr.len - off;
if (write_count > count) {
write_count = count;
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
off += to_copy;
len = v9fs_co_pwritev(pdu, fidp, qiov.iov, qiov.niov, off);
total += len;
qemu_iovec_concat(&qiov, &qiov_full, total, qiov_full.size - total);
err = pdu_marshal(pdu, offset, "d", total);
trace_v9fs_write_return(pdu->tag, pdu->id, total, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
int err = -len;
V9fsString str;
str.data = strerror(err);
componet_data = str.data;
str.size = strlen(componet_data);
0

14047 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c Buffer_Overflow_boundedcpy 1941
static void v9fs_write(void *opaque)
uint32_t count;
size_t offset = 7;
V9fsPDU *pdu = opaque;
QEMUIOVector qiov_full;
v9fs_init_qiov_from_pdu(&qiov_full, pdu, offset, count, true);
size_t skip, size_t size,
qemu_iovec_concat(qiov, &elem, skip, size);
trace_v9fs_write(pdu->tag, pdu->id, fid, off, count, qiov_full.niov);
err = v9fs_xattr_write(s, pdu, fidp, off, count,qiov_full.iov, qiov_full.niov);
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t count,
struct iovec *sg, int cnt)
int i, to_copy;
int write_count;
uint64_t  write_count;
write_count = xattr_len - off;
if (write_count > count) {
write_count = count;
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
componet_len = (char *)fidp->fs.xattr.value + off;
memcpy(componet_len, sg[i].iov_base, componet_len);
1

14051 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1563
static int v9fs_xattr_read(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t max_count)
ssize_t err;
size_t offset = 7;
int read_count;
int64_t xattr_len;
xattr_len = fidp->fs.xattr.len;
read_count = xattr_len - off;
err = pdu_marshal(pdu, offset, "d", read_count);
return err;
err = v9fs_xattr_read(s, pdu, fidp, off, max_count);
trace_v9fs_read_return(pdu->tag, pdu->id, count, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
int err = -len;
V9fsString str;
str.data = strerror(err);
componet_data = str.data;
str.size = strlen(componet_data);
1

14052 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1951
static void v9fs_write(void *opaque)
ssize_t err;
int32_t fid;
uint64_t off;
uint32_t count;
size_t offset = 7;
V9fsPDU *pdu = opaque;
err = pdu_unmarshal(pdu, offset, "dqd", &fid, &off, &count);
v9fs_init_qiov_from_pdu(&qiov_full, pdu, offset, count, true);
static void v9fs_init_qiov_from_pdu(QEMUIOVector *qiov, V9fsPDU *pdu, size_t skip, size_t size,
qemu_iovec_concat(qiov, &elem, skip, size);
trace_v9fs_write(pdu->tag, pdu->id, fid, off, count, qiov_full.niov);
err = v9fs_xattr_write(s, pdu, fidp, off, count,qiov_full.iov, qiov_full.niov);
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,uint64_t off, uint32_t count,
int write_count;
int64_t xattr_len;
xattr_len = fidp->fs.xattr.len;
write_count = xattr_len - off;
write_count = count;
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
off += to_copy;
err = v9fs_xattr_write(s, pdu, fidp, off, count,
len = v9fs_co_pwritev(pdu, fidp, qiov.iov, qiov.niov, off);
total += len;
err = pdu_marshal(pdu, offset, "d", total);
trace_v9fs_write_return(pdu->tag, pdu->id, total, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
int err = -len;
V9fsString str;
str.data = strerror(err);
componet_data = str.data;
str.size = strlen(componet_data);
1

14053 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1900
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t count,
struct iovec *sg, int cnt)
int i, to_copy;
ssize_t err = 0;
int write_count;
int64_t xattr_len;
size_t offset = 7;
xattr_len = fidp->fs.xattr.len;
write_count = xattr_len - off;
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
off += to_copy;
len = v9fs_co_pwritev(pdu, fidp, qiov.iov, qiov.niov, off);
total += len;
qemu_iovec_concat(&qiov, &qiov_full, total, qiov_full.size - total);
err = pdu_marshal(pdu, offset, "d", total);
trace_v9fs_write_return(pdu->tag, pdu->id, total, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
int err = -len;
V9fsString str;
str.data = strerror(err);
componet_data = str.data;
str.size = strlen(componet_data);
1

14061 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c Buffer_Overflow_boundedcpy 1941
static void v9fs_write(void *opaque)
uint32_t count;
size_t offset = 7;
V9fsPDU *pdu = opaque;
QEMUIOVector qiov_full;
v9fs_init_qiov_from_pdu(&qiov_full, pdu, offset, count, true);
size_t skip, size_t size,
qemu_iovec_concat(qiov, &elem, skip, size);
trace_v9fs_write(pdu->tag, pdu->id, fid, off, count, qiov_full.niov);
err = v9fs_xattr_write(s, pdu, fidp, off, count,qiov_full.iov, qiov_full.niov);
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t count,
struct iovec *sg, int cnt)
int i, to_copy;
uint64_t  write_count;
write_count = fidp->fs.xattr.len - off;
if (write_count > count) {
write_count = count;
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = func(&write_count);
int func(int *write_count)
return write_count;
to_copy = func(&write_count);
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
0

14065 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1563
static int v9fs_xattr_read(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t max_count)
ssize_t err;
size_t offset = 7;
uint64_t read_count;
if (fidp->fs.xattr.len < off) {
read_count = 0;
} else {
read_count = fidp->fs.xattr.len - off;
err = pdu_marshal(pdu, offset, "d", read_count);
return err;
err = v9fs_xattr_read(s, pdu, fidp, off, max_count);
trace_v9fs_read_return(pdu->tag, pdu->id, count, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
int err = func(&len);
ssize_t func(ssize_t *len)
return -(*len);
int err = func(&len);
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
0

14066 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1951
static void v9fs_write(void *opaque)
ssize_t err;
int32_t fid;
uint64_t off;
uint32_t count;
size_t offset = 7;
V9fsPDU *pdu = opaque;
err = pdu_unmarshal(pdu, offset, "dqd", &fid, &off, &count);
v9fs_init_qiov_from_pdu(&qiov_full, pdu, offset, count, true);
static void v9fs_init_qiov_from_pdu(QEMUIOVector *qiov, V9fsPDU *pdu, size_t skip, size_t size,
qemu_iovec_concat(qiov, &elem, skip, size);
trace_v9fs_write(pdu->tag, pdu->id, fid, off, count, qiov_full.niov);
err = v9fs_xattr_write(s, pdu, fidp, off, count,qiov_full.iov, qiov_full.niov);
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,uint64_t off, uint32_t count,
uint64_t write_count;
if (fidp->fs.xattr.len < off) {
err = -ENOSPC;
goto out;
write_count = fidp->fs.xattr.len - off;
if (write_count > count) {
write_count = count;  }
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
off += to_copy;
err = v9fs_xattr_write(s, pdu, fidp, off, count,
len = v9fs_co_pwritev(pdu, fidp, qiov.iov, qiov.niov, off);
total += len;
err = pdu_marshal(pdu, offset, "d", total);
trace_v9fs_write_return(pdu->tag, pdu->id, total, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
int err = func(&len);
ssize_t func(ssize_t *len)
return -(*len);
int err = func(&len);
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
0

14067 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1900
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t count,
struct iovec *sg, int cnt)
int i, to_copy;
ssize_t err = 0;
uint64_t write_count;
size_t offset = 7;
if (fidp->fs.xattr.len < off) {
err = -ENOSPC;
goto out;
write_count = fidp->fs.xattr.len - off;
if (write_count > count) {
write_count = count;
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
off += to_copy;
len = v9fs_co_pwritev(pdu, fidp, qiov.iov, qiov.niov, off);
total += len;
qemu_iovec_concat(&qiov, &qiov_full, total, qiov_full.size - total);
err = pdu_marshal(pdu, offset, "d", total);
trace_v9fs_write_return(pdu->tag, pdu->id, total, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
int err = func(&len);
ssize_t func(ssize_t *len)
return -(*len);
int err = func(&len);
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
0

14075 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c Buffer_Overflow_boundedcpy 1941
static void v9fs_write(void *opaque)
uint32_t count;
size_t offset = 7;
V9fsPDU *pdu = opaque;
QEMUIOVector qiov_full;
v9fs_init_qiov_from_pdu(&qiov_full, pdu, offset, count, true);
size_t skip, size_t size,
qemu_iovec_concat(qiov, &elem, skip, size);
trace_v9fs_write(pdu->tag, pdu->id, fid, off, count, qiov_full.niov);
err = v9fs_xattr_write(s, pdu, fidp, off, count,qiov_full.iov, qiov_full.niov);
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t count,
struct iovec *sg, int cnt)
int i, to_copy;
int write_count;
uint64_t  write_count;
write_count = xattr_len - off;
if (write_count > count) {
write_count = count;
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = func(&write_count);
int func(int *write_count)
return write_count;
to_copy = func(&write_count);
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
1

14079 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1563
static int v9fs_xattr_read(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t max_count)
ssize_t err;
size_t offset = 7;
int read_count;
int64_t xattr_len;
xattr_len = fidp->fs.xattr.len;
read_count = xattr_len - off;
err = pdu_marshal(pdu, offset, "d", read_count);
return err;
err = v9fs_xattr_read(s, pdu, fidp, off, max_count);
trace_v9fs_read_return(pdu->tag, pdu->id, count, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
int err = func(&len);
ssize_t func(ssize_t *len)
return -(*len);
int err = func(&len);
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
1

14080 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1951
static void v9fs_write(void *opaque)
ssize_t err;
int32_t fid;
uint64_t off;
uint32_t count;
size_t offset = 7;
V9fsPDU *pdu = opaque;
err = pdu_unmarshal(pdu, offset, "dqd", &fid, &off, &count);
v9fs_init_qiov_from_pdu(&qiov_full, pdu, offset, count, true);
static void v9fs_init_qiov_from_pdu(QEMUIOVector *qiov, V9fsPDU *pdu, size_t skip, size_t size,
qemu_iovec_concat(qiov, &elem, skip, size);
trace_v9fs_write(pdu->tag, pdu->id, fid, off, count, qiov_full.niov);
err = v9fs_xattr_write(s, pdu, fidp, off, count,qiov_full.iov, qiov_full.niov);
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,uint64_t off, uint32_t count,
int write_count;
int64_t xattr_len;
xattr_len = fidp->fs.xattr.len;
write_count = xattr_len - off;
write_count = count;
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
off += to_copy;
err = v9fs_xattr_write(s, pdu, fidp, off, count,
len = v9fs_co_pwritev(pdu, fidp, qiov.iov, qiov.niov, off);
total += len;
err = pdu_marshal(pdu, offset, "d", total);
trace_v9fs_write_return(pdu->tag, pdu->id, total, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
int err = func(&len);
ssize_t func(ssize_t *len)
return -(*len);
int err = func(&len);
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
1

14081 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1900
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t count,
struct iovec *sg, int cnt)
int i, to_copy;
ssize_t err = 0;
int write_count;
int64_t xattr_len;
size_t offset = 7;
xattr_len = fidp->fs.xattr.len;
write_count = xattr_len - off;
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
off += to_copy;
len = v9fs_co_pwritev(pdu, fidp, qiov.iov, qiov.niov, off);
total += len;
qemu_iovec_concat(&qiov, &qiov_full, total, qiov_full.size - total);
err = pdu_marshal(pdu, offset, "d", total);
trace_v9fs_write_return(pdu->tag, pdu->id, total, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
int err = func(&len);
ssize_t func(ssize_t *len)
return -(*len);
int err = func(&len);
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
1

14089 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c Buffer_Overflow_boundedcpy 1941
static void v9fs_write(void *opaque)
uint32_t count;
size_t offset = 7;
V9fsPDU *pdu = opaque;
QEMUIOVector qiov_full;
v9fs_init_qiov_from_pdu(&qiov_full, pdu, offset, count, true);
size_t skip, size_t size,
qemu_iovec_concat(qiov, &elem, skip, size);
trace_v9fs_write(pdu->tag, pdu->id, fid, off, count, qiov_full.niov);
err = v9fs_xattr_write(s, pdu, fidp, off, count,qiov_full.iov, qiov_full.niov);
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t count,
struct iovec *sg, int cnt)
int i, to_copy;
uint64_t  write_count;
structType myStruct;
write_count = fidp->fs.xattr.len - off;
if (write_count > count) {
write_count = count;
err = pdu_marshal(pdu, offset, "d", write_count);
myStruct.structFirst = write_count;
to_copy = func(myStruct);
int func(structType myStruct)
int write_count = myStruct.structFirst;
return write_count;
to_copy = func(myStruct);
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
0

14093 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1563
static int v9fs_xattr_read(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t max_count)
ssize_t err;
size_t offset = 7;
uint64_t read_count;
if (fidp->fs.xattr.len < off) {
read_count = 0;
} else {
read_count = fidp->fs.xattr.len - off;
err = pdu_marshal(pdu, offset, "d", read_count);
return err;
err = v9fs_xattr_read(s, pdu, fidp, off, max_count);
trace_v9fs_read_return(pdu->tag, pdu->id, count, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
structType myStruct;
myStruct.structFirst = len;
int err = func(myStruct);
ssize_t func(structType myStruct)
int len = myStruct.structFirst;
return -len;
int err = func(myStruct);
int err = -len;
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
0

14094 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1951
static void v9fs_write(void *opaque)
ssize_t err;
int32_t fid;
uint64_t off;
uint32_t count;
size_t offset = 7;
V9fsPDU *pdu = opaque;
err = pdu_unmarshal(pdu, offset, "dqd", &fid, &off, &count);
v9fs_init_qiov_from_pdu(&qiov_full, pdu, offset, count, true);
static void v9fs_init_qiov_from_pdu(QEMUIOVector *qiov, V9fsPDU *pdu, size_t skip, size_t size,
qemu_iovec_concat(qiov, &elem, skip, size);
trace_v9fs_write(pdu->tag, pdu->id, fid, off, count, qiov_full.niov);
err = v9fs_xattr_write(s, pdu, fidp, off, count,qiov_full.iov, qiov_full.niov);
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,uint64_t off, uint32_t count,
uint64_t write_count;
if (fidp->fs.xattr.len < off) {
err = -ENOSPC;
goto out;
write_count = fidp->fs.xattr.len - off;
if (write_count > count) {
write_count = count;  }
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
off += to_copy;
err = v9fs_xattr_write(s, pdu, fidp, off, count,
len = v9fs_co_pwritev(pdu, fidp, qiov.iov, qiov.niov, off);
total += len;
err = pdu_marshal(pdu, offset, "d", total);
trace_v9fs_write_return(pdu->tag, pdu->id, total, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
structType myStruct;
myStruct.structFirst = len;
int err = func(myStruct);
ssize_t func(structType myStruct)
int len = myStruct.structFirst;
return -len;
int err = func(myStruct);
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
0

14095 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1900
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t count,
struct iovec *sg, int cnt)
int i, to_copy;
ssize_t err = 0;
uint64_t write_count;
size_t offset = 7;
if (fidp->fs.xattr.len < off) {
err = -ENOSPC;
goto out;
write_count = fidp->fs.xattr.len - off;
if (write_count > count) {
write_count = count;
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
off += to_copy;
len = v9fs_co_pwritev(pdu, fidp, qiov.iov, qiov.niov, off);
total += len;
qemu_iovec_concat(&qiov, &qiov_full, total, qiov_full.size - total);
err = pdu_marshal(pdu, offset, "d", total);
trace_v9fs_write_return(pdu->tag, pdu->id, total, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
structType myStruct;
myStruct.structFirst = len;
int err = func(myStruct);
ssize_t func(structType myStruct)
int len = myStruct.structFirst;
return -len;
int err = func(myStruct);
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
0

14103 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c Buffer_Overflow_boundedcpy 1941
static void v9fs_write(void *opaque)
uint32_t count;
size_t offset = 7;
V9fsPDU *pdu = opaque;
QEMUIOVector qiov_full;
v9fs_init_qiov_from_pdu(&qiov_full, pdu, offset, count, true);
size_t skip, size_t size,
qemu_iovec_concat(qiov, &elem, skip, size);
trace_v9fs_write(pdu->tag, pdu->id, fid, off, count, qiov_full.niov);
err = v9fs_xattr_write(s, pdu, fidp, off, count,qiov_full.iov, qiov_full.niov);
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t count,
struct iovec *sg, int cnt)
int i, to_copy;
int write_count;
structType myStruct;
write_count = xattr_len - off;
if (write_count > count) {
write_count = count;
err = pdu_marshal(pdu, offset, "d", write_count);
myStruct.structFirst = write_count;
to_copy = func(myStruct);
int func(structType myStruct)
int write_count = myStruct.structFirst;
return write_count;
to_copy = func(myStruct);
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
1

14107 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1563
static int v9fs_xattr_read(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t max_count)
ssize_t err;
size_t offset = 7;
int read_count;
int64_t xattr_len;
xattr_len = fidp->fs.xattr.len;
read_count = xattr_len - off;
err = pdu_marshal(pdu, offset, "d", read_count);
return err;
err = v9fs_xattr_read(s, pdu, fidp, off, max_count);
trace_v9fs_read_return(pdu->tag, pdu->id, count, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
structType myStruct;
myStruct.structFirst = len;
int err = func(myStruct);
ssize_t func(structType myStruct)
int len = myStruct.structFirst;
return -len;
int err = func(myStruct);
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
1

14108 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1951
static void v9fs_write(void *opaque)
ssize_t err;
int32_t fid;
uint64_t off;
uint32_t count;
size_t offset = 7;
V9fsPDU *pdu = opaque;
err = pdu_unmarshal(pdu, offset, "dqd", &fid, &off, &count);
v9fs_init_qiov_from_pdu(&qiov_full, pdu, offset, count, true);
static void v9fs_init_qiov_from_pdu(QEMUIOVector *qiov, V9fsPDU *pdu, size_t skip, size_t size,
qemu_iovec_concat(qiov, &elem, skip, size);
trace_v9fs_write(pdu->tag, pdu->id, fid, off, count, qiov_full.niov);
err = v9fs_xattr_write(s, pdu, fidp, off, count,qiov_full.iov, qiov_full.niov);
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,uint64_t off, uint32_t count,
int write_count;
int64_t xattr_len;
xattr_len = fidp->fs.xattr.len;
write_count = xattr_len - off;
write_count = count;
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
off += to_copy;
err = v9fs_xattr_write(s, pdu, fidp, off, count,
len = v9fs_co_pwritev(pdu, fidp, qiov.iov, qiov.niov, off);
total += len;
err = pdu_marshal(pdu, offset, "d", total);
trace_v9fs_write_return(pdu->tag, pdu->id, total, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
structType myStruct;
myStruct.structFirst = len;
int err = func(myStruct);
ssize_t func(structType myStruct)
int len = myStruct.structFirst;
return -len;
int err = func(myStruct);
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
1

14109 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1900
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t count,
struct iovec *sg, int cnt)
int i, to_copy;
ssize_t err = 0;
int write_count;
int64_t xattr_len;
size_t offset = 7;
xattr_len = fidp->fs.xattr.len;
write_count = xattr_len - off;
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
off += to_copy;
len = v9fs_co_pwritev(pdu, fidp, qiov.iov, qiov.niov, off);
total += len;
qemu_iovec_concat(&qiov, &qiov_full, total, qiov_full.size - total);
err = pdu_marshal(pdu, offset, "d", total);
trace_v9fs_write_return(pdu->tag, pdu->id, total, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
structType myStruct;
myStruct.structFirst = len;
int err = func(myStruct);
ssize_t func(structType myStruct)
int len = myStruct.structFirst;
return -len;
int err = func(myStruct);
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
1

14117 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c Buffer_Overflow_boundedcpy 1941
static void v9fs_write(void *opaque)
uint32_t count;
size_t offset = 7;
V9fsPDU *pdu = opaque;
QEMUIOVector qiov_full;
v9fs_init_qiov_from_pdu(&qiov_full, pdu, offset, count, true);
size_t skip, size_t size,
qemu_iovec_concat(qiov, &elem, skip, size);
trace_v9fs_write(pdu->tag, pdu->id, fid, off, count, qiov_full.niov);
err = v9fs_xattr_write(s, pdu, fidp, off, count,qiov_full.iov, qiov_full.niov);
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t count,
struct iovec *sg, int cnt)
unionType myUnion;
int i, to_copy;
uint64_t  write_count;
write_count = fidp->fs.xattr.len - off;
if (write_count > count) {
write_count = count;
err = pdu_marshal(pdu, offset, "d", write_count);
myUnion.unionFirst = write_count;
to_copy = func(myUnion);
int func(unionType myUnion)
int write_count = myUnion.unionSecond;
return write_count;
to_copy = func(myUnion);
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
0

14121 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1563
static int v9fs_xattr_read(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t max_count)
ssize_t err;
size_t offset = 7;
uint64_t read_count;
if (fidp->fs.xattr.len < off) {
read_count = 0;
} else {
read_count = fidp->fs.xattr.len - off;
err = pdu_marshal(pdu, offset, "d", read_count);
return err;
err = v9fs_xattr_read(s, pdu, fidp, off, max_count);
trace_v9fs_read_return(pdu->tag, pdu->id, count, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
unionType myUnion;
myUnion.unionFirst = len;
int err = func(myUnion);
ssize_t func(unionType myUnion)
int len = myUnion.unionSecond;
return -len;
int err = func(myUnion);
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
0

14122 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1951
static void v9fs_write(void *opaque)
ssize_t err;
int32_t fid;
uint64_t off;
uint32_t count;
size_t offset = 7;
V9fsPDU *pdu = opaque;
err = pdu_unmarshal(pdu, offset, "dqd", &fid, &off, &count);
v9fs_init_qiov_from_pdu(&qiov_full, pdu, offset, count, true);
static void v9fs_init_qiov_from_pdu(QEMUIOVector *qiov, V9fsPDU *pdu, size_t skip, size_t size,
qemu_iovec_concat(qiov, &elem, skip, size);
trace_v9fs_write(pdu->tag, pdu->id, fid, off, count, qiov_full.niov);
err = v9fs_xattr_write(s, pdu, fidp, off, count,qiov_full.iov, qiov_full.niov);
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,uint64_t off, uint32_t count,
uint64_t write_count;
if (fidp->fs.xattr.len < off) {
err = -ENOSPC;
goto out;
write_count = fidp->fs.xattr.len - off;
if (write_count > count) {
write_count = count;  }
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
off += to_copy;
err = v9fs_xattr_write(s, pdu, fidp, off, count,
len = v9fs_co_pwritev(pdu, fidp, qiov.iov, qiov.niov, off);
total += len;
err = pdu_marshal(pdu, offset, "d", total);
trace_v9fs_write_return(pdu->tag, pdu->id, total, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
unionType myUnion;
myUnion.unionFirst = len;
int err = func(myUnion);
ssize_t func(unionType myUnion)
int len = myUnion.unionSecond;
return -len;
int err = func(myUnion);
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
0

14123 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1900
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t count,
struct iovec *sg, int cnt)
int i, to_copy;
ssize_t err = 0;
uint64_t write_count;
size_t offset = 7;
if (fidp->fs.xattr.len < off) {
err = -ENOSPC;
goto out;
write_count = fidp->fs.xattr.len - off;
if (write_count > count) {
write_count = count;
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
off += to_copy;
len = v9fs_co_pwritev(pdu, fidp, qiov.iov, qiov.niov, off);
total += len;
qemu_iovec_concat(&qiov, &qiov_full, total, qiov_full.size - total);
err = pdu_marshal(pdu, offset, "d", total);
trace_v9fs_write_return(pdu->tag, pdu->id, total, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
unionType myUnion;
myUnion.unionFirst = len;
int err = func(myUnion);
ssize_t func(unionType myUnion)
int len = myUnion.unionSecond;
return -len;
int err = func(myUnion);
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
0

14131 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c Buffer_Overflow_boundedcpy 1941
static void v9fs_write(void *opaque)
uint32_t count;
size_t offset = 7;
V9fsPDU *pdu = opaque;
QEMUIOVector qiov_full;
v9fs_init_qiov_from_pdu(&qiov_full, pdu, offset, count, true);
size_t skip, size_t size,
qemu_iovec_concat(qiov, &elem, skip, size);
trace_v9fs_write(pdu->tag, pdu->id, fid, off, count, qiov_full.niov);
err = v9fs_xattr_write(s, pdu, fidp, off, count,qiov_full.iov, qiov_full.niov);
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t count,
struct iovec *sg, int cnt)
unionType myUnion;
int i, to_copy;
int write_count;
write_count = xattr_len - off;
if (write_count > count) {
write_count = count;
err = pdu_marshal(pdu, offset, "d", write_count);
myUnion.unionFirst = write_count;
to_copy = func(myUnion);
int func(unionType myUnion)
int write_count = myUnion.unionSecond;
return write_count;
to_copy = func(myUnion);
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
1

14135 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1563
static int v9fs_xattr_read(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t max_count)
ssize_t err;
size_t offset = 7;
int read_count;
int64_t xattr_len;
xattr_len = fidp->fs.xattr.len;
read_count = xattr_len - off;
err = pdu_marshal(pdu, offset, "d", read_count);
return err;
err = v9fs_xattr_read(s, pdu, fidp, off, max_count);
trace_v9fs_read_return(pdu->tag, pdu->id, count, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
unionType myUnion;
myUnion.unionFirst = len;
int err = func(myUnion);
ssize_t func(unionType myUnion)
int len = myUnion.unionSecond;
return -len;
int err = func(myUnion);
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
1

14136 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1951
static void v9fs_write(void *opaque)
ssize_t err;
int32_t fid;
uint64_t off;
uint32_t count;
size_t offset = 7;
V9fsPDU *pdu = opaque;
err = pdu_unmarshal(pdu, offset, "dqd", &fid, &off, &count);
v9fs_init_qiov_from_pdu(&qiov_full, pdu, offset, count, true);
static void v9fs_init_qiov_from_pdu(QEMUIOVector *qiov, V9fsPDU *pdu, size_t skip, size_t size,
qemu_iovec_concat(qiov, &elem, skip, size);
trace_v9fs_write(pdu->tag, pdu->id, fid, off, count, qiov_full.niov);
err = v9fs_xattr_write(s, pdu, fidp, off, count,qiov_full.iov, qiov_full.niov);
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,uint64_t off, uint32_t count,
int write_count;
int64_t xattr_len;
xattr_len = fidp->fs.xattr.len;
write_count = xattr_len - off;
write_count = count;
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
off += to_copy;
err = v9fs_xattr_write(s, pdu, fidp, off, count,
len = v9fs_co_pwritev(pdu, fidp, qiov.iov, qiov.niov, off);
total += len;
err = pdu_marshal(pdu, offset, "d", total);
trace_v9fs_write_return(pdu->tag, pdu->id, total, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
unionType myUnion;
myUnion.unionFirst = len;
int err = func(myUnion);
ssize_t func(unionType myUnion)
int len = myUnion.unionSecond;
return -len;
int err = func(myUnion);
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
1

14137 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1900
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t count,
struct iovec *sg, int cnt)
int i, to_copy;
ssize_t err = 0;
int write_count;
int64_t xattr_len;
size_t offset = 7;
xattr_len = fidp->fs.xattr.len;
write_count = xattr_len - off;
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
off += to_copy;
len = v9fs_co_pwritev(pdu, fidp, qiov.iov, qiov.niov, off);
total += len;
qemu_iovec_concat(&qiov, &qiov_full, total, qiov_full.size - total);
err = pdu_marshal(pdu, offset, "d", total);
trace_v9fs_write_return(pdu->tag, pdu->id, total, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
unionType myUnion;
myUnion.unionFirst = len;
int err = func(myUnion);
ssize_t func(unionType myUnion)
int len = myUnion.unionSecond;
return -len;
int err = func(myUnion);
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
1

14145 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c Buffer_Overflow_boundedcpy 1941
static void v9fs_write(void *opaque)
uint32_t count;
size_t offset = 7;
V9fsPDU *pdu = opaque;
QEMUIOVector qiov_full;
v9fs_init_qiov_from_pdu(&qiov_full, pdu, offset, count, true);
size_t skip, size_t size,
qemu_iovec_concat(qiov, &elem, skip, size);
trace_v9fs_write(pdu->tag, pdu->id, fid, off, count, qiov_full.niov);
err = v9fs_xattr_write(s, pdu, fidp, off, count,qiov_full.iov, qiov_full.niov);
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t count,
struct iovec *sg, int cnt)
int i, to_copy;
uint64_t  write_count;
write_count = fidp->fs.xattr.len - off;
if (write_count > count) {
write_count = count;
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = func(int write_count);
int func(int write_count)
return write_count;
to_copy = func(int write_count);
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
0

14149 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1563
static int v9fs_xattr_read(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t max_count)
ssize_t err;
size_t offset = 7;
uint64_t read_count;
if (fidp->fs.xattr.len < off) {
read_count = 0;
} else {
read_count = fidp->fs.xattr.len - off;
err = pdu_marshal(pdu, offset, "d", read_count);
return err;
err = v9fs_xattr_read(s, pdu, fidp, off, max_count);
trace_v9fs_read_return(pdu->tag, pdu->id, count, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
int err = func(ssize_t len);
ssize_t func(ssize_t len)
return -len;
int err = func(ssize_t len);
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
0

14150 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1951
static void v9fs_write(void *opaque)
ssize_t err;
int32_t fid;
uint64_t off;
uint32_t count;
size_t offset = 7;
V9fsPDU *pdu = opaque;
err = pdu_unmarshal(pdu, offset, "dqd", &fid, &off, &count);
v9fs_init_qiov_from_pdu(&qiov_full, pdu, offset, count, true);
static void v9fs_init_qiov_from_pdu(QEMUIOVector *qiov, V9fsPDU *pdu, size_t skip, size_t size,
qemu_iovec_concat(qiov, &elem, skip, size);
trace_v9fs_write(pdu->tag, pdu->id, fid, off, count, qiov_full.niov);
err = v9fs_xattr_write(s, pdu, fidp, off, count,qiov_full.iov, qiov_full.niov);
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,uint64_t off, uint32_t count,
uint64_t write_count;
if (fidp->fs.xattr.len < off) {
err = -ENOSPC;
goto out;
write_count = fidp->fs.xattr.len - off;
if (write_count > count) {
write_count = count;  }
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
off += to_copy;
err = v9fs_xattr_write(s, pdu, fidp, off, count,
len = v9fs_co_pwritev(pdu, fidp, qiov.iov, qiov.niov, off);
total += len;
err = pdu_marshal(pdu, offset, "d", total);
trace_v9fs_write_return(pdu->tag, pdu->id, total, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
int err = func(ssize_t len);
ssize_t func(ssize_t len)
return -len;
int err = func(ssize_t len);
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
0

14151 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1900
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t count,
struct iovec *sg, int cnt)
int i, to_copy;
ssize_t err = 0;
uint64_t write_count;
size_t offset = 7;
if (fidp->fs.xattr.len < off) {
err = -ENOSPC;
goto out;
write_count = fidp->fs.xattr.len - off;
if (write_count > count) {
write_count = count;
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
off += to_copy;
len = v9fs_co_pwritev(pdu, fidp, qiov.iov, qiov.niov, off);
total += len;
qemu_iovec_concat(&qiov, &qiov_full, total, qiov_full.size - total);
err = pdu_marshal(pdu, offset, "d", total);
trace_v9fs_write_return(pdu->tag, pdu->id, total, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
int err = func(ssize_t len);
ssize_t func(ssize_t len)
return -len;
int err = func(ssize_t len);
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
0

14159 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c Buffer_Overflow_boundedcpy 1941
int (*funcPtr)(int ) = badSource;
static void v9fs_write(void *opaque)
uint32_t count;
size_t offset = 7;
V9fsPDU *pdu = opaque;
QEMUIOVector qiov_full;
v9fs_init_qiov_from_pdu(&qiov_full, pdu, offset, count, true);
size_t skip, size_t size,
qemu_iovec_concat(qiov, &elem, skip, size);
trace_v9fs_write(pdu->tag, pdu->id, fid, off, count, qiov_full.niov);
err = v9fs_xattr_write(s, pdu, fidp, off, count,qiov_full.iov, qiov_full.niov);
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t count,
struct iovec *sg, int cnt)
int i, to_copy;
int write_count;
uint64_t  write_count;
write_count = xattr_len - off;
if (write_count > count) {
write_count = count;
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = funcPtr(int write_count);
int badSource(int write_count)
return write_count;
to_copy = funcPtr(int write_count);
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
1

14163 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1563
ssize_t (*funcPtr)(ssize_t len) = badSource;
static int v9fs_xattr_read(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t max_count)
ssize_t err;
size_t offset = 7;
int read_count;
int64_t xattr_len;
xattr_len = fidp->fs.xattr.len;
read_count = xattr_len - off;
err = pdu_marshal(pdu, offset, "d", read_count);
return err;
err = v9fs_xattr_read(s, pdu, fidp, off, max_count);
trace_v9fs_read_return(pdu->tag, pdu->id, count, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
int err = funcPtr(ssize_t len);
ssize_t badSource(ssize_t len)
return -len;
int err = funcPtr(ssize_t len);
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
1

14164 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1951
ssize_t (*funcPtr)(ssize_t ) = badSource;
static void v9fs_write(void *opaque)
ssize_t err;
int32_t fid;
uint64_t off;
uint32_t count;
size_t offset = 7;
V9fsPDU *pdu = opaque;
err = pdu_unmarshal(pdu, offset, "dqd", &fid, &off, &count);
v9fs_init_qiov_from_pdu(&qiov_full, pdu, offset, count, true);
static void v9fs_init_qiov_from_pdu(QEMUIOVector *qiov, V9fsPDU *pdu, size_t skip, size_t size,
qemu_iovec_concat(qiov, &elem, skip, size);
trace_v9fs_write(pdu->tag, pdu->id, fid, off, count, qiov_full.niov);
err = v9fs_xattr_write(s, pdu, fidp, off, count,qiov_full.iov, qiov_full.niov);
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,uint64_t off, uint32_t count,
int write_count;
int64_t xattr_len;
xattr_len = fidp->fs.xattr.len;
write_count = xattr_len - off;
write_count = count;
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
off += to_copy;
err = v9fs_xattr_write(s, pdu, fidp, off, count,
len = v9fs_co_pwritev(pdu, fidp, qiov.iov, qiov.niov, off);
total += len;
err = pdu_marshal(pdu, offset, "d", total);
trace_v9fs_write_return(pdu->tag, pdu->id, total, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
int err = funcPtr(ssize_t len);
ssize_t badSource(ssize_t len)
return -len;
int err = funcPtr(ssize_t len);
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
1

14165 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1900
ssize_t (*funcPtr)(ssize_t ) = badSource;
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t count,
struct iovec *sg, int cnt)
int i, to_copy;
ssize_t err = 0;
int write_count;
int64_t xattr_len;
size_t offset = 7;
xattr_len = fidp->fs.xattr.len;
write_count = xattr_len - off;
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
off += to_copy;
len = v9fs_co_pwritev(pdu, fidp, qiov.iov, qiov.niov, off);
total += len;
qemu_iovec_concat(&qiov, &qiov_full, total, qiov_full.size - total);
err = pdu_marshal(pdu, offset, "d", total);
trace_v9fs_write_return(pdu->tag, pdu->id, total, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
int err = funcPtr(ssize_t len);
ssize_t badSource(ssize_t len)
return -len;
int err = funcPtr(ssize_t len);
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
1

14173 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c Buffer_Overflow_boundedcpy 1941
static void v9fs_write(void *opaque)
uint32_t count;
size_t offset = 7;
V9fsPDU *pdu = opaque;
QEMUIOVector qiov_full;
v9fs_init_qiov_from_pdu(&qiov_full, pdu, offset, count, true);
size_t skip, size_t size,
qemu_iovec_concat(qiov, &elem, skip, size);
trace_v9fs_write(pdu->tag, pdu->id, fid, off, count, qiov_full.niov);
err = v9fs_xattr_write(s, pdu, fidp, off, count,qiov_full.iov, qiov_full.niov);
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t count,
struct iovec *sg, int cnt)
int i, to_copy;
uint64_t  write_count;
write_count = fidp->fs.xattr.len - off;
if (write_count > count) {
write_count = count;
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = func(write_count);
int func(int write_count)
return write_count;
to_copy = func(write_count);
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
0

14177 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1563
static int v9fs_xattr_read(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t max_count)
ssize_t err;
size_t offset = 7;
uint64_t read_count;
if (fidp->fs.xattr.len < off) {
read_count = 0;
} else {
read_count = fidp->fs.xattr.len - off;
err = pdu_marshal(pdu, offset, "d", read_count);
return err;
err = v9fs_xattr_read(s, pdu, fidp, off, max_count);
trace_v9fs_read_return(pdu->tag, pdu->id, count, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
int err = func(len);
ssize_t func(ssize_t len)
return -len;
int err = func(len);
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
0

14178 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1951
static void v9fs_write(void *opaque)
ssize_t err;
int32_t fid;
uint64_t off;
uint32_t count;
size_t offset = 7;
V9fsPDU *pdu = opaque;
err = pdu_unmarshal(pdu, offset, "dqd", &fid, &off, &count);
v9fs_init_qiov_from_pdu(&qiov_full, pdu, offset, count, true);
static void v9fs_init_qiov_from_pdu(QEMUIOVector *qiov, V9fsPDU *pdu, size_t skip, size_t size,
qemu_iovec_concat(qiov, &elem, skip, size);
trace_v9fs_write(pdu->tag, pdu->id, fid, off, count, qiov_full.niov);
err = v9fs_xattr_write(s, pdu, fidp, off, count,qiov_full.iov, qiov_full.niov);
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,uint64_t off, uint32_t count,
uint64_t write_count;
if (fidp->fs.xattr.len < off) {
err = -ENOSPC;
goto out;
write_count = fidp->fs.xattr.len - off;
if (write_count > count) {
write_count = count;  }
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
off += to_copy;
err = v9fs_xattr_write(s, pdu, fidp, off, count,
len = v9fs_co_pwritev(pdu, fidp, qiov.iov, qiov.niov, off);
total += len;
err = pdu_marshal(pdu, offset, "d", total);
trace_v9fs_write_return(pdu->tag, pdu->id, total, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
int err = func(len);
ssize_t func(ssize_t len)
return -len;
int err = func(len);
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
0

14179 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1900
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t count,
struct iovec *sg, int cnt)
int i, to_copy;
ssize_t err = 0;
uint64_t write_count;
size_t offset = 7;
if (fidp->fs.xattr.len < off) {
err = -ENOSPC;
goto out;
write_count = fidp->fs.xattr.len - off;
if (write_count > count) {
write_count = count;
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
off += to_copy;
len = v9fs_co_pwritev(pdu, fidp, qiov.iov, qiov.niov, off);
total += len;
qemu_iovec_concat(&qiov, &qiov_full, total, qiov_full.size - total);
err = pdu_marshal(pdu, offset, "d", total);
trace_v9fs_write_return(pdu->tag, pdu->id, total, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
int err = func(len);
ssize_t func(ssize_t len)
return -len;
int err = func(len);
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
0

14187 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c Buffer_Overflow_boundedcpy 1941
static void v9fs_write(void *opaque)
uint32_t count;
size_t offset = 7;
V9fsPDU *pdu = opaque;
QEMUIOVector qiov_full;
v9fs_init_qiov_from_pdu(&qiov_full, pdu, offset, count, true);
size_t skip, size_t size,
qemu_iovec_concat(qiov, &elem, skip, size);
trace_v9fs_write(pdu->tag, pdu->id, fid, off, count, qiov_full.niov);
err = v9fs_xattr_write(s, pdu, fidp, off, count,qiov_full.iov, qiov_full.niov);
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t count,
struct iovec *sg, int cnt)
int i, to_copy;
int write_count;
uint64_t  write_count;
write_count = xattr_len - off;
if (write_count > count) {
write_count = count;
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = func(write_count);
int func(int write_count)
return write_count;
to_copy = func(write_count);
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
1

14191 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1563
static int v9fs_xattr_read(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t max_count)
ssize_t err;
size_t offset = 7;
int read_count;
int64_t xattr_len;
xattr_len = fidp->fs.xattr.len;
read_count = xattr_len - off;
err = pdu_marshal(pdu, offset, "d", read_count);
return err;
err = v9fs_xattr_read(s, pdu, fidp, off, max_count);
trace_v9fs_read_return(pdu->tag, pdu->id, count, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
int err = func(len);
ssize_t func(ssize_t len)
return -len;
int err = func(len);
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
1

14192 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1951
static void v9fs_write(void *opaque)
ssize_t err;
int32_t fid;
uint64_t off;
uint32_t count;
size_t offset = 7;
V9fsPDU *pdu = opaque;
err = pdu_unmarshal(pdu, offset, "dqd", &fid, &off, &count);
v9fs_init_qiov_from_pdu(&qiov_full, pdu, offset, count, true);
static void v9fs_init_qiov_from_pdu(QEMUIOVector *qiov, V9fsPDU *pdu, size_t skip, size_t size,
qemu_iovec_concat(qiov, &elem, skip, size);
trace_v9fs_write(pdu->tag, pdu->id, fid, off, count, qiov_full.niov);
err = v9fs_xattr_write(s, pdu, fidp, off, count,qiov_full.iov, qiov_full.niov);
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,uint64_t off, uint32_t count,
int write_count;
int64_t xattr_len;
xattr_len = fidp->fs.xattr.len;
write_count = xattr_len - off;
write_count = count;
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
off += to_copy;
err = v9fs_xattr_write(s, pdu, fidp, off, count,
len = v9fs_co_pwritev(pdu, fidp, qiov.iov, qiov.niov, off);
total += len;
err = pdu_marshal(pdu, offset, "d", total);
trace_v9fs_write_return(pdu->tag, pdu->id, total, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
int err = func(len);
ssize_t func(ssize_t len)
return -len;
int err = func(len);
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
1

14193 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1900
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t count,
struct iovec *sg, int cnt)
int i, to_copy;
ssize_t err = 0;
int write_count;
int64_t xattr_len;
size_t offset = 7;
xattr_len = fidp->fs.xattr.len;
write_count = xattr_len - off;
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
off += to_copy;
len = v9fs_co_pwritev(pdu, fidp, qiov.iov, qiov.niov, off);
total += len;
qemu_iovec_concat(&qiov, &qiov_full, total, qiov_full.size - total);
err = pdu_marshal(pdu, offset, "d", total);
trace_v9fs_write_return(pdu->tag, pdu->id, total, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
int err = func(len);
ssize_t func(ssize_t len)
return -len;
int err = func(len);
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
1

14201 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c Buffer_Overflow_boundedcpy 1941
static void v9fs_write(void *opaque)
uint32_t count;
size_t offset = 7;
V9fsPDU *pdu = opaque;
QEMUIOVector qiov_full;
v9fs_init_qiov_from_pdu(&qiov_full, pdu, offset, count, true);
size_t skip, size_t size,
qemu_iovec_concat(qiov, &elem, skip, size);
trace_v9fs_write(pdu->tag, pdu->id, fid, off, count, qiov_full.niov);
err = v9fs_xattr_write(s, pdu, fidp, off, count,qiov_full.iov, qiov_full.niov);
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t count,
struct iovec *sg, int cnt)
int i, to_copy;
uint64_t  write_count;
write_count = fidp->fs.xattr.len - off;
if (write_count > count) {
write_count = count;
err = pdu_marshal(pdu, offset, "d", write_count);
int *dataCopy = write_count;
to_copy = *dataCopy;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
0

14205 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1563
static int v9fs_xattr_read(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t max_count)
ssize_t err;
size_t offset = 7;
uint64_t read_count;
if (fidp->fs.xattr.len < off) {
read_count = 0;
} else {
read_count = fidp->fs.xattr.len - off;
err = pdu_marshal(pdu, offset, "d", read_count);
return err;
err = v9fs_xattr_read(s, pdu, fidp, off, max_count);
trace_v9fs_read_return(pdu->tag, pdu->id, count, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
ssize_t *dataCopy = &len;
int err = -(*dataCopy);
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
0

14206 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1951
static void v9fs_write(void *opaque)
ssize_t err;
int32_t fid;
uint64_t off;
uint32_t count;
size_t offset = 7;
V9fsPDU *pdu = opaque;
err = pdu_unmarshal(pdu, offset, "dqd", &fid, &off, &count);
v9fs_init_qiov_from_pdu(&qiov_full, pdu, offset, count, true);
static void v9fs_init_qiov_from_pdu(QEMUIOVector *qiov, V9fsPDU *pdu, size_t skip, size_t size,
qemu_iovec_concat(qiov, &elem, skip, size);
trace_v9fs_write(pdu->tag, pdu->id, fid, off, count, qiov_full.niov);
err = v9fs_xattr_write(s, pdu, fidp, off, count,qiov_full.iov, qiov_full.niov);
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,uint64_t off, uint32_t count,
uint64_t write_count;
if (fidp->fs.xattr.len < off) {
err = -ENOSPC;
goto out;
write_count = fidp->fs.xattr.len - off;
if (write_count > count) {
write_count = count;  }
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
off += to_copy;
err = v9fs_xattr_write(s, pdu, fidp, off, count,
len = v9fs_co_pwritev(pdu, fidp, qiov.iov, qiov.niov, off);
total += len;
err = pdu_marshal(pdu, offset, "d", total);
trace_v9fs_write_return(pdu->tag, pdu->id, total, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
ssize_t *dataCopy = &len;
int err = -(*dataCopy);
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
0

14207 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1900
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t count,
struct iovec *sg, int cnt)
int i, to_copy;
ssize_t err = 0;
uint64_t write_count;
size_t offset = 7;
if (fidp->fs.xattr.len < off) {
err = -ENOSPC;
goto out;
write_count = fidp->fs.xattr.len - off;
if (write_count > count) {
write_count = count;
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
off += to_copy;
len = v9fs_co_pwritev(pdu, fidp, qiov.iov, qiov.niov, off);
total += len;
qemu_iovec_concat(&qiov, &qiov_full, total, qiov_full.size - total);
err = pdu_marshal(pdu, offset, "d", total);
trace_v9fs_write_return(pdu->tag, pdu->id, total, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
ssize_t *dataCopy = &len;
int err = -(*dataCopy);
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
0

14215 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c Buffer_Overflow_boundedcpy 1941
static void v9fs_write(void *opaque)
uint32_t count;
size_t offset = 7;
V9fsPDU *pdu = opaque;
QEMUIOVector qiov_full;
v9fs_init_qiov_from_pdu(&qiov_full, pdu, offset, count, true);
size_t skip, size_t size,
qemu_iovec_concat(qiov, &elem, skip, size);
trace_v9fs_write(pdu->tag, pdu->id, fid, off, count, qiov_full.niov);
err = v9fs_xattr_write(s, pdu, fidp, off, count,qiov_full.iov, qiov_full.niov);
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t count,
struct iovec *sg, int cnt)
int i, to_copy;
int write_count;
uint64_t  write_count;
write_count = xattr_len - off;
if (write_count > count) {
write_count = count;
err = pdu_marshal(pdu, offset, "d", write_count);
int *dataCopy = write_count;
to_copy = *dataCopy;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
1

14219 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1563
static int v9fs_xattr_read(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t max_count)
ssize_t err;
size_t offset = 7;
int read_count;
int64_t xattr_len;
xattr_len = fidp->fs.xattr.len;
read_count = xattr_len - off;
err = pdu_marshal(pdu, offset, "d", read_count);
return err;
err = v9fs_xattr_read(s, pdu, fidp, off, max_count);
trace_v9fs_read_return(pdu->tag, pdu->id, count, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
ssize_t *dataCopy = &len;
int err = -(*dataCopy);
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
1

14220 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1951
static void v9fs_write(void *opaque)
ssize_t err;
int32_t fid;
uint64_t off;
uint32_t count;
size_t offset = 7;
V9fsPDU *pdu = opaque;
err = pdu_unmarshal(pdu, offset, "dqd", &fid, &off, &count);
v9fs_init_qiov_from_pdu(&qiov_full, pdu, offset, count, true);
static void v9fs_init_qiov_from_pdu(QEMUIOVector *qiov, V9fsPDU *pdu, size_t skip, size_t size,
qemu_iovec_concat(qiov, &elem, skip, size);
trace_v9fs_write(pdu->tag, pdu->id, fid, off, count, qiov_full.niov);
err = v9fs_xattr_write(s, pdu, fidp, off, count,qiov_full.iov, qiov_full.niov);
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,uint64_t off, uint32_t count,
int write_count;
int64_t xattr_len;
xattr_len = fidp->fs.xattr.len;
write_count = xattr_len - off;
write_count = count;
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
off += to_copy;
err = v9fs_xattr_write(s, pdu, fidp, off, count,
len = v9fs_co_pwritev(pdu, fidp, qiov.iov, qiov.niov, off);
total += len;
err = pdu_marshal(pdu, offset, "d", total);
trace_v9fs_write_return(pdu->tag, pdu->id, total, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
ssize_t *dataCopy = &len;
int err = -(*dataCopy);
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
1

14221 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1900
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t count,
struct iovec *sg, int cnt)
int i, to_copy;
ssize_t err = 0;
int write_count;
int64_t xattr_len;
size_t offset = 7;
xattr_len = fidp->fs.xattr.len;
write_count = xattr_len - off;
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
off += to_copy;
len = v9fs_co_pwritev(pdu, fidp, qiov.iov, qiov.niov, off);
total += len;
qemu_iovec_concat(&qiov, &qiov_full, total, qiov_full.size - total);
err = pdu_marshal(pdu, offset, "d", total);
trace_v9fs_write_return(pdu->tag, pdu->id, total, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
ssize_t *dataCopy = &len;
int err = -(*dataCopy);
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
1

14229 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c Buffer_Overflow_boundedcpy 1941
static void v9fs_write(void *opaque)
uint32_t count;
size_t offset = 7;
V9fsPDU *pdu = opaque;
QEMUIOVector qiov_full;
v9fs_init_qiov_from_pdu(&qiov_full, pdu, offset, count, true);
size_t skip, size_t size,
qemu_iovec_concat(qiov, &elem, skip, size);
trace_v9fs_write(pdu->tag, pdu->id, fid, off, count, qiov_full.niov);
err = v9fs_xattr_write(s, pdu, fidp, off, count,qiov_full.iov, qiov_full.niov);
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t count,
struct iovec *sg, int cnt)
int i, to_copy;
uint64_t dataArray[5];
uint64_t  write_count;
write_count = fidp->fs.xattr.len - off;
if (write_count > count) {
write_count = count;
err = pdu_marshal(pdu, offset, "d", write_count);
dataArray[2] = write_count;
to_copy = func(dataArray);
uint64_t func(uint64_t dataArray[])
uint64_t write_count = dataArray[2];
return write_count;
to_copy = func(dataArray);
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
0

14233 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1563
static int v9fs_xattr_read(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t max_count)
ssize_t err;
size_t offset = 7;
uint64_t read_count;
if (fidp->fs.xattr.len < off) {
read_count = 0;
} else {
read_count = fidp->fs.xattr.len - off;
err = pdu_marshal(pdu, offset, "d", read_count);
return err;
err = v9fs_xattr_read(s, pdu, fidp, off, max_count);
trace_v9fs_read_return(pdu->tag, pdu->id, count, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
ssize_t dataArray[5];
dataArray[2] = len;
int err = func(dataArray);
ssize_t func(ssize_t dataArray[])
int len = dataArray[2];
return -len;
int err = func(dataArray);
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
0

14234 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1951
static void v9fs_write(void *opaque)
ssize_t err;
int32_t fid;
uint64_t off;
uint32_t count;
size_t offset = 7;
V9fsPDU *pdu = opaque;
err = pdu_unmarshal(pdu, offset, "dqd", &fid, &off, &count);
v9fs_init_qiov_from_pdu(&qiov_full, pdu, offset, count, true);
static void v9fs_init_qiov_from_pdu(QEMUIOVector *qiov, V9fsPDU *pdu, size_t skip, size_t size,
qemu_iovec_concat(qiov, &elem, skip, size);
trace_v9fs_write(pdu->tag, pdu->id, fid, off, count, qiov_full.niov);
err = v9fs_xattr_write(s, pdu, fidp, off, count,qiov_full.iov, qiov_full.niov);
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,uint64_t off, uint32_t count,
uint64_t write_count;
if (fidp->fs.xattr.len < off) {
err = -ENOSPC;
goto out;
write_count = fidp->fs.xattr.len - off;
if (write_count > count) {
write_count = count;  }
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
off += to_copy;
err = v9fs_xattr_write(s, pdu, fidp, off, count,
len = v9fs_co_pwritev(pdu, fidp, qiov.iov, qiov.niov, off);
total += len;
err = pdu_marshal(pdu, offset, "d", total);
trace_v9fs_write_return(pdu->tag, pdu->id, total, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
ssize_t dataArray[5];
dataArray[2] = len;
int err = func(dataArray);
ssize_t func(ssize_t dataArray[])
int len = dataArray[2];
return -len;
int err = func(dataArray);
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
0

14235 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1900
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t count,
struct iovec *sg, int cnt)
int i, to_copy;
ssize_t err = 0;
uint64_t write_count;
size_t offset = 7;
if (fidp->fs.xattr.len < off) {
err = -ENOSPC;
goto out;
write_count = fidp->fs.xattr.len - off;
if (write_count > count) {
write_count = count;
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
off += to_copy;
len = v9fs_co_pwritev(pdu, fidp, qiov.iov, qiov.niov, off);
total += len;
qemu_iovec_concat(&qiov, &qiov_full, total, qiov_full.size - total);
err = pdu_marshal(pdu, offset, "d", total);
trace_v9fs_write_return(pdu->tag, pdu->id, total, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
ssize_t dataArray[5];
dataArray[2] = len;
int err = func(dataArray);
ssize_t func(ssize_t dataArray[])
int len = dataArray[2];
return -len;
int err = func(dataArray);
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
0

14243 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c Buffer_Overflow_boundedcpy 1941
static void v9fs_write(void *opaque)
uint32_t count;
size_t offset = 7;
V9fsPDU *pdu = opaque;
QEMUIOVector qiov_full;
v9fs_init_qiov_from_pdu(&qiov_full, pdu, offset, count, true);
size_t skip, size_t size,
qemu_iovec_concat(qiov, &elem, skip, size);
trace_v9fs_write(pdu->tag, pdu->id, fid, off, count, qiov_full.niov);
err = v9fs_xattr_write(s, pdu, fidp, off, count,qiov_full.iov, qiov_full.niov);
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t count,
struct iovec *sg, int cnt)
int i, to_copy;
int write_count;
int dataArray[5];
uint64_t  write_count;
write_count = xattr_len - off;
if (write_count > count) {
write_count = count;
err = pdu_marshal(pdu, offset, "d", write_count);
dataArray[2] = write_count;
to_copy = func(dataArray);
int func(int dataArray[])
int write_count = dataArray[2];
return write_count;
to_copy = func(dataArray);
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
1

14247 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1563
static int v9fs_xattr_read(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t max_count)
ssize_t err;
size_t offset = 7;
int read_count;
int64_t xattr_len;
xattr_len = fidp->fs.xattr.len;
read_count = xattr_len - off;
err = pdu_marshal(pdu, offset, "d", read_count);
return err;
err = v9fs_xattr_read(s, pdu, fidp, off, max_count);
trace_v9fs_read_return(pdu->tag, pdu->id, count, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
ssize_t dataArray[5];
dataArray[2] = len;
int err = func(dataArray);
ssize_t func(ssize_t dataArray[])
int len = dataArray[2];
return -len;
int err = func(dataArray);
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
1

14248 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1951
static void v9fs_write(void *opaque)
ssize_t err;
int32_t fid;
uint64_t off;
uint32_t count;
size_t offset = 7;
V9fsPDU *pdu = opaque;
err = pdu_unmarshal(pdu, offset, "dqd", &fid, &off, &count);
v9fs_init_qiov_from_pdu(&qiov_full, pdu, offset, count, true);
static void v9fs_init_qiov_from_pdu(QEMUIOVector *qiov, V9fsPDU *pdu, size_t skip, size_t size,
qemu_iovec_concat(qiov, &elem, skip, size);
trace_v9fs_write(pdu->tag, pdu->id, fid, off, count, qiov_full.niov);
err = v9fs_xattr_write(s, pdu, fidp, off, count,qiov_full.iov, qiov_full.niov);
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,uint64_t off, uint32_t count,
int write_count;
int64_t xattr_len;
xattr_len = fidp->fs.xattr.len;
write_count = xattr_len - off;
write_count = count;
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
off += to_copy;
err = v9fs_xattr_write(s, pdu, fidp, off, count,
len = v9fs_co_pwritev(pdu, fidp, qiov.iov, qiov.niov, off);
total += len;
err = pdu_marshal(pdu, offset, "d", total);
trace_v9fs_write_return(pdu->tag, pdu->id, total, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
ssize_t dataArray[5];
dataArray[2] = len;
int err = func(dataArray);
ssize_t func(ssize_t dataArray[])
int len = dataArray[2];
return -len;
int err = func(dataArray);
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
1

14249 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1900
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t count,
struct iovec *sg, int cnt)
int i, to_copy;
ssize_t err = 0;
int write_count;
int64_t xattr_len;
size_t offset = 7;
xattr_len = fidp->fs.xattr.len;
write_count = xattr_len - off;
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
off += to_copy;
len = v9fs_co_pwritev(pdu, fidp, qiov.iov, qiov.niov, off);
total += len;
qemu_iovec_concat(&qiov, &qiov_full, total, qiov_full.size - total);
err = pdu_marshal(pdu, offset, "d", total);
trace_v9fs_write_return(pdu->tag, pdu->id, total, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
ssize_t dataArray[5];
dataArray[2] = len;
int err = func(dataArray);
ssize_t func(ssize_t dataArray[])
int len = dataArray[2];
return -len;
int err = func(dataArray);
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
1

14251 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c Buffer_Overflow_boundedcpy 1941
static void v9fs_write(void *opaque)
size_t offset = 7;
uint32_t count;
QEMUIOVector qiov_full;
V9fsPDU *pdu = opaque;
v9fs_init_qiov_from_pdu(&qiov_full, pdu, offset, count, true);
size_t skip, size_t size,
qemu_iovec_concat(qiov, &elem, skip, size);
trace_v9fs_write(pdu->tag, pdu->id, fid, off, count, qiov_full.niov);
err = v9fs_xattr_write(s, pdu, fidp, off, count,qiov_full.iov, qiov_full.niov);
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t count,
struct iovec *sg, int cnt)
uint64_t  write_count;
int i, to_copy;
write_count = fidp->fs.xattr.len - off;
if (write_count > count) {
write_count = count;
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
0

14255 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1563
static int v9fs_xattr_read(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t max_count)
size_t offset = 7;
uint64_t read_count;
ssize_t err;
if (fidp->fs.xattr.len < off) {
read_count = 0;
} else {
read_count = fidp->fs.xattr.len - off;
err = pdu_marshal(pdu, offset, "d", read_count);
return err;
err = v9fs_xattr_read(s, pdu, fidp, off, max_count);
trace_v9fs_read_return(pdu->tag, pdu->id, count, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
int err = -len;
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
0

14256 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1951
static void v9fs_write(void *opaque)
int32_t fid;
size_t offset = 7;
uint64_t off;
ssize_t err;
uint32_t count;
V9fsPDU *pdu = opaque;
err = pdu_unmarshal(pdu, offset, "dqd", &fid, &off, &count);
v9fs_init_qiov_from_pdu(&qiov_full, pdu, offset, count, true);
static void v9fs_init_qiov_from_pdu(QEMUIOVector *qiov, V9fsPDU *pdu, size_t skip, size_t size,
qemu_iovec_concat(qiov, &elem, skip, size);
trace_v9fs_write(pdu->tag, pdu->id, fid, off, count, qiov_full.niov);
err = v9fs_xattr_write(s, pdu, fidp, off, count,qiov_full.iov, qiov_full.niov);
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,uint64_t off, uint32_t count,
uint64_t write_count;
if (fidp->fs.xattr.len < off) {
err = -ENOSPC;
goto out;
write_count = fidp->fs.xattr.len - off;
if (write_count > count) {
write_count = count;  }
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
off += to_copy;
err = v9fs_xattr_write(s, pdu, fidp, off, count,
len = v9fs_co_pwritev(pdu, fidp, qiov.iov, qiov.niov, off);
total += len;
err = pdu_marshal(pdu, offset, "d", total);
trace_v9fs_write_return(pdu->tag, pdu->id, total, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
int err = -len;
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
0

14257 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1900
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t count,
struct iovec *sg, int cnt)
size_t offset = 7;
ssize_t err = 0;
int i, to_copy;
uint64_t write_count;
if (fidp->fs.xattr.len < off) {
err = -ENOSPC;
goto out;
write_count = fidp->fs.xattr.len - off;
if (write_count > count) {
write_count = count;
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
off += to_copy;
len = v9fs_co_pwritev(pdu, fidp, qiov.iov, qiov.niov, off);
total += len;
qemu_iovec_concat(&qiov, &qiov_full, total, qiov_full.size - total);
err = pdu_marshal(pdu, offset, "d", total);
trace_v9fs_write_return(pdu->tag, pdu->id, total, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
int err = -len;
V9fsString str;
str.data = strerror(err);
str.size = strlen(str.data);
0

14261 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c Buffer_Overflow_boundedcpy 1941
static void v9fs_write(void *opaque)
size_t offset = 7;
uint32_t count;
QEMUIOVector qiov_full;
V9fsPDU *pdu = opaque;
v9fs_init_qiov_from_pdu(&qiov_full, pdu, offset, count, true);
size_t skip, size_t size,
qemu_iovec_concat(qiov, &elem, skip, size);
trace_v9fs_write(pdu->tag, pdu->id, fid, off, count, qiov_full.niov);
err = v9fs_xattr_write(s, pdu, fidp, off, count,qiov_full.iov, qiov_full.niov);
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t count,
struct iovec *sg, int cnt)
int write_count;
int i, to_copy;
write_count = xattr_len - off;
if (write_count > count) {
write_count = count;
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
1

14265 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1563
static int v9fs_xattr_read(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t max_count)
size_t offset = 7;
ssize_t err;
int64_t xattr_len;
int read_count;
xattr_len = fidp->fs.xattr.len;
read_count = xattr_len - off;
err = pdu_marshal(pdu, offset, "d", read_count);
return err;
err = v9fs_xattr_read(s, pdu, fidp, off, max_count);
trace_v9fs_read_return(pdu->tag, pdu->id, count, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
V9fsString str;
int err = -len;
str.data = strerror(err);
str.size = strlen(str.data);
1

14266 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1951
static void v9fs_write(void *opaque)
int32_t fid;
size_t offset = 7;
uint64_t off;
ssize_t err;
uint32_t count;
V9fsPDU *pdu = opaque;
err = pdu_unmarshal(pdu, offset, "dqd", &fid, &off, &count);
v9fs_init_qiov_from_pdu(&qiov_full, pdu, offset, count, true);
static void v9fs_init_qiov_from_pdu(QEMUIOVector *qiov, V9fsPDU *pdu, size_t skip, size_t size,
qemu_iovec_concat(qiov, &elem, skip, size);
trace_v9fs_write(pdu->tag, pdu->id, fid, off, count, qiov_full.niov);
err = v9fs_xattr_write(s, pdu, fidp, off, count,qiov_full.iov, qiov_full.niov);
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,uint64_t off, uint32_t count,
int write_count;
int64_t xattr_len;
xattr_len = fidp->fs.xattr.len;
write_count = xattr_len - off;
write_count = count;
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
off += to_copy;
err = v9fs_xattr_write(s, pdu, fidp, off, count,
len = v9fs_co_pwritev(pdu, fidp, qiov.iov, qiov.niov, off);
total += len;
err = pdu_marshal(pdu, offset, "d", total);
trace_v9fs_write_return(pdu->tag, pdu->id, total, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
V9fsString str;
int err = -len;
str.data = strerror(err);
str.size = strlen(str.data);
1

14267 CVE-2016-9104/qemu_2.3.0_CVE-2016-9104_virtio-9p.c String_Termination_Error 1900
static int v9fs_xattr_write(V9fsState *s, V9fsPDU *pdu, V9fsFidState *fidp,
uint64_t off, uint32_t count,
struct iovec *sg, int cnt)
ssize_t err = 0;
size_t offset = 7;
int i, to_copy;
int64_t xattr_len;
int write_count;
xattr_len = fidp->fs.xattr.len;
write_count = xattr_len - off;
err = pdu_marshal(pdu, offset, "d", write_count);
to_copy = write_count;
memcpy((char *)fidp->fs.xattr.value + off, sg[i].iov_base, to_copy);
off += to_copy;
len = v9fs_co_pwritev(pdu, fidp, qiov.iov, qiov.niov, off);
total += len;
qemu_iovec_concat(&qiov, &qiov_full, total, qiov_full.size - total);
err = pdu_marshal(pdu, offset, "d", total);
trace_v9fs_write_return(pdu->tag, pdu->id, total, err);
complete_pdu(s, pdu, err);
static void complete_pdu(V9fsState *s, V9fsPDU *pdu, ssize_t len)
V9fsString str;
int err = -len;
str.data = strerror(err);
str.size = strlen(str.data);
1

