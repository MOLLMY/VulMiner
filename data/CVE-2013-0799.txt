72 CVE-2013-0799/Firefox_19.0_CVE_2013_0799_toolkit_components_maintenanceservice_workmonitor.cpp cfunc 276
LPWSTR cmdLine = MakeCommandLine(argc, argv);
LOG(("Starting service with cmdline: %ls", cmdLine));
processStarted = CreateProcessW(argv[0], cmdLine,
free(cmdLine);
0

73 CVE-2013-0799/Firefox_19.0_CVE_2013_0799_toolkit_components_maintenanceservice_workmonitor.cpp cppfunc 276
LPWSTR cmdLine = MakeCommandLine(argc, argv);
LOG(("Starting service with cmdline: %ls", cmdLine));
processStarted = CreateProcessW(argv[0], cmdLine,
free(cmdLine);
0

112 CVE-2013-0799/Firefox_19.0_CVE_2013_0799_toolkit_components_maintenanceservice_workmonitor.cpp API 210
PROCESS_INFORMATION pi = {0};
NULL, &si, &pi);
DWORD waitRes = WaitForSingleObject(pi.hProcess, TIME_TO_WAIT_ON_UPDATER);
TerminateProcess(pi.hProcess, 1);
if (GetExitCodeProcess(pi.hProcess, &returnCode)) {
CloseHandle(pi.hProcess);
0

410 CVE-2013-0799/Firefox_19.0_CVE_2013_0799_toolkit_components_maintenanceservice_workmonitor.cpp API 211
PROCESS_INFORMATION pi = {0};
NULL, &si, &pi);
CloseHandle(pi.hThread);
0

489 CVE-2013-0799/Firefox_19.0_CVE_2013_0799_toolkit_components_maintenanceservice_workmonitor.cpp cfunc 396
char updaterIdentity[64];
updaterIdentity, sizeof(updaterIdentity))) {
if (strcmp(updaterIdentity, UPDATER_IDENTITY_STRING)) {
0

518 CVE-2013-0799/Firefox_19.0_CVE_2013_0799_toolkit_components_maintenanceservice_workmonitor.cpp cfunc 78
char buf[32] = { 0 };
if (!ReadFile(statusFile, buf, sizeof(buf), &read, NULL)) {
LOG(("updater.exe returned status: %s", buf));
const char kApplying[] = "applying";
isApplying = strncmp(buf, kApplying,
0

596 CVE-2013-0799/Firefox_19.0_CVE_2013_0799_toolkit_components_maintenanceservice_workmonitor.cpp cppfunc 111
WCHAR installDir[MAX_PATH] = {L'\0'};
if (!GetInstallationDir(argc, argv, installDir)) {
GetInstallationDir(int argcTmp, LPWSTR *argvTmp, WCHAR aResultDir[MAX_PATH])
wcscpy(aResultDir, argvTmp[2]);
WCHAR* backSlash = wcsrchr(aResultDir, L'\\');
1

613 CVE-2013-0799/Firefox_19.0_CVE_2013_0799_toolkit_components_maintenanceservice_workmonitor.cpp cppfunc 51
ExecuteServiceCommand(int argc, LPWSTR *argv)
if (!lstrcmpi(argv[2], L"software-update")) {
result = ProcessSoftwareUpdateCommand(argc - 3, argv + 3);
ProcessSoftwareUpdateCommand(DWORD argc, LPWSTR *argv)
if (!GetInstallationDir(argc, argv, installDir)) {
GetInstallationDir(int argcTmp, LPWSTR *argvTmp, WCHAR aResultDir[MAX_PATH])
wcscpy(aResultDir, argvTmp[2]);
bool backgroundUpdate = IsUpdateBeingStaged(argcTmp, argvTmp);
if (!IsLocalFile(argv[0], isLocal) || !isLocal) {
nsAutoHandle noWriteLock(CreateFileW(argv[0], GENERIC_READ, FILE_SHARE_READ,
if (result && !VerifySameFiles(argv[0], installDirUpdater,
HMODULE updaterModule = LoadLibraryEx(argv[0], NULL,
argv[0]);
if (StartUpdateProcess(argc, argv, installDir,
LPWSTR *argv,
LPWSTR cmdLine = MakeCommandLine(argc, argv);
PRUnichar* MakeCommandLine(int argc, PRUnichar **argv);
WCHAR updateStatusFilePath[MAX_PATH + 1];
wcscpy(updateStatusFilePath, updateDirPath);
PathGetSiblingFilePath(updaterINITemp, argv[0], L"updater.tmp")) {
BOOL PathGetSiblingFilePath(LPWSTR destinationBuffer,  LPCWSTR siblingFilePath,
if (PathGetSiblingFilePath(updaterINI, argv[0], L"updater.ini") &&
processStarted = CreateProcessW(argv[0], cmdLine,
if (IsStatusApplying(argv[1], isApplying) && isApplying) {
BOOL PathGetSiblingFilePath(LPWSTR destinationBuffer,  LPCWSTR siblingFilePath,
processStarted = CreateProcessW(argv[0], cmdLine,
if (IsStatusApplying(argv[1], isApplying) && isApplying) {
IsStatusApplying(LPCWSTR updateDirPath, BOOL &isApplying)
wcscpy(updateStatusFilePath, updateDirPath);
IsUpdateBeingStaged(int argc, LPWSTR *argv)
return argc == 4 && !wcscmp(argv[3], L"-1");
bool replaceRequest = (argcTmp >= 4 && wcsstr(argvTmp[3], L"/replace"));
if (!IsLocalFile(argv[0], isLocal) || !isLocal) {
nsAutoHandle noWriteLock(CreateFileW(argv[0], GENERIC_READ, FILE_SHARE_READ,
if (result && !VerifySameFiles(argv[0], installDirUpdater,
HMODULE updaterModule = LoadLibraryEx(argv[0], NULL,
argv[0]);
if (StartUpdateProcess(argc, argv, installDir,
LPWSTR *argv,
LPWSTR cmdLine = MakeCommandLine(argc, argv);
1

630 CVE-2013-0799/Firefox_19.0_CVE_2013_0799_toolkit_components_maintenanceservice_workmonitor.cpp cppfunc 349
wcscpy(aResultDir, argvTmp[2]);
WCHAR* backSlash = wcsrchr(aResultDir, L'\\');
return PathRemoveFileSpecW(aResultDir);
WCHAR installDir[MAX_PATH] = {L'\0'};
if (!GetInstallationDir(argc, argv, installDir)) {
WCHAR installDirUpdater[MAX_PATH + 1] = {L'\0'};
wcsncpy(installDirUpdater, installDir, MAX_PATH);
GetInstallationDir(int argcTmp, LPWSTR *argvTmp, WCHAR aResultDir[MAX_PATH])
wcsncpy(installDirUpdater, installDir, MAX_PATH);
1

646 CVE-2013-0799/Firefox_19.0_CVE_2013_0799_toolkit_components_maintenanceservice_workmonitor.cpp API 400
IsUpdateBeingStaged(int argc, LPWSTR *argv)
return argc == 4 && !wcscmp(argv[3], L"-1");
bool replaceRequest = (argcTmp >= 4 && wcsstr(argvTmp[3], L"/replace"));
if (!IsLocalFile(argv[0], isLocal) || !isLocal) {
nsAutoHandle noWriteLock(CreateFileW(argv[0], GENERIC_READ, FILE_SHARE_READ,
if (result && !VerifySameFiles(argv[0], installDirUpdater,
HMODULE updaterModule = LoadLibraryEx(argv[0], NULL,
LOAD_LIBRARY_AS_DATAFILE);
HMODULE updaterModule = LoadLibraryEx(argv[0], NULL,
if (!LoadStringA(updaterModule, IDS_UPDATER_IDENTITY,
FreeLibrary(updaterModule);
ExecuteServiceCommand(int argc, LPWSTR *argv)
if (!lstrcmpi(argv[2], L"software-update")) {
result = ProcessSoftwareUpdateCommand(argc - 3, argv + 3);
ProcessSoftwareUpdateCommand(DWORD argc, LPWSTR *argv)
if (!GetInstallationDir(argc, argv, installDir)) {
GetInstallationDir(int argcTmp, LPWSTR *argvTmp, WCHAR aResultDir[MAX_PATH])
wcscpy(aResultDir, argvTmp[2]);
bool backgroundUpdate = IsUpdateBeingStaged(argcTmp, argvTmp);
if (!IsLocalFile(argv[0], isLocal) || !isLocal) {
nsAutoHandle noWriteLock(CreateFileW(argv[0], GENERIC_READ, FILE_SHARE_READ,
if (result && !VerifySameFiles(argv[0], installDirUpdater,
HMODULE updaterModule = LoadLibraryEx(argv[0], NULL,
if (!LoadStringA(updaterModule, IDS_UPDATER_IDENTITY,
FreeLibrary(updaterModule);
1

661 CVE-2013-0799/Firefox_19.0_CVE_2013_0799_toolkit_components_maintenanceservice_workmonitor.cpp API 70
WCHAR updateStatusFilePath[MAX_PATH + 1];
wcscpy(updateStatusFilePath, updateDirPath);
if (!PathAppendSafe(updateStatusFilePath, L"update.status")) {
FILE_SHARE_DELETE,
FILE_SHARE_WRITE |
nsAutoHandle statusFile(CreateFileW(updateStatusFilePath, GENERIC_READ,
NULL, OPEN_EXISTING, 0, NULL));
char buf[32] = { 0 };
DWORD read;
if (!ReadFile(statusFile, buf, sizeof(buf), &read, NULL)) {
1

13046 CVE-2013-0799/Firefox_19.0_CVE_2013_0799_toolkit_components_maintenanceservice_workmonitor.cpp Buffer_Overflow_cpycat 110
WCHAR installDir[MAX_PATH] = {L'\0'};
if (!GetInstallationDir(argc, argv, installDir)) {
GetInstallationDir(int argcTmp, LPWSTR *argvTmp, WCHAR aResultDir[MAX_PATH])
wcscpy(aResultDir, argvTmp[2]);
1

13047 CVE-2013-0799/Firefox_19.0_CVE_2013_0799_toolkit_components_maintenanceservice_workmonitor.cpp Buffer_Overflow_cpycat 110
WCHAR installDir[MAX_PATH + 1] = {L'\0'};
if (!GetInstallationDir(argc, argv, installDir)) {
GetInstallationDir(int argcTmp, LPWSTR *argvTmp, WCHAR aResultDir[MAX_PATH])
wcscpy(aResultDir, argvTmp[2]);
0

13728 CVE-2013-0799/Firefox_19.0_CVE_2013_0799_toolkit_components_maintenanceservice_workmonitor.cpp Buffer_Overflow_cpycat 110
installDir = func(installDir);
static WCHAR * func(const WCHAR * installDir)
WCHAR installDir[MAX_PATH] = {L'\0'};
return installDir;
installDir = func(installDir);
if (!GetInstallationDir(argc, argv, installDir)) {
GetInstallationDir(int argcTmp, LPWSTR *argvTmp, WCHAR aResultDir[MAX_PATH])
wcscpy(aResultDir, argvTmp[2]);
1

13729 CVE-2013-0799/Firefox_19.0_CVE_2013_0799_toolkit_components_maintenanceservice_workmonitor.cpp Buffer_Overflow_cpycat 110
installDir = func(installDir);
static WCHAR * func(const WCHAR * installDir)
WCHAR installDir[MAX_PATH + 1] = {L'\0'};
return installDir;
installDir = func(installDir);
if (!GetInstallationDir(argc, argv, installDir)) {
GetInstallationDir(int argcTmp, LPWSTR *argvTmp, WCHAR aResultDir[MAX_PATH])
wcscpy(aResultDir, argvTmp[2]);
0

13730 CVE-2013-0799/Firefox_19.0_CVE_2013_0799_toolkit_components_maintenanceservice_workmonitor.cpp Buffer_Overflow_cpycat 110
installDir = func(&installDir);
static WCHAR * func(WCHAR * * ptr)
WCHAR * installDir = * ptr
WCHAR installDir[MAX_PATH] = {L'\0'};
return installDir;
installDir = func(&installDir);
if (!GetInstallationDir(argc, argv, installDir)) {
GetInstallationDir(int argcTmp, LPWSTR *argvTmp, WCHAR aResultDir[MAX_PATH])
wcscpy(aResultDir, argvTmp[2]);
1

13731 CVE-2013-0799/Firefox_19.0_CVE_2013_0799_toolkit_components_maintenanceservice_workmonitor.cpp Buffer_Overflow_cpycat 110
installDir = func(&installDir);
static WCHAR * func(WCHAR * * ptr)
WCHAR * installDir = * ptr
WCHAR installDir[MAX_PATH + 1] = {L'\0'};
return installDir;
installDir = func(&installDir);
if (!GetInstallationDir(argc, argv, installDir)) {
GetInstallationDir(int argcTmp, LPWSTR *argvTmp, WCHAR aResultDir[MAX_PATH])
wcscpy(aResultDir, argvTmp[2]);
0

13732 CVE-2013-0799/Firefox_19.0_CVE_2013_0799_toolkit_components_maintenanceservice_workmonitor.cpp Buffer_Overflow_cpycat 110
void (*funcPtr) (WCHAR *) = badSource;
funcPtr(installDir);
void badSource(WCHAR * installDir)
WCHAR installDir[MAX_PATH] = {L'\0'};
if (!GetInstallationDir(argc, argv, installDir)) {
GetInstallationDir(int argcTmp, LPWSTR *argvTmp, WCHAR aResultDir[MAX_PATH])
wcscpy(aResultDir, argvTmp[2]);
1

13733 CVE-2013-0799/Firefox_19.0_CVE_2013_0799_toolkit_components_maintenanceservice_workmonitor.cpp Buffer_Overflow_cpycat 110
WCHAR installDir[MAX_PATH + 1] = {L'\0'};
if (!GetInstallationDir(argc, argv, installDir)) {
GetInstallationDir(int argcTmp, LPWSTR *argvTmp, WCHAR aResultDir[MAX_PATH])
wcscpy(aResultDir, argvTmp[2]);
0

13734 CVE-2013-0799/Firefox_19.0_CVE_2013_0799_toolkit_components_maintenanceservice_workmonitor.cpp Buffer_Overflow_cpycat 110
void (*funcPtr) (WCHAR *) = badSource;
funcPtr(installDir);
void badSource(WCHAR * installDir)
WCHAR installDir[MAX_PATH] = {L'\0'};
if (!GetInstallationDir(argc, argv, installDir)) {
GetInstallationDir(int argcTmp, LPWSTR *argvTmp, WCHAR aResultDir[MAX_PATH])
wcscpy(aResultDir, argvTmp[2]);
1

13735 CVE-2013-0799/Firefox_19.0_CVE_2013_0799_toolkit_components_maintenanceservice_workmonitor.cpp Buffer_Overflow_cpycat 110
WCHAR installDir[MAX_PATH + 1] = {L'\0'};
if (!GetInstallationDir(argc, argv, installDir)) {
GetInstallationDir(int argcTmp, LPWSTR *argvTmp, WCHAR aResultDir[MAX_PATH])
wcscpy(aResultDir, argvTmp[2]);
0

13736 CVE-2013-0799/Firefox_19.0_CVE_2013_0799_toolkit_components_maintenanceservice_workmonitor.cpp Buffer_Overflow_cpycat 110
WCHAR * dataArray[5];
dataArray[2] = installDir;
installDir = badSource(dataArray);
void badSource(WCHAR * dataArray[])
WCHAR * installDir = dataArray[2];
WCHAR installDir[MAX_PATH] = {L'\0'};
return installDir;
if (!GetInstallationDir(argc, argv, installDir)) {
GetInstallationDir(int argcTmp, LPWSTR *argvTmp, WCHAR aResultDir[MAX_PATH])
wcscpy(aResultDir, argvTmp[2]);
1

13737 CVE-2013-0799/Firefox_19.0_CVE_2013_0799_toolkit_components_maintenanceservice_workmonitor.cpp Buffer_Overflow_cpycat 110
WCHAR * dataArray[5];
dataArray[2] = installDir;
installDir = badSource(dataArray);
void badSource(WCHAR * dataArray[])
WCHAR * installDir = dataArray[2];
WCHAR installDir[MAX_PATH + 1] = {L'\0'};
return installDir;
if (!GetInstallationDir(argc, argv, installDir)) {
GetInstallationDir(int argcTmp, LPWSTR *argvTmp, WCHAR aResultDir[MAX_PATH])
wcscpy(aResultDir, argvTmp[2]);
0

13738 CVE-2013-0799/Firefox_19.0_CVE_2013_0799_toolkit_components_maintenanceservice_workmonitor.cpp Buffer_Overflow_cpycat 110
WCHAR installDir[MAX_PATH] = {L'\0'};
unionType myUnion;
myUnion.unionFirst = installDir;
WCHAR * installDir = myUnion.unionSecond;
if (!GetInstallationDir(argc, argv, installDir)) {
GetInstallationDir(int argcTmp, LPWSTR *argvTmp, WCHAR aResultDir[MAX_PATH])
wcscpy(aResultDir, argvTmp[2]);
1

13739 CVE-2013-0799/Firefox_19.0_CVE_2013_0799_toolkit_components_maintenanceservice_workmonitor.cpp Buffer_Overflow_cpycat 110
WCHAR installDir[MAX_PATH + 1] = {L'\0'};
unionType myUnion;
myUnion.unionFirst = installDir;
WCHAR * installDir = myUnion.unionSecond;
if (!GetInstallationDir(argc, argv, installDir)) {
GetInstallationDir(int argcTmp, LPWSTR *argvTmp, WCHAR aResultDir[MAX_PATH])
wcscpy(aResultDir, argvTmp[2]);
0

13740 CVE-2013-0799/Firefox_19.0_CVE_2013_0799_toolkit_components_maintenanceservice_workmonitor.cpp Buffer_Overflow_cpycat 110
structType myStruct;
myStruct.structFirst = installDir;
installDir = badSource(myStruct);
void badSource(structType myStruct)
WCHAR * installDir = myStruct.structFirst;
WCHAR installDir[MAX_PATH] = {L'\0'};
return installDir;
if (!GetInstallationDir(argc, argv, installDir)) {
GetInstallationDir(int argcTmp, LPWSTR *argvTmp, WCHAR aResultDir[MAX_PATH])
wcscpy(aResultDir, argvTmp[2]);
1

13741 CVE-2013-0799/Firefox_19.0_CVE_2013_0799_toolkit_components_maintenanceservice_workmonitor.cpp Buffer_Overflow_cpycat 110
structType myStruct;
myStruct.structFirst = installDir;
installDir = badSource(myStruct);
void badSource(structType myStruct)
WCHAR * installDir = myStruct.structFirst;
WCHAR installDir[MAX_PATH + 1] = {L'\0'};
return installDir;
if (!GetInstallationDir(argc, argv, installDir)) {
GetInstallationDir(int argcTmp, LPWSTR *argvTmp, WCHAR aResultDir[MAX_PATH])
wcscpy(aResultDir, argvTmp[2]);
0

