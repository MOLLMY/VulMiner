44 CVE-2011-2588/vlc_media_player_0.9.9_CVE-2011-2588_libavi.c cfunc 462
static int AVI_ChunkRead_idx1( stream_t *s, avi_chunk_t *p_chk )
AVI_READCHUNK_ENTER;
i_count = __MIN( (int64_t)p_chk->common.i_chunk_size, i_read ) / 16;
p_chk->idx1.entry = calloc( i_count, sizeof( idx1_entry_t ) );
0

45 CVE-2011-2588/vlc_media_player_0.9.9_CVE-2011-2588_libavi.c cppfunc 462
static int AVI_ChunkRead_idx1( stream_t *s, avi_chunk_t *p_chk )
AVI_READCHUNK_ENTER;
i_count = __MIN( (int64_t)p_chk->common.i_chunk_size, i_read ) / 16;
p_chk->idx1.entry = calloc( i_count, sizeof( idx1_entry_t ) );
0

47 CVE-2011-2588/vlc_media_player_0.9.9_CVE-2011-2588_libavi.c cfunc 368
AVI_READCHUNK_ENTER;
p_chk->strf.auds.p_wf = malloc( __MAX( p_chk->common.i_chunk_size, sizeof( WAVEFORMATEX ) ) );
AVI_READ2BYTES( p_chk->strf.auds.p_wf->wFormatTag );
AVI_READ2BYTES( p_chk->strf.auds.p_wf->nChannels );
AVI_READ4BYTES( p_chk->strf.auds.p_wf->nSamplesPerSec );
AVI_READ4BYTES( p_chk->strf.auds.p_wf->nAvgBytesPerSec );
AVI_READ2BYTES( p_chk->strf.auds.p_wf->nBlockAlign );
AVI_READ2BYTES( p_chk->strf.auds.p_wf->wBitsPerSample );
&& p_chk->common.i_chunk_size > sizeof( WAVEFORMATEX ) )
AVI_READ2BYTES( p_chk->strf.auds.p_wf->cbSize );
p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX ) )
p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX );
p_chk->strf.auds.p_wf->cbSize =
p_chk->strf.auds.p_wf->cbSize = 0;
memcpy( &p_chk->strf.auds.p_wf[1] ,
0

119 CVE-2011-2588/vlc_media_player_0.9.9_CVE-2011-2588_libavi.c cfunc 56
avi_chunk_t chk;
if( AVI_ChunkReadCommon( s, &chk ) )
int  _AVI_ChunkRead( stream_t *s, avi_chunk_t *p_chk, avi_chunk_t *p_father )
if( AVI_ChunkReadCommon( s, p_chk ) )
static int AVI_ChunkReadCommon( stream_t *s, avi_chunk_t *p_chk )
memset( p_chk, 0, sizeof( avi_chunk_t ) );
0

185 CVE-2011-2588/vlc_media_player_0.9.9_CVE-2011-2588_libavi.c cfunc 422
AVI_READCHUNK_ENTER;
p_chk->strf.auds.p_wf = malloc( __MAX( p_chk->common.i_chunk_size, sizeof( WAVEFORMATEX ) ) );
&& p_chk->common.i_chunk_size > sizeof( WAVEFORMATEX ) )
p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX ) )
p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX );
p_buff + 8 + sizeof( WAVEFORMATEX ),
if( p_chk->strf.vids.p_bih->biSize - sizeof(BITMAPINFOHEADER) > 0 )
p_buff + 8 + sizeof(BITMAPINFOHEADER),
p_chk->common.i_chunk_size -sizeof(BITMAPINFOHEADER) );
p_buff + 8 + sizeof(BITMAPINFOHEADER),
AVI_READCHUNK_EXIT( VLC_SUCCESS );
0

186 CVE-2011-2588/vlc_media_player_0.9.9_CVE-2011-2588_libavi.c cppfunc 422
AVI_READCHUNK_ENTER;
p_chk->strf.auds.p_wf = malloc( __MAX( p_chk->common.i_chunk_size, sizeof( WAVEFORMATEX ) ) );
&& p_chk->common.i_chunk_size > sizeof( WAVEFORMATEX ) )
p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX ) )
p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX );
p_buff + 8 + sizeof( WAVEFORMATEX ),
if( p_chk->strf.vids.p_bih->biSize - sizeof(BITMAPINFOHEADER) > 0 )
p_buff + 8 + sizeof(BITMAPINFOHEADER),
p_chk->common.i_chunk_size -sizeof(BITMAPINFOHEADER) );
p_buff + 8 + sizeof(BITMAPINFOHEADER),
AVI_READCHUNK_EXIT( VLC_SUCCESS );
0

193 CVE-2011-2588/vlc_media_player_0.9.9_CVE-2011-2588_libavi.c cfunc 774
p_child = p_chk->common.p_first;
p_next = p_child->common.p_next;
p_child = p_next;
free( p_child );
0

194 CVE-2011-2588/vlc_media_player_0.9.9_CVE-2011-2588_libavi.c cppfunc 774
p_child = p_chk->common.p_first;
p_next = p_child->common.p_next;
p_child = p_next;
free( p_child );
0

255 CVE-2011-2588/vlc_media_player_0.9.9_CVE-2011-2588_libavi.c cfunc 516
int  _AVI_ChunkRead( stream_t *s, avi_chunk_t *p_chk, avi_chunk_t *p_father )
if( AVI_ChunkReadCommon( s, p_chk ) )
static int AVI_ChunkReadCommon( stream_t *s, avi_chunk_t *p_chk )
if( ( i_peek = stream_Peek( s, &p_peek, 8 ) ) < 8 )
p_chk->common.i_chunk_pos    = stream_Tell( s );
AVI_READCHUNK_ENTER;
AVI_READ2BYTES( p_indx->i_longsperentry );
AVI_READ1BYTE ( p_indx->i_indexsubtype );
AVI_READ4BYTES( p_indx->i_id );
AVI_READ8BYTES( p_indx->i_baseoffset );
AVI_READ4BYTES( i_dummy );
i_count = __MIN( p_indx->i_entriesinuse, i_read / 8 );
p_indx->idx.std = calloc( sizeof( indx_std_entry_t ), i_count );
if( AVI_ChunkReadCommon( s, p_chk ) )
return AVI_ChunkRead_indx( s, p_chk );
static int AVI_ChunkRead_indx( stream_t *s, avi_chunk_t *p_chk )
AVI_READCHUNK_ENTER;
i_count = __MIN( p_indx->i_entriesinuse, i_read / 8 );
p_indx->idx.std = calloc( sizeof( indx_std_entry_t ), i_count );
static inline uint8_t GetB( uint8_t *ptr )
AVI_READ1BYTE ( p_indx->i_indextype );
static inline uint8_t GetB( uint8_t *ptr )
AVI_READ4BYTES( p_indx->i_entriesinuse );
i_count = __MIN( p_indx->i_entriesinuse, i_read / 8 );
p_indx->idx.std = calloc( sizeof( indx_std_entry_t ), i_count );
0

256 CVE-2011-2588/vlc_media_player_0.9.9_CVE-2011-2588_libavi.c cppfunc 516
int  _AVI_ChunkRead( stream_t *s, avi_chunk_t *p_chk, avi_chunk_t *p_father )
if( AVI_ChunkReadCommon( s, p_chk ) )
static int AVI_ChunkReadCommon( stream_t *s, avi_chunk_t *p_chk )
if( ( i_peek = stream_Peek( s, &p_peek, 8 ) ) < 8 )
p_chk->common.i_chunk_pos    = stream_Tell( s );
AVI_READCHUNK_ENTER;
AVI_READ2BYTES( p_indx->i_longsperentry );
AVI_READ1BYTE ( p_indx->i_indexsubtype );
AVI_READ4BYTES( p_indx->i_id );
AVI_READ8BYTES( p_indx->i_baseoffset );
AVI_READ4BYTES( i_dummy );
i_count = __MIN( p_indx->i_entriesinuse, i_read / 8 );
p_indx->idx.std = calloc( sizeof( indx_std_entry_t ), i_count );
if( AVI_ChunkReadCommon( s, p_chk ) )
return AVI_ChunkRead_indx( s, p_chk );
static int AVI_ChunkRead_indx( stream_t *s, avi_chunk_t *p_chk )
AVI_READCHUNK_ENTER;
i_count = __MIN( p_indx->i_entriesinuse, i_read / 8 );
p_indx->idx.std = calloc( sizeof( indx_std_entry_t ), i_count );
static inline uint8_t GetB( uint8_t *ptr )
AVI_READ1BYTE ( p_indx->i_indextype );
static inline uint8_t GetB( uint8_t *ptr )
AVI_READ4BYTES( p_indx->i_entriesinuse );
i_count = __MIN( p_indx->i_entriesinuse, i_read / 8 );
p_indx->idx.std = calloc( sizeof( indx_std_entry_t ), i_count );
0

278 CVE-2011-2588/vlc_media_player_0.9.9_CVE-2011-2588_libavi.c cfunc 370
AVI_READCHUNK_ENTER;
p_chk->strf.auds.p_wf = malloc( __MAX( p_chk->common.i_chunk_size, sizeof( WAVEFORMATEX ) ) );
AVI_READ2BYTES( p_chk->strf.auds.p_wf->wFormatTag );
AVI_READ2BYTES( p_chk->strf.auds.p_wf->nChannels );
AVI_READ4BYTES( p_chk->strf.auds.p_wf->nSamplesPerSec );
AVI_READ4BYTES( p_chk->strf.auds.p_wf->nAvgBytesPerSec );
AVI_READ2BYTES( p_chk->strf.auds.p_wf->nBlockAlign );
AVI_READ2BYTES( p_chk->strf.auds.p_wf->wBitsPerSample );
&& p_chk->common.i_chunk_size > sizeof( WAVEFORMATEX ) )
AVI_READ2BYTES( p_chk->strf.auds.p_wf->cbSize );
p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX ) )
p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX );
p_chk->strf.auds.p_wf->cbSize =
p_chk->strf.auds.p_wf->cbSize = 0;
p_chk->strf.auds.p_wf->cbSize );
0

289 CVE-2011-2588/vlc_media_player_0.9.9_CVE-2011-2588_libavi.c cfunc 631
static int AVI_ChunkRead_strz( stream_t *s, avi_chunk_t *p_chk )
AVI_READCHUNK_ENTER;
p_strz->p_str = malloc( i_read + 1);
memcpy( p_strz->p_str, p_read, i_read );
0

338 CVE-2011-2588/vlc_media_player_0.9.9_CVE-2011-2588_libavi.c cfunc 170
memset( p_chk, 0, sizeof( avi_chunk_t ) );
p_chk = malloc( sizeof( avi_chunk_t ) );
memset( p_chk, 0, sizeof( avi_chunk_t ) );
0

473 CVE-2011-2588/vlc_media_player_0.9.9_CVE-2011-2588_libavi.c cppfunc 627
static int AVI_ChunkRead_strz( stream_t *s, avi_chunk_t *p_chk )
AVI_READCHUNK_ENTER;
p_strz->p_str = malloc( i_read + 1);
0

502 CVE-2011-2588/vlc_media_player_0.9.9_CVE-2011-2588_libavi.c cfunc 442
AVI_READCHUNK_ENTER;
memcpy( p_chk->strd.p_data, p_buff + 8, p_chk->common.i_chunk_size );
AVI_READCHUNK_EXIT( VLC_SUCCESS );
0

503 CVE-2011-2588/vlc_media_player_0.9.9_CVE-2011-2588_libavi.c cppfunc 442
AVI_READCHUNK_ENTER;
memcpy( p_chk->strd.p_data, p_buff + 8, p_chk->common.i_chunk_size );
AVI_READCHUNK_EXIT( VLC_SUCCESS );
0

520 CVE-2011-2588/vlc_media_player_0.9.9_CVE-2011-2588_libavi.c cfunc 860
memset( p_chk, 0, sizeof( avi_chunk_t ) );
p_chk = malloc( sizeof( avi_chunk_t ) );
memset( p_chk, 0, sizeof( avi_chunk_t ) );
0

546 CVE-2011-2588/vlc_media_player_0.9.9_CVE-2011-2588_libavi.c cfunc 531
int  _AVI_ChunkRead( stream_t *s, avi_chunk_t *p_chk, avi_chunk_t *p_father )
if( AVI_ChunkReadCommon( s, p_chk ) )
static int AVI_ChunkReadCommon( stream_t *s, avi_chunk_t *p_chk )
if( ( i_peek = stream_Peek( s, &p_peek, 8 ) ) < 8 )
p_chk->common.i_chunk_pos    = stream_Tell( s );
AVI_READCHUNK_ENTER;
AVI_READ2BYTES( p_indx->i_longsperentry );
AVI_READ1BYTE ( p_indx->i_indexsubtype );
AVI_READ4BYTES( p_indx->i_id );
AVI_READ8BYTES( p_indx->i_baseoffset );
AVI_READ4BYTES( i_dummy );
i_count = __MIN( p_indx->i_entriesinuse, i_read / 12 );
p_indx->idx.field = calloc( sizeof( indx_field_entry_t ), i_count );
if( AVI_ChunkReadCommon( s, p_chk ) )
return AVI_ChunkRead_indx( s, p_chk );
static int AVI_ChunkRead_indx( stream_t *s, avi_chunk_t *p_chk )
AVI_READCHUNK_ENTER;
i_count = __MIN( p_indx->i_entriesinuse, i_read / 12 );
p_indx->idx.field = calloc( sizeof( indx_field_entry_t ), i_count );
static inline uint8_t GetB( uint8_t *ptr )
AVI_READ1BYTE ( p_indx->i_indextype );
static inline uint8_t GetB( uint8_t *ptr )
AVI_READ4BYTES( p_indx->i_entriesinuse );
i_count = __MIN( p_indx->i_entriesinuse, i_read / 12 );
p_indx->idx.field = calloc( sizeof( indx_field_entry_t ), i_count );
0

547 CVE-2011-2588/vlc_media_player_0.9.9_CVE-2011-2588_libavi.c cppfunc 531
int  _AVI_ChunkRead( stream_t *s, avi_chunk_t *p_chk, avi_chunk_t *p_father )
if( AVI_ChunkReadCommon( s, p_chk ) )
static int AVI_ChunkReadCommon( stream_t *s, avi_chunk_t *p_chk )
if( ( i_peek = stream_Peek( s, &p_peek, 8 ) ) < 8 )
p_chk->common.i_chunk_pos    = stream_Tell( s );
AVI_READCHUNK_ENTER;
AVI_READ2BYTES( p_indx->i_longsperentry );
AVI_READ1BYTE ( p_indx->i_indexsubtype );
AVI_READ4BYTES( p_indx->i_id );
AVI_READ8BYTES( p_indx->i_baseoffset );
AVI_READ4BYTES( i_dummy );
i_count = __MIN( p_indx->i_entriesinuse, i_read / 12 );
p_indx->idx.field = calloc( sizeof( indx_field_entry_t ), i_count );
if( AVI_ChunkReadCommon( s, p_chk ) )
return AVI_ChunkRead_indx( s, p_chk );
static int AVI_ChunkRead_indx( stream_t *s, avi_chunk_t *p_chk )
AVI_READCHUNK_ENTER;
i_count = __MIN( p_indx->i_entriesinuse, i_read / 12 );
p_indx->idx.field = calloc( sizeof( indx_field_entry_t ), i_count );
static inline uint8_t GetB( uint8_t *ptr )
AVI_READ1BYTE ( p_indx->i_indextype );
static inline uint8_t GetB( uint8_t *ptr )
AVI_READ4BYTES( p_indx->i_entriesinuse );
i_count = __MIN( p_indx->i_entriesinuse, i_read / 12 );
p_indx->idx.field = calloc( sizeof( indx_field_entry_t ), i_count );
0

656 CVE-2011-2588/vlc_media_player_0.9.9_CVE-2011-2588_libavi.c cfunc 403
AVI_READCHUNK_ENTER;
p_chk->strf.vids.p_bih = malloc( p_chk->common.i_chunk_size );
AVI_READ4BYTES( p_chk->strf.vids.p_bih->biSize );
AVI_READ4BYTES( p_chk->strf.vids.p_bih->biWidth );
AVI_READ4BYTES( p_chk->strf.vids.p_bih->biHeight );
AVI_READ2BYTES( p_chk->strf.vids.p_bih->biPlanes );
AVI_READ2BYTES( p_chk->strf.vids.p_bih->biBitCount );
AVI_READFOURCC( p_chk->strf.vids.p_bih->biCompression );
AVI_READ4BYTES( p_chk->strf.vids.p_bih->biSizeImage );
AVI_READ4BYTES( p_chk->strf.vids.p_bih->biXPelsPerMeter );
AVI_READ4BYTES( p_chk->strf.vids.p_bih->biYPelsPerMeter );
AVI_READ4BYTES( p_chk->strf.vids.p_bih->biClrUsed );
AVI_READ4BYTES( p_chk->strf.vids.p_bih->biClrImportant );
p_chk->strf.vids.p_bih->biSize = p_chk->common.i_chunk_size;
memcpy( &p_chk->strf.vids.p_bih[1],
static vlc_fourcc_t GetFOURCC( const uint8_t *p_buff )
return VLC_FOURCC( p_buff[0], p_buff[1], p_buff[2], p_buff[3] );
AVI_READFOURCC( p_chk->strf.vids.p_bih->biCompression );
memcpy( &p_chk->strf.vids.p_bih[1],
1

13064 CVE-2011-2588/vlc_media_player_0.9.9_CVE-2011-2588_libavi.c Buffer_Overflow_boundedcpy 385
p_chk->strf.auds.p_wf = malloc( __MAX( p_chk->common.i_chunk_size, sizeof( WAVEFORMATEX ) ) );
if( p_chk->strf.auds.p_wf->wFormatTag != WAVE_FORMAT_PCM && p_chk->common.i_chunk_size > sizeof( WAVEFORMATEX ) )
if( p_chk->strf.auds.p_wf->cbSize > p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX ) )
p_chk->strf.auds.p_wf->cbSize = p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX );
p_chk->strf.vids.p_bih = malloc( p_chk->common.i_chunk_size );
if( p_chk->strf.vids.p_bih->biSize > p_chk->common.i_chunk_size )
p_chk->strf.vids.p_bih->biSize = p_chk->common.i_chunk_size;
if( p_chk->common.i_chunk_size - sizeof(BITMAPINFOHEADER) > 0 )
memcpy( &p_chk->strf.vids.p_bih[1], p_buff + 8 + sizeof(BITMAPINFOHEADER), p_chk->common.i_chunk_size -sizeof(BITMAPINFOHEADER) );
1

13065 CVE-2011-2588/vlc_media_player_0.9.9_CVE-2011-2588_libavi.c Buffer_Overflow_boundedcpy 385
p_chk->strf.auds.p_wf = malloc( __MAX( p_chk->common.i_chunk_size, sizeof( WAVEFORMATEX ) ) );
if( p_chk->strf.auds.p_wf->wFormatTag != WAVE_FORMAT_PCM && p_chk->common.i_chunk_size > sizeof( WAVEFORMATEX ) )
if( p_chk->strf.auds.p_wf->cbSize > p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX ) )
p_chk->strf.auds.p_wf->cbSize = p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX );
p_chk->strf.vids.p_bih = malloc( __MAX( p_chk->common.i_chunk_size,sizeof( *p_chk->strf.vids.p_bih ) ) );
if( p_chk->strf.vids.p_bih->biSize > p_chk->common.i_chunk_size )
p_chk->strf.vids.p_bih->biSize = p_chk->common.i_chunk_size;
if( p_chk->common.i_chunk_size > sizeof(BITMAPINFOHEADER) )
memcpy( &p_chk->strf.vids.p_bih[1], p_buff + 8 + sizeof(BITMAPINFOHEADER), p_chk->common.i_chunk_size -sizeof(BITMAPINFOHEADER) );
0

13878 CVE-2011-2588/vlc_media_player_0.9.9_CVE-2011-2588_libavi.c Buffer_Overflow_boundedcpy 385
p_chk->strf.auds.p_wf = malloc( __MAX( p_chk->common.i_chunk_size, sizeof( WAVEFORMATEX ) ) );
if( p_chk->strf.auds.p_wf->wFormatTag != WAVE_FORMAT_PCM && p_chk->common.i_chunk_size > sizeof( WAVEFORMATEX ) )
if( p_chk->strf.auds.p_wf->cbSize > p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX ) )
p_chk->strf.auds.p_wf->cbSize = p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX );
p_chk->strf.vids.p_bih = func(p_chk->strf.vids.p_bih);
static void * func(const void * p_chk->strf.vids.p_bih)
p_chk->strf.vids.p_bih = malloc( p_chk->common.i_chunk_size );
return p_chk->strf.vids.p_bih;
p_chk->strf.vids.p_bih = func(p_chk->strf.vids.p_bih);
if( p_chk->strf.vids.p_bih->biSize > p_chk->common.i_chunk_size )
p_chk->strf.vids.p_bih->biSize = p_chk->common.i_chunk_size;
if( p_chk->common.i_chunk_size - sizeof(BITMAPINFOHEADER) > 0 )
memcpy( &p_chk->strf.vids.p_bih[1], p_buff + 8 + sizeof(BITMAPINFOHEADER), p_chk->common.i_chunk_size -sizeof(BITMAPINFOHEADER) );
1

13879 CVE-2011-2588/vlc_media_player_0.9.9_CVE-2011-2588_libavi.c Buffer_Overflow_boundedcpy 385
p_chk->strf.auds.p_wf = malloc( __MAX( p_chk->common.i_chunk_size, sizeof( WAVEFORMATEX ) ) );
if( p_chk->strf.auds.p_wf->wFormatTag != WAVE_FORMAT_PCM && p_chk->common.i_chunk_size > sizeof( WAVEFORMATEX ) )
if( p_chk->strf.auds.p_wf->cbSize > p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX ) )
p_chk->strf.auds.p_wf->cbSize = p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX );
p_chk->strf.vids.p_bih = func(p_chk->strf.vids.p_bih);
static void * func(const void * p_chk->strf.vids.p_bih)
p_chk->strf.vids.p_bih = malloc( __MAX( p_chk->common.i_chunk_size,sizeof( *p_chk->strf.vids.p_bih ) ) );
return p_chk->strf.vids.p_bih;
p_chk->strf.vids.p_bih = func(p_chk->strf.vids.p_bih);
if( p_chk->strf.vids.p_bih->biSize > p_chk->common.i_chunk_size )
p_chk->strf.vids.p_bih->biSize = p_chk->common.i_chunk_size;
if( p_chk->common.i_chunk_size > sizeof(BITMAPINFOHEADER) )
memcpy( &p_chk->strf.vids.p_bih[1], p_buff + 8 + sizeof(BITMAPINFOHEADER), p_chk->common.i_chunk_size -sizeof(BITMAPINFOHEADER) );
0

13880 CVE-2011-2588/vlc_media_player_0.9.9_CVE-2011-2588_libavi.c Buffer_Overflow_boundedcpy 385
p_chk->strf.auds.p_wf = malloc( __MAX( p_chk->common.i_chunk_size, sizeof( WAVEFORMATEX ) ) );
if( p_chk->strf.auds.p_wf->wFormatTag != WAVE_FORMAT_PCM && p_chk->common.i_chunk_size > sizeof( WAVEFORMATEX ) )
if( p_chk->strf.auds.p_wf->cbSize > p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX ) )
p_chk->strf.auds.p_wf->cbSize = p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX );
p_chk->strf.vids.p_bih = func(&p_chk->strf.vids.p_bih);
static void * func(void * * ptr)
void * p_chk->strf.vids.p_bih =*ptr
p_chk->strf.vids.p_bih = malloc( p_chk->common.i_chunk_size );
return p_chk->strf.vids.p_bih;
p_chk->strf.vids.p_bih = func(&p_chk->strf.vids.p_bih)
if( p_chk->strf.vids.p_bih->biSize > p_chk->common.i_chunk_size )
p_chk->strf.vids.p_bih->biSize = p_chk->common.i_chunk_size;
if( p_chk->common.i_chunk_size - sizeof(BITMAPINFOHEADER) > 0 )
memcpy( &p_chk->strf.vids.p_bih[1], p_buff + 8 + sizeof(BITMAPINFOHEADER), p_chk->common.i_chunk_size -sizeof(BITMAPINFOHEADER) );
1

13881 CVE-2011-2588/vlc_media_player_0.9.9_CVE-2011-2588_libavi.c Buffer_Overflow_boundedcpy 385
p_chk->strf.auds.p_wf = malloc( __MAX( p_chk->common.i_chunk_size, sizeof( WAVEFORMATEX ) ) );
if( p_chk->strf.auds.p_wf->wFormatTag != WAVE_FORMAT_PCM && p_chk->common.i_chunk_size > sizeof( WAVEFORMATEX ) )
if( p_chk->strf.auds.p_wf->cbSize > p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX ) )
p_chk->strf.auds.p_wf->cbSize = p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX );
p_chk->strf.vids.p_bih = func(&p_chk->strf.vids.p_bih);
static void * func(void * * ptr)
void * p_chk->strf.vids.p_bih =*ptr
p_chk->strf.vids.p_bih = malloc( __MAX( p_chk->common.i_chunk_size,sizeof( *p_chk->strf.vids.p_bih ) ) );
return p_chk->strf.vids.p_bih;
p_chk->strf.vids.p_bih = func(&p_chk->strf.vids.p_bih)
if( p_chk->strf.vids.p_bih->biSize > p_chk->common.i_chunk_size )
p_chk->strf.vids.p_bih->biSize = p_chk->common.i_chunk_size;
if( p_chk->common.i_chunk_size > sizeof(BITMAPINFOHEADER) )
memcpy( &p_chk->strf.vids.p_bih[1], p_buff + 8 + sizeof(BITMAPINFOHEADER), p_chk->common.i_chunk_size -sizeof(BITMAPINFOHEADER) );
0

13882 CVE-2011-2588/vlc_media_player_0.9.9_CVE-2011-2588_libavi.c Buffer_Overflow_boundedcpy 385
void (*funcPtr) = badSource;
p_chk->strf.auds.p_wf = malloc( __MAX( p_chk->common.i_chunk_size, sizeof( WAVEFORMATEX ) ) );
if( p_chk->strf.auds.p_wf->wFormatTag != WAVE_FORMAT_PCM && p_chk->common.i_chunk_size > sizeof( WAVEFORMATEX ) )
if( p_chk->strf.auds.p_wf->cbSize > p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX ) )
p_chk->strf.auds.p_wf->cbSize = p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX );
funcPtr(p_chk->strf.vids.p_bih)
void badSource(void * p_chk->strf.vids.p_bih)
p_chk->strf.vids.p_bih = malloc( p_chk->common.i_chunk_size );
if( p_chk->strf.vids.p_bih->biSize > p_chk->common.i_chunk_size )
p_chk->strf.vids.p_bih->biSize = p_chk->common.i_chunk_size;
if( p_chk->common.i_chunk_size - sizeof(BITMAPINFOHEADER) > 0 )
memcpy( &p_chk->strf.vids.p_bih[1], p_buff + 8 + sizeof(BITMAPINFOHEADER), p_chk->common.i_chunk_size -sizeof(BITMAPINFOHEADER) );
1

13883 CVE-2011-2588/vlc_media_player_0.9.9_CVE-2011-2588_libavi.c Buffer_Overflow_boundedcpy 385
void (*funcPtr) = badSource;
p_chk->strf.auds.p_wf = malloc( __MAX( p_chk->common.i_chunk_size, sizeof( WAVEFORMATEX ) ) );
if( p_chk->strf.auds.p_wf->wFormatTag != WAVE_FORMAT_PCM && p_chk->common.i_chunk_size > sizeof( WAVEFORMATEX ) )
if( p_chk->strf.auds.p_wf->cbSize > p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX ) )
p_chk->strf.auds.p_wf->cbSize = p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX );
funcPtr(p_chk->strf.vids.p_bih)
void badSource(void * p_chk->strf.vids.p_bih)
p_chk->strf.vids.p_bih = malloc( __MAX( p_chk->common.i_chunk_size,sizeof( *p_chk->strf.vids.p_bih ) ) );
if( p_chk->strf.vids.p_bih->biSize > p_chk->common.i_chunk_size )
p_chk->strf.vids.p_bih->biSize = p_chk->common.i_chunk_size;
if( p_chk->common.i_chunk_size > sizeof(BITMAPINFOHEADER) )
memcpy( &p_chk->strf.vids.p_bih[1], p_buff + 8 + sizeof(BITMAPINFOHEADER), p_chk->common.i_chunk_size -sizeof(BITMAPINFOHEADER) );
0

13884 CVE-2011-2588/vlc_media_player_0.9.9_CVE-2011-2588_libavi.c Buffer_Overflow_boundedcpy 385
p_chk->strf.auds.p_wf = malloc( __MAX( p_chk->common.i_chunk_size, sizeof( WAVEFORMATEX ) ) );
if( p_chk->strf.auds.p_wf->wFormatTag != WAVE_FORMAT_PCM && p_chk->common.i_chunk_size > sizeof( WAVEFORMATEX ) )
if( p_chk->strf.auds.p_wf->cbSize > p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX ) )
p_chk->strf.auds.p_wf->cbSize = p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX );
p_chk->strf.vids.p_bih = malloc( p_chk->common.i_chunk_size );
void * datacopy = p_chk->strf.vids.p_bih;
viod *p_chk->strf.vids.p_bih = datacopy;
if( p_chk->strf.vids.p_bih->biSize > p_chk->common.i_chunk_size )
p_chk->strf.vids.p_bih->biSize = p_chk->common.i_chunk_size;
if( p_chk->common.i_chunk_size - sizeof(BITMAPINFOHEADER) > 0 )
memcpy( &p_chk->strf.vids.p_bih[1], p_buff + 8 + sizeof(BITMAPINFOHEADER), p_chk->common.i_chunk_size -sizeof(BITMAPINFOHEADER) );
1

13885 CVE-2011-2588/vlc_media_player_0.9.9_CVE-2011-2588_libavi.c Buffer_Overflow_boundedcpy 385
p_chk->strf.auds.p_wf = malloc( __MAX( p_chk->common.i_chunk_size, sizeof( WAVEFORMATEX ) ) );
if( p_chk->strf.auds.p_wf->wFormatTag != WAVE_FORMAT_PCM && p_chk->common.i_chunk_size > sizeof( WAVEFORMATEX ) )
if( p_chk->strf.auds.p_wf->cbSize > p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX ) )
p_chk->strf.auds.p_wf->cbSize = p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX );
p_chk->strf.vids.p_bih = malloc( __MAX( p_chk->common.i_chunk_size,sizeof( *p_chk->strf.vids.p_bih ) ) );
void * datacopy = p_chk->strf.vids.p_bih;
viod *p_chk->strf.vids.p_bih = datacopy;
if( p_chk->strf.vids.p_bih->biSize > p_chk->common.i_chunk_size )
p_chk->strf.vids.p_bih->biSize = p_chk->common.i_chunk_size;
if( p_chk->common.i_chunk_size > sizeof(BITMAPINFOHEADER) )
memcpy( &p_chk->strf.vids.p_bih[1], p_buff + 8 + sizeof(BITMAPINFOHEADER), p_chk->common.i_chunk_size -sizeof(BITMAPINFOHEADER) );
0

13886 CVE-2011-2588/vlc_media_player_0.9.9_CVE-2011-2588_libavi.c Buffer_Overflow_boundedcpy 385
p_chk->strf.auds.p_wf = malloc( __MAX( p_chk->common.i_chunk_size, sizeof( WAVEFORMATEX ) ) );
if( p_chk->strf.auds.p_wf->wFormatTag != WAVE_FORMAT_PCM && p_chk->common.i_chunk_size > sizeof( WAVEFORMATEX ) )
if( p_chk->strf.auds.p_wf->cbSize > p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX ) )
p_chk->strf.auds.p_wf->cbSize = p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX );
p_chk->strf.vids.p_bih = malloc( p_chk->common.i_chunk_size );
if( p_chk->strf.vids.p_bih->biSize > p_chk->common.i_chunk_size )
p_chk->strf.vids.p_bih->biSize = p_chk->common.i_chunk_size;
if( p_chk->common.i_chunk_size - sizeof(BITMAPINFOHEADER) > 0 )
instead = &p_chk->strf.vids.p_bih[1]
memcpy( instaed, p_buff + 8 + sizeof(BITMAPINFOHEADER), p_chk->common.i_chunk_size -sizeof(BITMAPINFOHEADER) );
1

13887 CVE-2011-2588/vlc_media_player_0.9.9_CVE-2011-2588_libavi.c Buffer_Overflow_boundedcpy 385
p_chk->strf.auds.p_wf = malloc( __MAX( p_chk->common.i_chunk_size, sizeof( WAVEFORMATEX ) ) );
if( p_chk->strf.auds.p_wf->wFormatTag != WAVE_FORMAT_PCM && p_chk->common.i_chunk_size > sizeof( WAVEFORMATEX ) )
if( p_chk->strf.auds.p_wf->cbSize > p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX ) )
p_chk->strf.auds.p_wf->cbSize = p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX );
p_chk->strf.vids.p_bih = malloc( __MAX( p_chk->common.i_chunk_size,sizeof( *p_chk->strf.vids.p_bih ) ) );
if( p_chk->strf.vids.p_bih->biSize > p_chk->common.i_chunk_size )
p_chk->strf.vids.p_bih->biSize = p_chk->common.i_chunk_size;
if( p_chk->common.i_chunk_size > sizeof(BITMAPINFOHEADER) )
instead = &p_chk->strf.vids.p_bih[1]
memcpy( instead, p_buff + 8 + sizeof(BITMAPINFOHEADER), p_chk->common.i_chunk_size -sizeof(BITMAPINFOHEADER) );
0

13888 CVE-2011-2588/vlc_media_player_0.9.9_CVE-2011-2588_libavi.c Buffer_Overflow_boundedcpy 385
p_chk->strf.auds.p_wf = malloc( __MAX( p_chk->common.i_chunk_size, sizeof( WAVEFORMATEX ) ) );
if( p_chk->strf.auds.p_wf->wFormatTag != WAVE_FORMAT_PCM && p_chk->common.i_chunk_size > sizeof( WAVEFORMATEX ) )
if( p_chk->strf.auds.p_wf->cbSize > p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX ) )
p_chk->strf.vids.p_bih = malloc( p_chk->common.i_chunk_size );
p_chk->strf.auds.p_wf->cbSize = p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX );
if( p_chk->strf.vids.p_bih->biSize > p_chk->common.i_chunk_size )
p_chk->strf.vids.p_bih->biSize = p_chk->common.i_chunk_size;
if( p_chk->common.i_chunk_size - sizeof(BITMAPINFOHEADER) > 0 )
memcpy( &p_chk->strf.vids.p_bih[1], p_buff + 8 + sizeof(BITMAPINFOHEADER), p_chk->common.i_chunk_size -sizeof(BITMAPINFOHEADER) );
1

13889 CVE-2011-2588/vlc_media_player_0.9.9_CVE-2011-2588_libavi.c Buffer_Overflow_boundedcpy 385
p_chk->strf.auds.p_wf = malloc( __MAX( p_chk->common.i_chunk_size, sizeof( WAVEFORMATEX ) ) );
if( p_chk->strf.auds.p_wf->wFormatTag != WAVE_FORMAT_PCM && p_chk->common.i_chunk_size > sizeof( WAVEFORMATEX ) )
if( p_chk->strf.auds.p_wf->cbSize > p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX ) )
p_chk->strf.vids.p_bih = malloc( __MAX( p_chk->common.i_chunk_size,sizeof( *p_chk->strf.vids.p_bih ) ) );
p_chk->strf.auds.p_wf->cbSize = p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX );
if( p_chk->strf.vids.p_bih->biSize > p_chk->common.i_chunk_size )
p_chk->strf.vids.p_bih->biSize = p_chk->common.i_chunk_size;
if( p_chk->common.i_chunk_size > sizeof(BITMAPINFOHEADER) )
memcpy( &p_chk->strf.vids.p_bih[1], p_buff + 8 + sizeof(BITMAPINFOHEADER), p_chk->common.i_chunk_size -sizeof(BITMAPINFOHEADER) );
0

13890 CVE-2011-2588/vlc_media_player_0.9.9_CVE-2011-2588_libavi.c Buffer_Overflow_boundedcpy 385
p_chk->strf.auds.p_wf = malloc( __MAX( p_chk->common.i_chunk_size, sizeof( WAVEFORMATEX ) ) );
if( p_chk->strf.auds.p_wf->wFormatTag != WAVE_FORMAT_PCM && p_chk->common.i_chunk_size > sizeof( WAVEFORMATEX ) )
if( p_chk->strf.auds.p_wf->cbSize > p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX ) )
p_chk->strf.auds.p_wf->cbSize = p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX );
void * dataarry[5];
dataarry[2] = p_chk->strf.vids.p_bih;
p_chk->strf.vids.p_bih = badsource(dataarray)
void badsource(void * dataarray[2])
void * p_chk->strf.vids.p_bih = dataarray[2];
p_chk->strf.vids.p_bih = malloc( p_chk->common.i_chunk_size );
return p_chk->strf.vids.p_bih;
if( p_chk->strf.vids.p_bih->biSize > p_chk->common.i_chunk_size )
p_chk->strf.vids.p_bih->biSize = p_chk->common.i_chunk_size;
if( p_chk->common.i_chunk_size - sizeof(BITMAPINFOHEADER) > 0 )
memcpy( &p_chk->strf.vids.p_bih[1], p_buff + 8 + sizeof(BITMAPINFOHEADER), p_chk->common.i_chunk_size -sizeof(BITMAPINFOHEADER) );
1

13891 CVE-2011-2588/vlc_media_player_0.9.9_CVE-2011-2588_libavi.c Buffer_Overflow_boundedcpy 385
p_chk->strf.auds.p_wf = malloc( __MAX( p_chk->common.i_chunk_size, sizeof( WAVEFORMATEX ) ) );
if( p_chk->strf.auds.p_wf->wFormatTag != WAVE_FORMAT_PCM && p_chk->common.i_chunk_size > sizeof( WAVEFORMATEX ) )
if( p_chk->strf.auds.p_wf->cbSize > p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX ) )
p_chk->strf.auds.p_wf->cbSize = p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX );
void * dataarry[5];
dataarry[2] = p_chk->strf.vids.p_bih;
p_chk->strf.vids.p_bih = badsource(dataarray)
void badsource(void * dataarray[2])
void * p_chk->strf.vids.p_bih = dataarray[2];
p_chk->strf.vids.p_bih = malloc( __MAX( p_chk->common.i_chunk_size,sizeof( *p_chk->strf.vids.p_bih ) ) );
return p_chk->strf.vids.p_bih;
if( p_chk->strf.vids.p_bih->biSize > p_chk->common.i_chunk_size )
p_chk->strf.vids.p_bih->biSize = p_chk->common.i_chunk_size;
if( p_chk->common.i_chunk_size > sizeof(BITMAPINFOHEADER) )
memcpy( &p_chk->strf.vids.p_bih[1], p_buff + 8 + sizeof(BITMAPINFOHEADER), p_chk->common.i_chunk_size -sizeof(BITMAPINFOHEADER) );
0

13892 CVE-2011-2588/vlc_media_player_0.9.9_CVE-2011-2588_libavi.c Buffer_Overflow_boundedcpy 385
p_chk->strf.auds.p_wf = malloc( __MAX( p_chk->common.i_chunk_size, sizeof( WAVEFORMATEX ) ) );
if( p_chk->strf.auds.p_wf->wFormatTag != WAVE_FORMAT_PCM && p_chk->common.i_chunk_size > sizeof( WAVEFORMATEX ) )
if( p_chk->strf.auds.p_wf->cbSize > p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX ) )
p_chk->strf.auds.p_wf->cbSize = p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX );
unionType myUnion;
myUnion.unionFirst = p_chk->strf.vids.p_bih;
void * p_chk->strf.vids.p_bih = myUnion.unionSecond;
p_chk->strf.vids.p_bih = malloc( p_chk->common.i_chunk_size );
if( p_chk->strf.vids.p_bih->biSize > p_chk->common.i_chunk_size )
p_chk->strf.vids.p_bih->biSize = p_chk->common.i_chunk_size;
if( p_chk->common.i_chunk_size - sizeof(BITMAPINFOHEADER) > 0 )
memcpy( &p_chk->strf.vids.p_bih[1], p_buff + 8 + sizeof(BITMAPINFOHEADER), p_chk->common.i_chunk_size -sizeof(BITMAPINFOHEADER) );
1

13893 CVE-2011-2588/vlc_media_player_0.9.9_CVE-2011-2588_libavi.c Buffer_Overflow_boundedcpy 385
p_chk->strf.auds.p_wf = malloc( __MAX( p_chk->common.i_chunk_size, sizeof( WAVEFORMATEX ) ) );
if( p_chk->strf.auds.p_wf->wFormatTag != WAVE_FORMAT_PCM && p_chk->common.i_chunk_size > sizeof( WAVEFORMATEX ) )
if( p_chk->strf.auds.p_wf->cbSize > p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX ) )
p_chk->strf.auds.p_wf->cbSize = p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX );
unionType myUnion;
myUnion.unionFirst = p_chk->strf.vids.p_bih;
void * p_chk->strf.vids.p_bih = myUnion.unionSecond;
p_chk->strf.vids.p_bih = malloc( __MAX( p_chk->common.i_chunk_size,sizeof( *p_chk->strf.vids.p_bih ) ) );
if( p_chk->strf.vids.p_bih->biSize > p_chk->common.i_chunk_size )
p_chk->strf.vids.p_bih->biSize = p_chk->common.i_chunk_size;
if( p_chk->common.i_chunk_size > sizeof(BITMAPINFOHEADER) )
memcpy( &p_chk->strf.vids.p_bih[1], p_buff + 8 + sizeof(BITMAPINFOHEADER), p_chk->common.i_chunk_size -sizeof(BITMAPINFOHEADER) );
0

13894 CVE-2011-2588/vlc_media_player_0.9.9_CVE-2011-2588_libavi.c Buffer_Overflow_boundedcpy 385
p_chk->strf.auds.p_wf = malloc( __MAX( p_chk->common.i_chunk_size, sizeof( WAVEFORMATEX ) ) );
if( p_chk->strf.auds.p_wf->wFormatTag != WAVE_FORMAT_PCM && p_chk->common.i_chunk_size > sizeof( WAVEFORMATEX ) )
if( p_chk->strf.auds.p_wf->cbSize > p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX ) )
p_chk->strf.auds.p_wf->cbSize = p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX );
structType myStruct;
myStruct.structFirst = p_chk->strf.vids.p_bih;
p_chk->strf.vids.p_bih = badSource(myStruct)
void badSource(myStruct);
void * p_chk->strf.vids.p_bih = myUnion.unionSecond;
p_chk->strf.vids.p_bih = malloc( p_chk->common.i_chunk_size );
return p_chk->strf.vids.p_bih
if( p_chk->strf.vids.p_bih->biSize > p_chk->common.i_chunk_size )
p_chk->strf.vids.p_bih->biSize = p_chk->common.i_chunk_size;
if( p_chk->common.i_chunk_size - sizeof(BITMAPINFOHEADER) > 0 )
memcpy( &p_chk->strf.vids.p_bih[1], p_buff + 8 + sizeof(BITMAPINFOHEADER), p_chk->common.i_chunk_size -sizeof(BITMAPINFOHEADER) );
1

13895 CVE-2011-2588/vlc_media_player_0.9.9_CVE-2011-2588_libavi.c Buffer_Overflow_boundedcpy 385
p_chk->strf.auds.p_wf = malloc( __MAX( p_chk->common.i_chunk_size, sizeof( WAVEFORMATEX ) ) );
if( p_chk->strf.auds.p_wf->wFormatTag != WAVE_FORMAT_PCM && p_chk->common.i_chunk_size > sizeof( WAVEFORMATEX ) )
if( p_chk->strf.auds.p_wf->cbSize > p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX ) )
p_chk->strf.auds.p_wf->cbSize = p_chk->common.i_chunk_size - sizeof( WAVEFORMATEX );
structType myStruct;
myStruct.structFirst = p_chk->strf.vids.p_bih;
p_chk->strf.vids.p_bih = badSource(myStruct)
void badSource(myStruct);
void * p_chk->strf.vids.p_bih = myUnion.unionSecond;
p_chk->strf.vids.p_bih = malloc( __MAX( p_chk->common.i_chunk_size,sizeof( *p_chk->strf.vids.p_bih ) ) );
return p_chk->strf.vids.p_bih
if( p_chk->strf.vids.p_bih->biSize > p_chk->common.i_chunk_size )
p_chk->strf.vids.p_bih->biSize = p_chk->common.i_chunk_size;
if( p_chk->common.i_chunk_size > sizeof(BITMAPINFOHEADER) )
memcpy( &p_chk->strf.vids.p_bih[1], p_buff + 8 + sizeof(BITMAPINFOHEADER), p_chk->common.i_chunk_size -sizeof(BITMAPINFOHEADER) );
0

