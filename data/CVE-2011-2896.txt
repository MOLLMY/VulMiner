3 CVE-2011-2896/cups_1.4.2_CVE-2011-2896_image-gif.c inputfunc 100
fread(buf, 13, 1, fp);
img->xsize = (buf[7] << 8) | buf[6];
img->ysize = (buf[9] << 8) | buf[8];
ncolors    = 2 << (buf[10] & 0x07);
if (buf[10] & GIF_COLORMAP)
if (gif_read_cmap(fp, ncolors, cmap, &gray))
switch (getc(fp))
fclose(fp);
buf[0] = getc(fp);
if (buf[0] == 0xf9)
gif_get_block(fp, buf);
fread(buf, 9, 1, fp);
if (buf[8] & GIF_COLORMAP)
ncolors = 2 << (buf[8] & 0x07);
if (gif_read_cmap(fp, ncolors, cmap, &gray))
img->xsize = (buf[5] << 8) | buf[4];
img->ysize = (buf[7] << 8) | buf[6];
if (img->xsize == 0 || img->ysize == 0)
img->xsize, img->ysize);
fprintf(stderr, "DEBUG: Bad GIF image dimensions: %dx%d\n",
fclose(fp);
i = gif_read_image(fp, img, cmap, buf[8] & GIF_INTERLACE);
int interlace);
i = gif_read_image(fp, img, cmap, buf[8] & GIF_INTERLACE);
static int	gif_read_cmap(FILE *fp, int ncolors, gif_cmap_t cmap,
fclose(fp);
fclose(fp);
for (i = ncolors - 1; i >= 0; i --)
cupsImageWhiteToCMYK(cmap[i], cmap[i], 1);
for (i = ncolors - 1; i >= 0; i --)
cupsImageWhiteToCMY(cmap[i], cmap[i], 1);
for (i = ncolors - 1; i >= 0; i --)
cupsImageWhiteToBlack(cmap[i], cmap[i], 1);
for (i = ncolors - 1; i >= 0; i --)
cupsImageWhiteToRGB(cmap[i], cmap[i], 1);
for (i = ncolors - 1; i >= 0; i --)
cupsImageRGBAdjust(cmap[i], 1, saturation, hue);
for (i = ncolors - 1; i >= 0; i --)
cupsImageRGBToCMYK(cmap[i], cmap[i], 1);
for (i = ncolors - 1; i >= 0; i --)
cupsImageRGBToCMY(cmap[i], cmap[i], 1);
for (i = ncolors - 1; i >= 0; i --)
cupsImageRGBToBlack(cmap[i], cmap[i], 1);
for (i = ncolors - 1; i >= 0; i --)
cupsImageRGBToWhite(cmap[i], cmap[i], 1);
for (i = ncolors - 1; i >= 0; i --)
cupsImageRGBToRGB(cmap[i], cmap[i], 1);
for (i = ncolors - 1; i >= 0; i --)
cupsImageLut(cmap[i], bpp, lut);
static int	gif_read_image(FILE *fp, cups_image_t *img, gif_cmap_t cmap,
fclose(fp);
static int	gif_get_block(FILE *fp, unsigned char *buffer);
if (buf[0] & 1)
transparent = buf[3];
if (transparent >= 0)
0

279 CVE-2011-2896/cups_1.4.2_CVE-2011-2896_image-gif.c cfunc 121
FILE            *fp,
fread(buf, 13, 1, fp);
if (gif_read_cmap(fp, ncolors, cmap, &gray))
fclose(fp);
buf[0] = getc(fp);
gif_get_block(fp, buf);
while (gif_get_block(fp, buf) != 0);
static int	gif_read_cmap(FILE *fp, int ncolors, gif_cmap_t cmap,
fclose(fp);
static int	gif_get_block(FILE *fp, unsigned char *buffer);
fclose(fp);
while (gif_get_block(fp, buf) != 0);
0

282 CVE-2011-2896/cups_1.4.2_CVE-2011-2896_image-gif.c inputfunc 125
buf[0] = getc(fp);
while (gif_get_block(fp, buf) != 0);
static int	gif_get_block(FILE *fp, unsigned char *buffer);
switch (getc(fp))
fclose(fp);
fread(buf, 9, 1, fp);
if (buf[8] & GIF_COLORMAP)
ncolors = 2 << (buf[8] & 0x07);
if (gif_read_cmap(fp, ncolors, cmap, &gray))
img->xsize = (buf[5] << 8) | buf[4];
img->ysize = (buf[7] << 8) | buf[6];
if (img->xsize == 0 || img->ysize == 0)
img->xsize, img->ysize);
fprintf(stderr, "DEBUG: Bad GIF image dimensions: %dx%d\n",
fclose(fp);
i = gif_read_image(fp, img, cmap, buf[8] & GIF_INTERLACE);
int interlace);
i = gif_read_image(fp, img, cmap, buf[8] & GIF_INTERLACE);
static int	gif_read_cmap(FILE *fp, int ncolors, gif_cmap_t cmap,
fclose(fp);
for (i = ncolors - 1; i >= 0; i --)
cupsImageWhiteToCMYK(cmap[i], cmap[i], 1);
for (i = ncolors - 1; i >= 0; i --)
cupsImageWhiteToCMY(cmap[i], cmap[i], 1);
for (i = ncolors - 1; i >= 0; i --)
cupsImageWhiteToBlack(cmap[i], cmap[i], 1);
for (i = ncolors - 1; i >= 0; i --)
cupsImageWhiteToRGB(cmap[i], cmap[i], 1);
for (i = ncolors - 1; i >= 0; i --)
cupsImageRGBAdjust(cmap[i], 1, saturation, hue);
for (i = ncolors - 1; i >= 0; i --)
cupsImageRGBToCMYK(cmap[i], cmap[i], 1);
for (i = ncolors - 1; i >= 0; i --)
cupsImageRGBToCMY(cmap[i], cmap[i], 1);
for (i = ncolors - 1; i >= 0; i --)
cupsImageRGBToBlack(cmap[i], cmap[i], 1);
for (i = ncolors - 1; i >= 0; i --)
cupsImageRGBToWhite(cmap[i], cmap[i], 1);
for (i = ncolors - 1; i >= 0; i --)
cupsImageRGBToRGB(cmap[i], cmap[i], 1);
for (i = ncolors - 1; i >= 0; i --)
cupsImageLut(cmap[i], bpp, lut);
static int	gif_read_image(FILE *fp, cups_image_t *img, gif_cmap_t cmap,
fclose(fp);
0

317 CVE-2011-2896/cups_1.4.2_CVE-2011-2896_image-gif.c cfunc 470
cups_image_t *img,
bpp       = cupsImageGetDepth(img);
pixels    = calloc(bpp, img->xsize);
free(pixels);
0

318 CVE-2011-2896/cups_1.4.2_CVE-2011-2896_image-gif.c cppfunc 470
cups_image_t *img,
bpp       = cupsImageGetDepth(img);
pixels    = calloc(bpp, img->xsize);
free(pixels);
0

429 CVE-2011-2896/cups_1.4.2_CVE-2011-2896_image-gif.c cfunc 110
FILE            *fp,
fread(buf, 13, 1, fp);
if (gif_read_cmap(fp, ncolors, cmap, &gray))
static int	gif_read_cmap(FILE *fp, int ncolors, gif_cmap_t cmap,
fclose(fp);
0

470 CVE-2011-2896/cups_1.4.2_CVE-2011-2896_image-gif.c cfunc 243
FILE            *fp,
fread(buf, 13, 1, fp);
if (gif_read_cmap(fp, ncolors, cmap, &gray))
buf[0] = getc(fp);
gif_get_block(fp, buf);
while (gif_get_block(fp, buf) != 0);
fread(buf, 9, 1, fp);
if (gif_read_cmap(fp, ncolors, cmap, &gray))
fclose(fp);
static int	gif_read_cmap(FILE *fp, int ncolors, gif_cmap_t cmap,
fread(buf, 9, 1, fp);
fclose(fp);
static int	gif_get_block(FILE *fp, unsigned char *buffer);
while (gif_get_block(fp, buf) != 0);
fread(buf, 9, 1, fp);
fclose(fp);
0

471 CVE-2011-2896/cups_1.4.2_CVE-2011-2896_image-gif.c cfunc 242
FILE            *fp,
unsigned char	buf[1024];
fread(buf, 13, 1, fp);
img->xsize = (buf[7] << 8) | buf[6];
img->ysize = (buf[9] << 8) | buf[8];
if (gif_read_cmap(fp, ncolors, cmap, &gray))
buf[0] = getc(fp);
gif_get_block(fp, buf);
while (gif_get_block(fp, buf) != 0);
fread(buf, 9, 1, fp);
img->xsize = (buf[5] << 8) | buf[4];
img->ysize = (buf[7] << 8) | buf[6];
img->xsize = (buf[5] << 8) | buf[4];
img->ysize = (buf[7] << 8) | buf[6];
img->xsize, img->ysize);
static int	gif_read_cmap(FILE *fp, int ncolors, gif_cmap_t cmap,
fread(buf, 9, 1, fp);
img->xsize = (buf[5] << 8) | buf[4];
img->ysize = (buf[7] << 8) | buf[6];
img->xsize, img->ysize);
static int	gif_get_block(FILE *fp, unsigned char *buffer);
while (gif_get_block(fp, buf) != 0);
fread(buf, 9, 1, fp);
img->xsize = (buf[5] << 8) | buf[4];
img->ysize = (buf[7] << 8) | buf[6];
img->xsize, img->ysize);
static int	gif_get_block(FILE *fp, unsigned char *buffer);
fread(buf, 9, 1, fp);
img->xsize = (buf[5] << 8) | buf[4];
img->xsize, img->ysize);
0

478 CVE-2011-2896/cups_1.4.2_CVE-2011-2896_image-gif.c cfunc 248
FILE            *fp,
fread(buf, 13, 1, fp);
if (gif_read_cmap(fp, ncolors, cmap, &gray))
buf[0] = getc(fp);
gif_get_block(fp, buf);
while (gif_get_block(fp, buf) != 0);
fread(buf, 9, 1, fp);
if (gif_read_cmap(fp, ncolors, cmap, &gray))
i = gif_read_image(fp, img, cmap, buf[8] & GIF_INTERLACE);
static int	gif_read_cmap(FILE *fp, int ncolors, gif_cmap_t cmap,
fread(buf, 9, 1, fp);
i = gif_read_image(fp, img, cmap, buf[8] & GIF_INTERLACE);
static int	gif_read_image(FILE *fp, cups_image_t *img, gif_cmap_t cmap,
fclose(fp);
static int	gif_get_block(FILE *fp, unsigned char *buffer);
while (gif_get_block(fp, buf) != 0);
fread(buf, 9, 1, fp);
i = gif_read_image(fp, img, cmap, buf[8] & GIF_INTERLACE);
static int	gif_get_block(FILE *fp, unsigned char *buffer);
fread(buf, 9, 1, fp);
i = gif_read_image(fp, img, cmap, buf[8] & GIF_INTERLACE);
0

514 CVE-2011-2896/cups_1.4.2_CVE-2011-2896_image-gif.c cfunc 146
FILE            *fp,
fread(buf, 13, 1, fp);
if (gif_read_cmap(fp, ncolors, cmap, &gray))
buf[0] = getc(fp);
gif_get_block(fp, buf);
while (gif_get_block(fp, buf) != 0);
fread(buf, 9, 1, fp);
if (gif_read_cmap(fp, ncolors, cmap, &gray))
static int	gif_get_block(FILE *fp, unsigned char *buffer);
while (gif_get_block(fp, buf) != 0);
fread(buf, 9, 1, fp);
if (gif_read_cmap(fp, ncolors, cmap, &gray))
static int	gif_read_cmap(FILE *fp, int ncolors, gif_cmap_t cmap,
fread(buf, 9, 1, fp);
if (gif_read_cmap(fp, ncolors, cmap, &gray))
fclose(fp);
0

550 CVE-2011-2896/cups_1.4.2_CVE-2011-2896_image-gif.c cfunc 517
cups_image_t *img,
bpp       = cupsImageGetDepth(img);
pixels    = calloc(bpp, img->xsize);
_cupsImagePutRow(img, 0, ypos, img->xsize, pixels);
free(pixels);
0

551 CVE-2011-2896/cups_1.4.2_CVE-2011-2896_image-gif.c cppfunc 517
cups_image_t *img,
bpp       = cupsImageGetDepth(img);
pixels    = calloc(bpp, img->xsize);
_cupsImagePutRow(img, 0, ypos, img->xsize, pixels);
free(pixels);
0

569 CVE-2011-2896/cups_1.4.2_CVE-2011-2896_image-gif.c inputfunc 270
if ((count = getc(fp)) == EOF)
else if (count == 0)
else if (fread(buf, 1, count, fp) < count)
return (count);
0

13596 CVE-2011-2896/cups_1.4.2_CVE-2011-2896_image-gif.c Buffer_Overflow_Indexes 463
static int
gif_read_image(FILE         *fp,
cups_image_t *img,
gif_cmap_t   cmap,
int          interlace)
unsigned char		code_size;
code_size = getc(fp);
if (gif_read_lzw(fp, 1, code_size) < 0)
static int gif_read_lzw(FILE *fp,
int  first_time,
int  input_code_size)
int  input_code_size)
int set_code_size;
set_code_size = input_code_size;
clear_code    = 1 << set_code_size;
for (i = 0; i < clear_code; i ++){
table[0][i] = 0;
table[1][i] = i;
1

13610 CVE-2011-2896/cups_1.4.2_CVE-2011-2896_image-gif.c Buffer_Overflow_Indexes 463
static int	gif_read_image(FILE         *fp,
cups_image_t *img,
gif_cmap_t   cmap,
int          interlace)
unsigned char		code_size;
code_size = getc(fp);
if (gif_read_lzw(fp, 1, code_size) < 0)
static int gif_read_lzw(FILE *fp,
int  first_time,
int  input_code_size)
int  input_code_size)
int set_code_size;
set_code_size = input_code_size;
clear_code    = 1 << set_code_size;
for (i = 0; i < clear_code; i ++)
table[1][i] = i;
0

14030 CVE-2011-2896/cups_1.4.2_CVE-2011-2896_image-gif.c Buffer_Overflow_Indexes 463
static int	gif_read_image(FILE         *fp,
cups_image_t *img,
gif_cmap_t   cmap,
int          interlace)
unsigned char		code_size;
code_size = getc(fp);
if (gif_read_lzw(fp, 1, code_size) < 0)
static int gif_read_lzw(FILE *fp,
int  first_time,
int  input_code_size)
int  input_code_size)
int set_code_size;
set_code_size = input_code_size;
componet_len = 1 << set_code_size;
clear_code    = componet_len
for (i = 0; i < componet_len; i ++)
table[1][i] = i;
0

14044 CVE-2011-2896/cups_1.4.2_CVE-2011-2896_image-gif.c Buffer_Overflow_Indexes 463
static int
gif_read_image(FILE         *fp,
cups_image_t *img,
gif_cmap_t   cmap,
int          interlace)
unsigned char		code_size;
code_size = getc(fp);
if (gif_read_lzw(fp, 1, code_size) < 0)
static int gif_read_lzw(FILE *fp,
int  first_time,
int  input_code_size)
int set_code_size;
set_code_size = input_code_size;
componet_len = 1 << set_code_size;
clear_code    = componet_len;
for (i = 0; i < componet_len; i ++){
table[0][i] = 0;
table[1][i] = i;
1

14058 CVE-2011-2896/cups_1.4.2_CVE-2011-2896_image-gif.c Buffer_Overflow_Indexes 463
static int	gif_read_image(FILE         *fp,
cups_image_t *img,
gif_cmap_t   cmap,
int          interlace)
unsigned char		code_size;
code_size = getc(fp);
if (gif_read_lzw(fp, 1, code_size) < 0)
static int gif_read_lzw(FILE *fp,
int  first_time,
int  input_code_size)
int set_code_size;
set_code_size = input_code_size;
clear_code  = func(&set_code_size);
short func(short *sret_code_szie)
short temp = 1 << (*set_code_size);
return temp;
clear_code = func(&set_code_size);
for (i = 0; i < clear_code; i ++)
table[1][i] = i;
0

14072 CVE-2011-2896/cups_1.4.2_CVE-2011-2896_image-gif.c Buffer_Overflow_Indexes 463
static int
gif_read_image(FILE         *fp,
cups_image_t *img,
gif_cmap_t   cmap,
int          interlace)
unsigned char		code_size;
code_size = getc(fp);
if (gif_read_lzw(fp, 1, code_size) < 0)
static int gif_read_lzw(FILE *fp,
int  first_time,
int  input_code_size)
static short set_code_size, clear_code;
set_code_size = input_code_size;
clear_code  = func(&set_code_size);
short func(short *sret_code_szie)
short temp = 1 << (*set_code_size);
return temp;
clear_code = func(&set_code_size);
for (i = 0; i < clear_code; i ++){
table[0][i] = 0;
table[1][i] = i;}
1

14086 CVE-2011-2896/cups_1.4.2_CVE-2011-2896_image-gif.c Buffer_Overflow_Indexes 463
static int	gif_read_image(FILE         *fp,
cups_image_t *img,
gif_cmap_t   cmap,
int          interlace)
unsigned char		code_size;
code_size = getc(fp);
if (gif_read_lzw(fp, 1, code_size) < 0)
static int gif_read_lzw(FILE *fp,
int  first_time,
int  input_code_size)
structType myStruct;
int set_code_size;
set_code_size = input_code_size;
myStruct.structFirst = set_code_size;
clear_code  = func(myStruct);
short func(structType myStruct)
short set_code_size = myStruct.structFirst;
short temp = 1 << set_code_size;
return temp;
clear_code    = func(myStruct);
for (i = 0; i < clear_code; i ++)
table[1][i] = i;
0

14100 CVE-2011-2896/cups_1.4.2_CVE-2011-2896_image-gif.c Buffer_Overflow_Indexes 463
static int gif_read_image(FILE         *fp,
cups_image_t *img,
gif_cmap_t   cmap,
int          interlace)
unsigned char		code_size;
code_size = getc(fp);
if (gif_read_lzw(fp, 1, code_size) < 0)
static int gif_read_lzw(FILE *fp,
int  first_time,
int  input_code_size)
structType myStruct;
static short set_code_size, clear_code;
set_code_size = input_code_size;
myStruct.structFirst = set_code_size;
clear_code  = func(myStruct);
short func(structType myStruct)
short set_code_size = myStruct.structFirst;
short temp = 1 << set_code_size;
return temp;
clear_code    = func(myStruct);
for (i = 0; i < clear_code; i ++){
table[0][i] = 0;
table[1][i] = i;
1

14114 CVE-2011-2896/cups_1.4.2_CVE-2011-2896_image-gif.c Buffer_Overflow_Indexes 463
static int	gif_read_image(FILE         *fp,
cups_image_t *img,
gif_cmap_t   cmap,
int          interlace)
unsigned char		code_size;
code_size = getc(fp);
if (gif_read_lzw(fp, 1, code_size) < 0)
static int gif_read_lzw(FILE *fp,
int  first_time,
int  input_code_size)
unionType myUnion;
int set_code_size;
set_code_size = input_code_size;
myUnion.unionFirst = set_code_size;
clear_code  = func(myUnion);
short func(unionType myUnion)
short set_code_size = myUnion.unionSecond;
short temp = 1 << set_code_size;
return temp;
clear_code    = func(myUnion);
for (i = 0; i < clear_code; i ++)
table[1][i] = i;
0

14128 CVE-2011-2896/cups_1.4.2_CVE-2011-2896_image-gif.c Buffer_Overflow_Indexes 463
static int
gif_read_image(FILE         *fp,
cups_image_t *img,
gif_cmap_t   cmap,
int          interlace)
unsigned char		code_size;
code_size = getc(fp);
if (gif_read_lzw(fp, 1, code_size) < 0)
static int gif_read_lzw(FILE *fp,
int  first_time,
int  input_code_size)
unionType myUnion;
int set_code_size;
set_code_size = input_code_size;
myUnion.unionFirst = set_code_size;
clear_code  = func(myUnion);
short func(unionType myUnion)
short set_code_size = myUnion.unionSecond;
short temp = 1 << set_code_size;
return temp;
clear_code    = func(myUnion);
for (i = 0; i < clear_code; i ++){
table[0][i] = 0;
table[1][i] = i;
1

14142 CVE-2011-2896/cups_1.4.2_CVE-2011-2896_image-gif.c Buffer_Overflow_Indexes 463
static int	gif_read_image(FILE         *fp,
cups_image_t *img,
gif_cmap_t   cmap,
int          interlace)
unsigned char		code_size;
code_size = getc(fp);
if (gif_read_lzw(fp, 1, code_size) < 0)
static int gif_read_lzw(FILE *fp,
int  first_time,
int  input_code_size)
int set_code_size;
set_code_size = input_code_size;
clear_code  = func(int set_code_size);
int func(int sret_code_szie)
int temp = 1 << set_code_size;
return temp;
clear_code    = func(int set_code_size);
for (i = 0; i < clear_code; i ++)
table[1][i] = i;
0

14156 CVE-2011-2896/cups_1.4.2_CVE-2011-2896_image-gif.c Buffer_Overflow_Indexes 463
short (*funcPtr))(short ) = badSource;
static int
gif_read_image(FILE         *fp,
cups_image_t *img,
gif_cmap_t   cmap,
int          interlace)
unsigned char		code_size;
code_size = getc(fp);
if (gif_read_lzw(fp, 1, code_size) < 0)
static int gif_read_lzw(FILE *fp,
int  first_time,
int  input_code_size)
static short set_code_size, clear_code;
set_code_size = input_code_size;
clear_code  = funcPtr(short set_code_size);
short badSource(short sret_code_szie)
short temp = 1 << set_code_size;
return temp;
clear_code    = funcPtr(short set_code_size);
for (i = 0; i < clear_code; i ++){
table[0][i] = 0;
table[1][i] = i;
1

14170 CVE-2011-2896/cups_1.4.2_CVE-2011-2896_image-gif.c Buffer_Overflow_Indexes 463
static int	gif_read_image(FILE         *fp,
cups_image_t *img,
gif_cmap_t   cmap,
int          interlace)
unsigned char		code_size;
code_size = getc(fp);
if (gif_read_lzw(fp, 1, code_size) < 0)
static int gif_read_lzw(FILE *fp,
int  first_time,
int  input_code_size)
int set_code_size;
set_code_size = input_code_size;
clear_code = func(set_code_size);
int func(int set_code_size)
int temp = 1 << set_code_size;
return temp;
clear_code    = func(set_code_size);
for (i = 0; i < clear_code; i ++)
table[1][i] = i;
0

14184 CVE-2011-2896/cups_1.4.2_CVE-2011-2896_image-gif.c Buffer_Overflow_Indexes 463
static int
gif_read_image(FILE         *fp,
cups_image_t *img,
gif_cmap_t   cmap,
int          interlace)
unsigned char		code_size;
code_size = getc(fp);
if (gif_read_lzw(fp, 1, code_size) < 0)
static int gif_read_lzw(FILE *fp,
int  first_time,
int  input_code_size)
static short set_code_size, clear_code;
set_code_size = input_code_size;
clear_code  = func(set_code_size);
short func(short set_code_size)
short temp = 1 << set_code_size;
return temp;
clear_code    = func(set_code_size);
for (i = 0; i < clear_code; i ++){
table[0][i] = 0;
table[1][i] = i;
1

14198 CVE-2011-2896/cups_1.4.2_CVE-2011-2896_image-gif.c Buffer_Overflow_Indexes 463
static int	gif_read_image(FILE         *fp,
cups_image_t *img,
gif_cmap_t   cmap,
int          interlace)
unsigned char		code_size;
code_size = getc(fp);
if (gif_read_lzw(fp, 1, code_size) < 0)
static int gif_read_lzw(FILE *fp,
int  first_time,
int  input_code_size)
int  input_code_size)
int set_code_size;
int *dataCopy = &input_code_size;
set_code_size = *dataCopy;
clear_code    = 1 << set_code_size;
for (i = 0; i < clear_code; i ++)
table[1][i] = i;
0

14212 CVE-2011-2896/cups_1.4.2_CVE-2011-2896_image-gif.c Buffer_Overflow_Indexes 463
static int
gif_read_image(FILE         *fp,
cups_image_t *img,
gif_cmap_t   cmap,
int          interlace)
unsigned char		code_size;
code_size = getc(fp);
if (gif_read_lzw(fp, 1, code_size) < 0)
static int gif_read_lzw(FILE *fp,
int  first_time,
int  input_code_size)
int set_code_size;
int *dataCopy = &input_code_size;
set_code_size = *dataCopy;
clear_code    = 1 << set_code_size;
for (i = 0; i < clear_code; i ++){
table[0][i] = 0;
table[1][i] = i;
1

14226 CVE-2011-2896/cups_1.4.2_CVE-2011-2896_image-gif.c Buffer_Overflow_Indexes 463
static int	gif_read_image(FILE         *fp,
cups_image_t *img,
gif_cmap_t   cmap,
int          interlace)
unsigned char		code_size;
code_size = getc(fp);
if (gif_read_lzw(fp, 1, code_size) < 0)
static int gif_read_lzw(FILE *fp,
int  first_time,
int  input_code_size)
short dataArray[5];
int set_code_size;
set_code_size = input_code_size;
dataArray[2] = set_code_size;
clear_code  = func(dataArray);
short func(short dataArray[])
short set_code_size = dataArray[2];
short temp = 1 << set_code_size;
return temp;
clear_code    = func(dataArray);
for (i = 0; i < clear_code; i ++)
table[1][i] = i;
0

14240 CVE-2011-2896/cups_1.4.2_CVE-2011-2896_image-gif.c Buffer_Overflow_Indexes 463
static int
gif_read_image(FILE         *fp,
cups_image_t *img,
gif_cmap_t   cmap,
int          interlace)
unsigned char		code_size;
code_size = getc(fp);
if (gif_read_lzw(fp, 1, code_size) < 0)
static int gif_read_lzw(FILE *fp,
int  first_time,
int  input_code_size)
short dataArray[5];
static short set_code_size, clear_code;
set_code_size = input_code_size;
dataArray[2] = set_code_size;
clear_code  = func(dataArray);
short func(short dataArray[])
short set_code_size = dataArray[2];
short temp = 1 << set_code_size;
return temp;
clear_code    = func(dataArray);
for (i = 0; i < clear_code; i ++){
table[0][i] = 0;
table[1][i] = i;
1

14259 CVE-2011-2896/cups_1.4.2_CVE-2011-2896_image-gif.c Buffer_Overflow_Indexes 463
static int
gif_read_image(FILE         *fp,
cups_image_t *img,
gif_cmap_t   cmap,
int          interlace)
unsigned char code_size;
code_size = getc(fp);
if (gif_read_lzw(fp, 1, code_size) < 0)
static int gif_read_lzw(FILE *fp,
int  first_time,
int  input_code_size)
int set_code_size;
set_code_size = input_code_size;
clear_code    = 1 << set_code_size;
for (i = 0; i < clear_code; i ++){
table[1][i] = i;
table[0][i] = 0;
1

